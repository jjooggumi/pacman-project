
PACMAN_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b3c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000076c  08007c48  08007c48  00008c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083b4  080083b4  0000a1c0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080083b4  080083b4  0000a1c0  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080083b4  080083b4  0000a1c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083b4  080083b4  000093b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080083b8  080083b8  000093b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001c0  20000000  080083bc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  200001c0  0800857c  0000a1c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000418  0800857c  0000a418  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cccb  00000000  00000000  0000a1e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019f4  00000000  00000000  00016eb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc0  00000000  00000000  000188a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ad0  00000000  00000000  00019668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d34  00000000  00000000  0001a138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e292  00000000  00000000  00031e6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bd80  00000000  00000000  000400fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cbe7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004314  00000000  00000000  000cbec4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000d01d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001c0 	.word	0x200001c0
 8000128:	00000000 	.word	0x00000000
 800012c:	08007c30 	.word	0x08007c30

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001c4 	.word	0x200001c4
 8000148:	08007c30 	.word	0x08007c30

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_fcmpun>:
 80006f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80006fc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000700:	d102      	bne.n	8000708 <__aeabi_fcmpun+0x14>
 8000702:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000706:	d108      	bne.n	800071a <__aeabi_fcmpun+0x26>
 8000708:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800070c:	d102      	bne.n	8000714 <__aeabi_fcmpun+0x20>
 800070e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000712:	d102      	bne.n	800071a <__aeabi_fcmpun+0x26>
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	4770      	bx	lr
 800071a:	f04f 0001 	mov.w	r0, #1
 800071e:	4770      	bx	lr

08000720 <__aeabi_f2iz>:
 8000720:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000724:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000728:	d30f      	bcc.n	800074a <__aeabi_f2iz+0x2a>
 800072a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800072e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000732:	d90d      	bls.n	8000750 <__aeabi_f2iz+0x30>
 8000734:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000738:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800073c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000740:	fa23 f002 	lsr.w	r0, r3, r2
 8000744:	bf18      	it	ne
 8000746:	4240      	negne	r0, r0
 8000748:	4770      	bx	lr
 800074a:	f04f 0000 	mov.w	r0, #0
 800074e:	4770      	bx	lr
 8000750:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000754:	d101      	bne.n	800075a <__aeabi_f2iz+0x3a>
 8000756:	0242      	lsls	r2, r0, #9
 8000758:	d105      	bne.n	8000766 <__aeabi_f2iz+0x46>
 800075a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800075e:	bf08      	it	eq
 8000760:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000764:	4770      	bx	lr
 8000766:	f04f 0000 	mov.w	r0, #0
 800076a:	4770      	bx	lr

0800076c <LCD_CS_LOW>:

	return ch;
}

/* ----------------------------- LCD low-level ----------------------------- */
static inline void LCD_CS_LOW(void) {
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	2101      	movs	r1, #1
 8000774:	4802      	ldr	r0, [pc, #8]	@ (8000780 <LCD_CS_LOW+0x14>)
 8000776:	f004 fb4a 	bl	8004e0e <HAL_GPIO_WritePin>
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40010c00 	.word	0x40010c00

08000784 <LCD_CS_HIGH>:
static inline void LCD_CS_HIGH(void) {
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000788:	2201      	movs	r2, #1
 800078a:	2101      	movs	r1, #1
 800078c:	4802      	ldr	r0, [pc, #8]	@ (8000798 <LCD_CS_HIGH+0x14>)
 800078e:	f004 fb3e 	bl	8004e0e <HAL_GPIO_WritePin>
}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40010c00 	.word	0x40010c00

0800079c <LCD_RS_CMD>:
static inline void LCD_RS_CMD(void) {
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2110      	movs	r1, #16
 80007a4:	4802      	ldr	r0, [pc, #8]	@ (80007b0 <LCD_RS_CMD+0x14>)
 80007a6:	f004 fb32 	bl	8004e0e <HAL_GPIO_WritePin>
}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40010800 	.word	0x40010800

080007b4 <LCD_RS_DATA>:
static inline void LCD_RS_DATA(void) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 80007b8:	2201      	movs	r2, #1
 80007ba:	2110      	movs	r1, #16
 80007bc:	4802      	ldr	r0, [pc, #8]	@ (80007c8 <LCD_RS_DATA+0x14>)
 80007be:	f004 fb26 	bl	8004e0e <HAL_GPIO_WritePin>
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40010800 	.word	0x40010800

080007cc <LCD_WR_LOW>:
static inline void LCD_WR_LOW(void) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2102      	movs	r1, #2
 80007d4:	4802      	ldr	r0, [pc, #8]	@ (80007e0 <LCD_WR_LOW+0x14>)
 80007d6:	f004 fb1a 	bl	8004e0e <HAL_GPIO_WritePin>
}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40010800 	.word	0x40010800

080007e4 <LCD_WR_HIGH>:
static inline void LCD_WR_HIGH(void) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 80007e8:	2201      	movs	r2, #1
 80007ea:	2102      	movs	r1, #2
 80007ec:	4802      	ldr	r0, [pc, #8]	@ (80007f8 <LCD_WR_HIGH+0x14>)
 80007ee:	f004 fb0e 	bl	8004e0e <HAL_GPIO_WritePin>
}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40010800 	.word	0x40010800

080007fc <LCD_RD_HIGH>:
static inline void LCD_RD_HIGH(void) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RD_GPIO_Port, LCD_RD_Pin, GPIO_PIN_SET);
 8000800:	2201      	movs	r2, #1
 8000802:	2101      	movs	r1, #1
 8000804:	4802      	ldr	r0, [pc, #8]	@ (8000810 <LCD_RD_HIGH+0x14>)
 8000806:	f004 fb02 	bl	8004e0e <HAL_GPIO_WritePin>
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40010800 	.word	0x40010800

08000814 <LCD_RST_LOW>:
static inline void LCD_RST_LOW(void) {
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8000818:	2200      	movs	r2, #0
 800081a:	2102      	movs	r1, #2
 800081c:	4802      	ldr	r0, [pc, #8]	@ (8000828 <LCD_RST_LOW+0x14>)
 800081e:	f004 faf6 	bl	8004e0e <HAL_GPIO_WritePin>
}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40011000 	.word	0x40011000

0800082c <LCD_RST_HIGH>:
static inline void LCD_RST_HIGH(void) {
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8000830:	2201      	movs	r2, #1
 8000832:	2102      	movs	r1, #2
 8000834:	4802      	ldr	r0, [pc, #8]	@ (8000840 <LCD_RST_HIGH+0x14>)
 8000836:	f004 faea 	bl	8004e0e <HAL_GPIO_WritePin>
}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40011000 	.word	0x40011000

08000844 <LCD_SET_DATA>:

/* 8-bit data bus */
static inline void LCD_SET_DATA(uint8_t d) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin,
			(d & (1 << 0)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	f003 0301 	and.w	r3, r3, #1
 8000854:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin,
 8000856:	461a      	mov	r2, r3
 8000858:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800085c:	4829      	ldr	r0, [pc, #164]	@ (8000904 <LCD_SET_DATA+0xc0>)
 800085e:	f004 fad6 	bl	8004e0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin,
			(d & (1 << 1)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	105b      	asrs	r3, r3, #1
 8000866:	b2db      	uxtb	r3, r3
 8000868:	f003 0301 	and.w	r3, r3, #1
 800086c:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin,
 800086e:	461a      	mov	r2, r3
 8000870:	2180      	movs	r1, #128	@ 0x80
 8000872:	4825      	ldr	r0, [pc, #148]	@ (8000908 <LCD_SET_DATA+0xc4>)
 8000874:	f004 facb 	bl	8004e0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin,
			(d & (1 << 2)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	109b      	asrs	r3, r3, #2
 800087c:	b2db      	uxtb	r3, r3
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin,
 8000884:	461a      	mov	r2, r3
 8000886:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800088a:	481e      	ldr	r0, [pc, #120]	@ (8000904 <LCD_SET_DATA+0xc0>)
 800088c:	f004 fabf 	bl	8004e0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin,
			(d & (1 << 3)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	10db      	asrs	r3, r3, #3
 8000894:	b2db      	uxtb	r3, r3
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin,
 800089c:	461a      	mov	r2, r3
 800089e:	2108      	movs	r1, #8
 80008a0:	481a      	ldr	r0, [pc, #104]	@ (800090c <LCD_SET_DATA+0xc8>)
 80008a2:	f004 fab4 	bl	8004e0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin,
			(d & (1 << 4)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	111b      	asrs	r3, r3, #4
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	f003 0301 	and.w	r3, r3, #1
 80008b0:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin,
 80008b2:	461a      	mov	r2, r3
 80008b4:	2120      	movs	r1, #32
 80008b6:	4815      	ldr	r0, [pc, #84]	@ (800090c <LCD_SET_DATA+0xc8>)
 80008b8:	f004 faa9 	bl	8004e0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin,
			(d & (1 << 5)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	115b      	asrs	r3, r3, #5
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin,
 80008c8:	461a      	mov	r2, r3
 80008ca:	2110      	movs	r1, #16
 80008cc:	480f      	ldr	r0, [pc, #60]	@ (800090c <LCD_SET_DATA+0xc8>)
 80008ce:	f004 fa9e 	bl	8004e0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin,
			(d & (1 << 6)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	119b      	asrs	r3, r3, #6
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	f003 0301 	and.w	r3, r3, #1
 80008dc:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin,
 80008de:	461a      	mov	r2, r3
 80008e0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008e4:	4809      	ldr	r0, [pc, #36]	@ (800090c <LCD_SET_DATA+0xc8>)
 80008e6:	f004 fa92 	bl	8004e0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin,
			(d & (1 << 7)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	09db      	lsrs	r3, r3, #7
 80008ee:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin,
 80008f0:	461a      	mov	r2, r3
 80008f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008f6:	4803      	ldr	r0, [pc, #12]	@ (8000904 <LCD_SET_DATA+0xc0>)
 80008f8:	f004 fa89 	bl	8004e0e <HAL_GPIO_WritePin>
}
 80008fc:	bf00      	nop
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40010800 	.word	0x40010800
 8000908:	40011000 	.word	0x40011000
 800090c:	40010c00 	.word	0x40010c00

08000910 <LCD_WRITE_STROBE>:

static inline void LCD_WRITE_STROBE(void) {
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
	LCD_WR_LOW();
 8000914:	f7ff ff5a 	bl	80007cc <LCD_WR_LOW>
	__NOP();
 8000918:	bf00      	nop
	__NOP();
 800091a:	bf00      	nop
	__NOP();
 800091c:	bf00      	nop
	LCD_WR_HIGH();
 800091e:	f7ff ff61 	bl	80007e4 <LCD_WR_HIGH>
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}

08000926 <ILI9341_WriteCmd>:

static void ILI9341_WriteCmd(uint8_t cmd) {
 8000926:	b580      	push	{r7, lr}
 8000928:	b082      	sub	sp, #8
 800092a:	af00      	add	r7, sp, #0
 800092c:	4603      	mov	r3, r0
 800092e:	71fb      	strb	r3, [r7, #7]
	LCD_RS_CMD();
 8000930:	f7ff ff34 	bl	800079c <LCD_RS_CMD>
	LCD_SET_DATA(cmd);
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	4618      	mov	r0, r3
 8000938:	f7ff ff84 	bl	8000844 <LCD_SET_DATA>
	LCD_WRITE_STROBE();
 800093c:	f7ff ffe8 	bl	8000910 <LCD_WRITE_STROBE>
}
 8000940:	bf00      	nop
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}

08000948 <ILI9341_WriteData8>:
static void ILI9341_WriteData8(uint8_t d) {
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	71fb      	strb	r3, [r7, #7]
	LCD_RS_DATA();
 8000952:	f7ff ff2f 	bl	80007b4 <LCD_RS_DATA>
	LCD_SET_DATA(d);
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff ff73 	bl	8000844 <LCD_SET_DATA>
	LCD_WRITE_STROBE();
 800095e:	f7ff ffd7 	bl	8000910 <LCD_WRITE_STROBE>
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}

0800096a <ILI9341_WriteData16>:
static void ILI9341_WriteData16(uint16_t d) {
 800096a:	b580      	push	{r7, lr}
 800096c:	b082      	sub	sp, #8
 800096e:	af00      	add	r7, sp, #0
 8000970:	4603      	mov	r3, r0
 8000972:	80fb      	strh	r3, [r7, #6]
	ILI9341_WriteData8(d >> 8);
 8000974:	88fb      	ldrh	r3, [r7, #6]
 8000976:	0a1b      	lsrs	r3, r3, #8
 8000978:	b29b      	uxth	r3, r3
 800097a:	b2db      	uxtb	r3, r3
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff ffe3 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteData8(d & 0xFF);
 8000982:	88fb      	ldrh	r3, [r7, #6]
 8000984:	b2db      	uxtb	r3, r3
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff ffde 	bl	8000948 <ILI9341_WriteData8>
}
 800098c:	bf00      	nop
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <ILI9341_SetWindow>:

static void ILI9341_SetWindow(uint16_t x0, uint16_t y0, uint16_t x1,
		uint16_t y1) {
 8000994:	b590      	push	{r4, r7, lr}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	4604      	mov	r4, r0
 800099c:	4608      	mov	r0, r1
 800099e:	4611      	mov	r1, r2
 80009a0:	461a      	mov	r2, r3
 80009a2:	4623      	mov	r3, r4
 80009a4:	80fb      	strh	r3, [r7, #6]
 80009a6:	4603      	mov	r3, r0
 80009a8:	80bb      	strh	r3, [r7, #4]
 80009aa:	460b      	mov	r3, r1
 80009ac:	807b      	strh	r3, [r7, #2]
 80009ae:	4613      	mov	r3, r2
 80009b0:	803b      	strh	r3, [r7, #0]
	ILI9341_WriteCmd(0x2A);
 80009b2:	202a      	movs	r0, #42	@ 0x2a
 80009b4:	f7ff ffb7 	bl	8000926 <ILI9341_WriteCmd>
	ILI9341_WriteData16(x0);
 80009b8:	88fb      	ldrh	r3, [r7, #6]
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff ffd5 	bl	800096a <ILI9341_WriteData16>
	ILI9341_WriteData16(x1);
 80009c0:	887b      	ldrh	r3, [r7, #2]
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff ffd1 	bl	800096a <ILI9341_WriteData16>
	ILI9341_WriteCmd(0x2B);
 80009c8:	202b      	movs	r0, #43	@ 0x2b
 80009ca:	f7ff ffac 	bl	8000926 <ILI9341_WriteCmd>
	ILI9341_WriteData16(y0);
 80009ce:	88bb      	ldrh	r3, [r7, #4]
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff ffca 	bl	800096a <ILI9341_WriteData16>
	ILI9341_WriteData16(y1);
 80009d6:	883b      	ldrh	r3, [r7, #0]
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff ffc6 	bl	800096a <ILI9341_WriteData16>
	ILI9341_WriteCmd(0x2C);
 80009de:	202c      	movs	r0, #44	@ 0x2c
 80009e0:	f7ff ffa1 	bl	8000926 <ILI9341_WriteCmd>
}
 80009e4:	bf00      	nop
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd90      	pop	{r4, r7, pc}

080009ec <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t c) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	80fb      	strh	r3, [r7, #6]
 80009f6:	460b      	mov	r3, r1
 80009f8:	80bb      	strh	r3, [r7, #4]
 80009fa:	4613      	mov	r3, r2
 80009fc:	807b      	strh	r3, [r7, #2]
	if (x >= LCD_WIDTH || y >= LCD_HEIGHT)
 80009fe:	88fb      	ldrh	r3, [r7, #6]
 8000a00:	2bef      	cmp	r3, #239	@ 0xef
 8000a02:	d80e      	bhi.n	8000a22 <ILI9341_DrawPixel+0x36>
 8000a04:	88bb      	ldrh	r3, [r7, #4]
 8000a06:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000a0a:	d20a      	bcs.n	8000a22 <ILI9341_DrawPixel+0x36>
		return;
	ILI9341_SetWindow(x, y, x, y);
 8000a0c:	88bb      	ldrh	r3, [r7, #4]
 8000a0e:	88fa      	ldrh	r2, [r7, #6]
 8000a10:	88b9      	ldrh	r1, [r7, #4]
 8000a12:	88f8      	ldrh	r0, [r7, #6]
 8000a14:	f7ff ffbe 	bl	8000994 <ILI9341_SetWindow>
	ILI9341_WriteData16(c);
 8000a18:	887b      	ldrh	r3, [r7, #2]
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff ffa5 	bl	800096a <ILI9341_WriteData16>
 8000a20:	e000      	b.n	8000a24 <ILI9341_DrawPixel+0x38>
		return;
 8000a22:	bf00      	nop
}
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <ILI9341_FillRect>:
void ILI9341_FillRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h,
		uint16_t c) {
 8000a2a:	b590      	push	{r4, r7, lr}
 8000a2c:	b085      	sub	sp, #20
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	4604      	mov	r4, r0
 8000a32:	4608      	mov	r0, r1
 8000a34:	4611      	mov	r1, r2
 8000a36:	461a      	mov	r2, r3
 8000a38:	4623      	mov	r3, r4
 8000a3a:	80fb      	strh	r3, [r7, #6]
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	80bb      	strh	r3, [r7, #4]
 8000a40:	460b      	mov	r3, r1
 8000a42:	807b      	strh	r3, [r7, #2]
 8000a44:	4613      	mov	r3, r2
 8000a46:	803b      	strh	r3, [r7, #0]
	if (x >= LCD_WIDTH || y >= LCD_HEIGHT)
 8000a48:	88fb      	ldrh	r3, [r7, #6]
 8000a4a:	2bef      	cmp	r3, #239	@ 0xef
 8000a4c:	d834      	bhi.n	8000ab8 <ILI9341_FillRect+0x8e>
 8000a4e:	88bb      	ldrh	r3, [r7, #4]
 8000a50:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000a54:	d230      	bcs.n	8000ab8 <ILI9341_FillRect+0x8e>
		return;
	uint16_t x1 = (x + w - 1 < LCD_WIDTH) ? (x + w - 1) : (LCD_WIDTH - 1);
 8000a56:	88fa      	ldrh	r2, [r7, #6]
 8000a58:	887b      	ldrh	r3, [r7, #2]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	2bf0      	cmp	r3, #240	@ 0xf0
 8000a5e:	bfa8      	it	ge
 8000a60:	23f0      	movge	r3, #240	@ 0xf0
 8000a62:	b29b      	uxth	r3, r3
 8000a64:	3b01      	subs	r3, #1
 8000a66:	817b      	strh	r3, [r7, #10]
	uint16_t y1 = (y + h - 1 < LCD_HEIGHT) ? (y + h - 1) : (LCD_HEIGHT - 1);
 8000a68:	88ba      	ldrh	r2, [r7, #4]
 8000a6a:	883b      	ldrh	r3, [r7, #0]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000a72:	bfa8      	it	ge
 8000a74:	f44f 73a0 	movge.w	r3, #320	@ 0x140
 8000a78:	b29b      	uxth	r3, r3
 8000a7a:	3b01      	subs	r3, #1
 8000a7c:	813b      	strh	r3, [r7, #8]
	ILI9341_SetWindow(x, y, x1, y1);
 8000a7e:	893b      	ldrh	r3, [r7, #8]
 8000a80:	897a      	ldrh	r2, [r7, #10]
 8000a82:	88b9      	ldrh	r1, [r7, #4]
 8000a84:	88f8      	ldrh	r0, [r7, #6]
 8000a86:	f7ff ff85 	bl	8000994 <ILI9341_SetWindow>
	uint32_t n = (uint32_t) (x1 - x + 1) * (uint32_t) (y1 - y + 1);
 8000a8a:	897a      	ldrh	r2, [r7, #10]
 8000a8c:	88fb      	ldrh	r3, [r7, #6]
 8000a8e:	1ad3      	subs	r3, r2, r3
 8000a90:	3301      	adds	r3, #1
 8000a92:	4619      	mov	r1, r3
 8000a94:	893a      	ldrh	r2, [r7, #8]
 8000a96:	88bb      	ldrh	r3, [r7, #4]
 8000a98:	1ad3      	subs	r3, r2, r3
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	fb01 f303 	mul.w	r3, r1, r3
 8000aa0:	60fb      	str	r3, [r7, #12]
	while (n--)
 8000aa2:	e003      	b.n	8000aac <ILI9341_FillRect+0x82>
		ILI9341_WriteData16(c);
 8000aa4:	8c3b      	ldrh	r3, [r7, #32]
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff ff5f 	bl	800096a <ILI9341_WriteData16>
	while (n--)
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	1e5a      	subs	r2, r3, #1
 8000ab0:	60fa      	str	r2, [r7, #12]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d1f6      	bne.n	8000aa4 <ILI9341_FillRect+0x7a>
 8000ab6:	e000      	b.n	8000aba <ILI9341_FillRect+0x90>
		return;
 8000ab8:	bf00      	nop
}
 8000aba:	3714      	adds	r7, #20
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd90      	pop	{r4, r7, pc}

08000ac0 <ILI9341_FillScreen>:
void ILI9341_FillScreen(uint16_t c) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af02      	add	r7, sp, #8
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	80fb      	strh	r3, [r7, #6]
	ILI9341_FillRect(0, 0, LCD_WIDTH, LCD_HEIGHT, c);
 8000aca:	88fb      	ldrh	r3, [r7, #6]
 8000acc:	9300      	str	r3, [sp, #0]
 8000ace:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000ad2:	22f0      	movs	r2, #240	@ 0xf0
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	f7ff ffa7 	bl	8000a2a <ILI9341_FillRect>
}
 8000adc:	bf00      	nop
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <fidx>:
{ 0x3E, 0x41, 0x41, 0x41, 0x22 }, /* C */
{ 0x7F, 0x02, 0x0C, 0x02, 0x7F }, /* M */
{ 0x7F, 0x04, 0x08, 0x10, 0x7F }, /* N */
};

static int fidx(char c) {
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	71fb      	strb	r3, [r7, #7]
	switch (c) {
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	2b20      	cmp	r3, #32
 8000af2:	d02b      	beq.n	8000b4c <fidx+0x68>
 8000af4:	2b20      	cmp	r3, #32
 8000af6:	db35      	blt.n	8000b64 <fidx+0x80>
 8000af8:	2b50      	cmp	r3, #80	@ 0x50
 8000afa:	dc33      	bgt.n	8000b64 <fidx+0x80>
 8000afc:	2b41      	cmp	r3, #65	@ 0x41
 8000afe:	db31      	blt.n	8000b64 <fidx+0x80>
 8000b00:	3b41      	subs	r3, #65	@ 0x41
 8000b02:	2b0f      	cmp	r3, #15
 8000b04:	d82e      	bhi.n	8000b64 <fidx+0x80>
 8000b06:	a201      	add	r2, pc, #4	@ (adr r2, 8000b0c <fidx+0x28>)
 8000b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b0c:	08000b55 	.word	0x08000b55
 8000b10:	08000b65 	.word	0x08000b65
 8000b14:	08000b5d 	.word	0x08000b5d
 8000b18:	08000b65 	.word	0x08000b65
 8000b1c:	08000b65 	.word	0x08000b65
 8000b20:	08000b65 	.word	0x08000b65
 8000b24:	08000b65 	.word	0x08000b65
 8000b28:	08000b65 	.word	0x08000b65
 8000b2c:	08000b65 	.word	0x08000b65
 8000b30:	08000b65 	.word	0x08000b65
 8000b34:	08000b65 	.word	0x08000b65
 8000b38:	08000b65 	.word	0x08000b65
 8000b3c:	08000b59 	.word	0x08000b59
 8000b40:	08000b51 	.word	0x08000b51
 8000b44:	08000b65 	.word	0x08000b65
 8000b48:	08000b61 	.word	0x08000b61
	case ' ':
		return 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	e00a      	b.n	8000b66 <fidx+0x82>
	case 'N':
		return 1;
 8000b50:	2301      	movs	r3, #1
 8000b52:	e008      	b.n	8000b66 <fidx+0x82>
	case 'A':
		return 2;
 8000b54:	2302      	movs	r3, #2
 8000b56:	e006      	b.n	8000b66 <fidx+0x82>
	case 'M':
		return 3;
 8000b58:	2303      	movs	r3, #3
 8000b5a:	e004      	b.n	8000b66 <fidx+0x82>
	case 'C':
		return 4;
 8000b5c:	2304      	movs	r3, #4
 8000b5e:	e002      	b.n	8000b66 <fidx+0x82>
	case 'P':
		return 5;
 8000b60:	2305      	movs	r3, #5
 8000b62:	e000      	b.n	8000b66 <fidx+0x82>
	default:
		return 0;
 8000b64:	2300      	movs	r3, #0
	}
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bc80      	pop	{r7}
 8000b6e:	4770      	bx	lr

08000b70 <fw_rand>:

/* ----- LCG 난수 (컨페티/각도 지터용) ----- */
static uint32_t fw_seed = 0x31415927u;
static inline uint32_t fw_rand(void) {
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
	fw_seed = fw_seed * 1664525u + 1013904223u;
 8000b74:	4b07      	ldr	r3, [pc, #28]	@ (8000b94 <fw_rand+0x24>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a07      	ldr	r2, [pc, #28]	@ (8000b98 <fw_rand+0x28>)
 8000b7a:	fb03 f202 	mul.w	r2, r3, r2
 8000b7e:	4b07      	ldr	r3, [pc, #28]	@ (8000b9c <fw_rand+0x2c>)
 8000b80:	4413      	add	r3, r2
 8000b82:	4a04      	ldr	r2, [pc, #16]	@ (8000b94 <fw_rand+0x24>)
 8000b84:	6013      	str	r3, [r2, #0]
	return fw_seed;
 8000b86:	4b03      	ldr	r3, [pc, #12]	@ (8000b94 <fw_rand+0x24>)
 8000b88:	681b      	ldr	r3, [r3, #0]
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bc80      	pop	{r7}
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	2000015c 	.word	0x2000015c
 8000b98:	0019660d 	.word	0x0019660d
 8000b9c:	3c6ef35f 	.word	0x3c6ef35f

08000ba0 <PutDot2>:

/* 안전한 사각 점 찍기(2x2 기본) */
static inline void PutDot2(int x, int y, uint16_t c) {
 8000ba0:	b590      	push	{r4, r7, lr}
 8000ba2:	b08b      	sub	sp, #44	@ 0x2c
 8000ba4:	af02      	add	r7, sp, #8
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	4613      	mov	r3, r2
 8000bac:	80fb      	strh	r3, [r7, #6]
	if ((unsigned) x < LCD_WIDTH && (unsigned) y < LCD_HEIGHT) {
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	2bef      	cmp	r3, #239	@ 0xef
 8000bb2:	d833      	bhi.n	8000c1c <PutDot2+0x7c>
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000bba:	d22f      	bcs.n	8000c1c <PutDot2+0x7c>
		int x0 = (x > 0) ? (x - 1) : x, y0 = (y > 0) ? (y - 1) : y;
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	dd02      	ble.n	8000bc8 <PutDot2+0x28>
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	3b01      	subs	r3, #1
 8000bc6:	e000      	b.n	8000bca <PutDot2+0x2a>
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	61fb      	str	r3, [r7, #28]
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	dd02      	ble.n	8000bd8 <PutDot2+0x38>
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	3b01      	subs	r3, #1
 8000bd6:	e000      	b.n	8000bda <PutDot2+0x3a>
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	61bb      	str	r3, [r7, #24]
		int w = (x0 + 2 <= LCD_WIDTH) ? 2 : (LCD_WIDTH - x0);
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	2bee      	cmp	r3, #238	@ 0xee
 8000be0:	dd03      	ble.n	8000bea <PutDot2+0x4a>
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8000be8:	e000      	b.n	8000bec <PutDot2+0x4c>
 8000bea:	2302      	movs	r3, #2
 8000bec:	617b      	str	r3, [r7, #20]
		int h = (y0 + 2 <= LCD_HEIGHT) ? 2 : (LCD_HEIGHT - y0);
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8000bf4:	dd03      	ble.n	8000bfe <PutDot2+0x5e>
 8000bf6:	69bb      	ldr	r3, [r7, #24]
 8000bf8:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8000bfc:	e000      	b.n	8000c00 <PutDot2+0x60>
 8000bfe:	2302      	movs	r3, #2
 8000c00:	613b      	str	r3, [r7, #16]
		ILI9341_FillRect(x0, y0, w, h, c);
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	b298      	uxth	r0, r3
 8000c06:	69bb      	ldr	r3, [r7, #24]
 8000c08:	b299      	uxth	r1, r3
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	b29a      	uxth	r2, r3
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	b29c      	uxth	r4, r3
 8000c12:	88fb      	ldrh	r3, [r7, #6]
 8000c14:	9300      	str	r3, [sp, #0]
 8000c16:	4623      	mov	r3, r4
 8000c18:	f7ff ff07 	bl	8000a2a <ILI9341_FillRect>
	}
}
 8000c1c:	bf00      	nop
 8000c1e:	3724      	adds	r7, #36	@ 0x24
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd90      	pop	{r4, r7, pc}

08000c24 <clamp_inside>:

/* 화면 안쪽으로 위치 보정(여유 margin) */
static void clamp_inside(int *x, int *y, int margin) {
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
	if (*x < margin)
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	687a      	ldr	r2, [r7, #4]
 8000c36:	429a      	cmp	r2, r3
 8000c38:	dd02      	ble.n	8000c40 <clamp_inside+0x1c>
		*x = margin;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	687a      	ldr	r2, [r7, #4]
 8000c3e:	601a      	str	r2, [r3, #0]
	if (*x > (LCD_WIDTH - 1 - margin))
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	dd04      	ble.n	8000c58 <clamp_inside+0x34>
		*x = LCD_WIDTH - 1 - margin;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	f1c3 02ef 	rsb	r2, r3, #239	@ 0xef
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	601a      	str	r2, [r3, #0]
	if (*y < margin)
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	dd02      	ble.n	8000c68 <clamp_inside+0x44>
		*y = margin;
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	601a      	str	r2, [r3, #0]
	if (*y > (LCD_HEIGHT - 1 - margin))
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8000c72:	3301      	adds	r3, #1
 8000c74:	429a      	cmp	r2, r3
 8000c76:	dd05      	ble.n	8000c84 <clamp_inside+0x60>
		*y = LCD_HEIGHT - 1 - margin;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8000c7e:	3301      	adds	r3, #1
 8000c80:	68ba      	ldr	r2, [r7, #8]
 8000c82:	6013      	str	r3, [r2, #0]
}
 8000c84:	bf00      	nop
 8000c86:	3714      	adds	r7, #20
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bc80      	pop	{r7}
 8000c8c:	4770      	bx	lr
	...

08000c90 <DrawChar5x7_FlipXY>:

/* ===== 좌우+상하 동시 미러 (글자용) ===== */
static void DrawChar5x7_FlipXY(int x, int y, char c, uint16_t fg, uint16_t bg,
		int s) {
 8000c90:	b590      	push	{r4, r7, lr}
 8000c92:	b08b      	sub	sp, #44	@ 0x2c
 8000c94:	af02      	add	r7, sp, #8
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	4611      	mov	r1, r2
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	71fb      	strb	r3, [r7, #7]
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	80bb      	strh	r3, [r7, #4]
	int i = fidx(c);
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff ff1b 	bl	8000ae4 <fidx>
 8000cae:	6178      	str	r0, [r7, #20]
	for (int col = 0; col < 5; col++) {
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61fb      	str	r3, [r7, #28]
 8000cb4:	e042      	b.n	8000d3c <DrawChar5x7_FlipXY+0xac>
		/* 좌우 반전을 위해 오른쪽 열부터 읽고, */
		uint8_t bits = font5x7[i][4 - col];
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	f1c3 0104 	rsb	r1, r3, #4
 8000cbc:	482f      	ldr	r0, [pc, #188]	@ (8000d7c <DrawChar5x7_FlipXY+0xec>)
 8000cbe:	697a      	ldr	r2, [r7, #20]
 8000cc0:	4613      	mov	r3, r2
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	4413      	add	r3, r2
 8000cc6:	4403      	add	r3, r0
 8000cc8:	440b      	add	r3, r1
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	74fb      	strb	r3, [r7, #19]
		for (int row = 0; row < 7; row++) {
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61bb      	str	r3, [r7, #24]
 8000cd2:	e02d      	b.n	8000d30 <DrawChar5x7_FlipXY+0xa0>
			/* 상하 반전을 위해 아래쪽 행부터 찍는다 */
			uint16_t color = (bits & (1 << (row))) ? fg : bg; // row를 그대로 쓰면 위아래 뒤집힘
 8000cd4:	7cfa      	ldrb	r2, [r7, #19]
 8000cd6:	69bb      	ldr	r3, [r7, #24]
 8000cd8:	fa42 f303 	asr.w	r3, r2, r3
 8000cdc:	f003 0301 	and.w	r3, r3, #1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <DrawChar5x7_FlipXY+0x58>
 8000ce4:	88bb      	ldrh	r3, [r7, #4]
 8000ce6:	e000      	b.n	8000cea <DrawChar5x7_FlipXY+0x5a>
 8000ce8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000cea:	823b      	strh	r3, [r7, #16]
			ILI9341_FillRect(x + col * s, y + row * s, s, s, color);
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000cf2:	b292      	uxth	r2, r2
 8000cf4:	fb02 f303 	mul.w	r3, r2, r3
 8000cf8:	b29a      	uxth	r2, r3
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	4413      	add	r3, r2
 8000d00:	b298      	uxth	r0, r3
 8000d02:	69bb      	ldr	r3, [r7, #24]
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000d08:	b292      	uxth	r2, r2
 8000d0a:	fb02 f303 	mul.w	r3, r2, r3
 8000d0e:	b29a      	uxth	r2, r3
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	4413      	add	r3, r2
 8000d16:	b299      	uxth	r1, r3
 8000d18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d1a:	b29a      	uxth	r2, r3
 8000d1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d1e:	b29c      	uxth	r4, r3
 8000d20:	8a3b      	ldrh	r3, [r7, #16]
 8000d22:	9300      	str	r3, [sp, #0]
 8000d24:	4623      	mov	r3, r4
 8000d26:	f7ff fe80 	bl	8000a2a <ILI9341_FillRect>
		for (int row = 0; row < 7; row++) {
 8000d2a:	69bb      	ldr	r3, [r7, #24]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	61bb      	str	r3, [r7, #24]
 8000d30:	69bb      	ldr	r3, [r7, #24]
 8000d32:	2b06      	cmp	r3, #6
 8000d34:	ddce      	ble.n	8000cd4 <DrawChar5x7_FlipXY+0x44>
	for (int col = 0; col < 5; col++) {
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	61fb      	str	r3, [r7, #28]
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	2b04      	cmp	r3, #4
 8000d40:	ddb9      	ble.n	8000cb6 <DrawChar5x7_FlipXY+0x26>
		}
	}
	/* 글자 간 공백 */
	ILI9341_FillRect(x + 5 * s, y, s, 7 * s, bg);
 8000d42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d44:	b29b      	uxth	r3, r3
 8000d46:	461a      	mov	r2, r3
 8000d48:	0092      	lsls	r2, r2, #2
 8000d4a:	4413      	add	r3, r2
 8000d4c:	b29a      	uxth	r2, r3
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	4413      	add	r3, r2
 8000d54:	b298      	uxth	r0, r3
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	b299      	uxth	r1, r3
 8000d5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d5c:	b29a      	uxth	r2, r3
 8000d5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d60:	b29b      	uxth	r3, r3
 8000d62:	461c      	mov	r4, r3
 8000d64:	00e4      	lsls	r4, r4, #3
 8000d66:	1ae3      	subs	r3, r4, r3
 8000d68:	b29c      	uxth	r4, r3
 8000d6a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000d6c:	9300      	str	r3, [sp, #0]
 8000d6e:	4623      	mov	r3, r4
 8000d70:	f7ff fe5b 	bl	8000a2a <ILI9341_FillRect>
}
 8000d74:	bf00      	nop
 8000d76:	3724      	adds	r7, #36	@ 0x24
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd90      	pop	{r4, r7, pc}
 8000d7c:	08007e24 	.word	0x08007e24

08000d80 <DrawText_FlipXY>:

static void DrawText_FlipXY(int x, int y, const char *s, uint16_t fg,
		uint16_t bg, int scale) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b088      	sub	sp, #32
 8000d84:	af02      	add	r7, sp, #8
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
 8000d8c:	807b      	strh	r3, [r7, #2]
	int cx = x;
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	617b      	str	r3, [r7, #20]
	while (*s) {
 8000d92:	e016      	b.n	8000dc2 <DrawText_FlipXY+0x42>
		DrawChar5x7_FlipXY(cx, y, *s++, fg, bg, scale);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	1c5a      	adds	r2, r3, #1
 8000d98:	607a      	str	r2, [r7, #4]
 8000d9a:	781a      	ldrb	r2, [r3, #0]
 8000d9c:	8879      	ldrh	r1, [r7, #2]
 8000d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000da0:	9301      	str	r3, [sp, #4]
 8000da2:	8c3b      	ldrh	r3, [r7, #32]
 8000da4:	9300      	str	r3, [sp, #0]
 8000da6:	460b      	mov	r3, r1
 8000da8:	68b9      	ldr	r1, [r7, #8]
 8000daa:	6978      	ldr	r0, [r7, #20]
 8000dac:	f7ff ff70 	bl	8000c90 <DrawChar5x7_FlipXY>
		cx += 6 * scale;
 8000db0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000db2:	4613      	mov	r3, r2
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	4413      	add	r3, r2
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	461a      	mov	r2, r3
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	617b      	str	r3, [r7, #20]
	while (*s) {
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d1e4      	bne.n	8000d94 <DrawText_FlipXY+0x14>
	}
}
 8000dca:	bf00      	nop
 8000dcc:	bf00      	nop
 8000dce:	3718      	adds	r7, #24
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <DrawFilledCircle>:

/* circles + pacman */
static void DrawFilledCircle(int xc, int yc, int r, uint16_t color) {
 8000dd4:	b5b0      	push	{r4, r5, r7, lr}
 8000dd6:	b088      	sub	sp, #32
 8000dd8:	af02      	add	r7, sp, #8
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
 8000de0:	807b      	strh	r3, [r7, #2]
	for (int y = -r; y <= r; y++) {
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	425b      	negs	r3, r3
 8000de6:	617b      	str	r3, [r7, #20]
 8000de8:	e048      	b.n	8000e7c <DrawFilledCircle+0xa8>
		int dx = (int) (sqrtf((float) r * r - (float) y * y) + 0.5f);
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f7ff fa68 	bl	80002c0 <__aeabi_i2f>
 8000df0:	4604      	mov	r4, r0
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f7ff fa64 	bl	80002c0 <__aeabi_i2f>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4620      	mov	r0, r4
 8000dfe:	f7ff fab3 	bl	8000368 <__aeabi_fmul>
 8000e02:	4603      	mov	r3, r0
 8000e04:	461d      	mov	r5, r3
 8000e06:	6978      	ldr	r0, [r7, #20]
 8000e08:	f7ff fa5a 	bl	80002c0 <__aeabi_i2f>
 8000e0c:	4604      	mov	r4, r0
 8000e0e:	6978      	ldr	r0, [r7, #20]
 8000e10:	f7ff fa56 	bl	80002c0 <__aeabi_i2f>
 8000e14:	4603      	mov	r3, r0
 8000e16:	4619      	mov	r1, r3
 8000e18:	4620      	mov	r0, r4
 8000e1a:	f7ff faa5 	bl	8000368 <__aeabi_fmul>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	4619      	mov	r1, r3
 8000e22:	4628      	mov	r0, r5
 8000e24:	f7ff f996 	bl	8000154 <__aeabi_fsub>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f006 f878 	bl	8006f20 <sqrtf>
 8000e30:	4603      	mov	r3, r0
 8000e32:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff f98e 	bl	8000158 <__addsf3>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff fc6e 	bl	8000720 <__aeabi_f2iz>
 8000e44:	4603      	mov	r3, r0
 8000e46:	613b      	str	r3, [r7, #16]
		ILI9341_FillRect(xc - dx, yc + y, 2 * dx + 1, 1, color);
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	b29a      	uxth	r2, r3
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	b298      	uxth	r0, r3
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	4413      	add	r3, r2
 8000e5e:	b299      	uxth	r1, r3
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	3301      	adds	r3, #1
 8000e6a:	b29a      	uxth	r2, r3
 8000e6c:	887b      	ldrh	r3, [r7, #2]
 8000e6e:	9300      	str	r3, [sp, #0]
 8000e70:	2301      	movs	r3, #1
 8000e72:	f7ff fdda 	bl	8000a2a <ILI9341_FillRect>
	for (int y = -r; y <= r; y++) {
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	617b      	str	r3, [r7, #20]
 8000e7c:	697a      	ldr	r2, [r7, #20]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	ddb2      	ble.n	8000dea <DrawFilledCircle+0x16>
	}
}
 8000e84:	bf00      	nop
 8000e86:	bf00      	nop
 8000e88:	3718      	adds	r7, #24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bdb0      	pop	{r4, r5, r7, pc}

08000e8e <DrawLineH>:

static void DrawLineH(int x, int y, int w, int t, uint16_t c) {
 8000e8e:	b590      	push	{r4, r7, lr}
 8000e90:	b087      	sub	sp, #28
 8000e92:	af02      	add	r7, sp, #8
 8000e94:	60f8      	str	r0, [r7, #12]
 8000e96:	60b9      	str	r1, [r7, #8]
 8000e98:	607a      	str	r2, [r7, #4]
 8000e9a:	603b      	str	r3, [r7, #0]
	ILI9341_FillRect(x, y - t / 2, w, t, c);
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	b298      	uxth	r0, r3
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	0fda      	lsrs	r2, r3, #31
 8000ea4:	4413      	add	r3, r2
 8000ea6:	105b      	asrs	r3, r3, #1
 8000ea8:	425b      	negs	r3, r3
 8000eaa:	b29a      	uxth	r2, r3
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	4413      	add	r3, r2
 8000eb2:	b299      	uxth	r1, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	b29a      	uxth	r2, r3
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	b29c      	uxth	r4, r3
 8000ebc:	8c3b      	ldrh	r3, [r7, #32]
 8000ebe:	9300      	str	r3, [sp, #0]
 8000ec0:	4623      	mov	r3, r4
 8000ec2:	f7ff fdb2 	bl	8000a2a <ILI9341_FillRect>
}
 8000ec6:	bf00      	nop
 8000ec8:	3714      	adds	r7, #20
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd90      	pop	{r4, r7, pc}

08000ece <DrawLineV>:
static void DrawLineV(int x, int y, int h, int t, uint16_t c) {
 8000ece:	b590      	push	{r4, r7, lr}
 8000ed0:	b087      	sub	sp, #28
 8000ed2:	af02      	add	r7, sp, #8
 8000ed4:	60f8      	str	r0, [r7, #12]
 8000ed6:	60b9      	str	r1, [r7, #8]
 8000ed8:	607a      	str	r2, [r7, #4]
 8000eda:	603b      	str	r3, [r7, #0]
	ILI9341_FillRect(x - t / 2, y, t, h, c);
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	0fda      	lsrs	r2, r3, #31
 8000ee0:	4413      	add	r3, r2
 8000ee2:	105b      	asrs	r3, r3, #1
 8000ee4:	425b      	negs	r3, r3
 8000ee6:	b29a      	uxth	r2, r3
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	b29b      	uxth	r3, r3
 8000eec:	4413      	add	r3, r2
 8000eee:	b298      	uxth	r0, r3
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	b299      	uxth	r1, r3
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	b29a      	uxth	r2, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	b29c      	uxth	r4, r3
 8000efc:	8c3b      	ldrh	r3, [r7, #32]
 8000efe:	9300      	str	r3, [sp, #0]
 8000f00:	4623      	mov	r3, r4
 8000f02:	f7ff fd92 	bl	8000a2a <ILI9341_FillRect>
}
 8000f06:	bf00      	nop
 8000f08:	3714      	adds	r7, #20
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd90      	pop	{r4, r7, pc}

08000f0e <DrawRoundRect>:

static void DrawRoundRect(int x, int y, int w, int h, int r, int t, uint16_t c) {
 8000f0e:	b5b0      	push	{r4, r5, r7, lr}
 8000f10:	b08a      	sub	sp, #40	@ 0x28
 8000f12:	af02      	add	r7, sp, #8
 8000f14:	60f8      	str	r0, [r7, #12]
 8000f16:	60b9      	str	r1, [r7, #8]
 8000f18:	607a      	str	r2, [r7, #4]
 8000f1a:	603b      	str	r3, [r7, #0]
	/* 외곽선을 두께 t로 근사 */
	for (int i = 0; i < t; i++) {
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	61fb      	str	r3, [r7, #28]
 8000f20:	e100      	b.n	8001124 <DrawRoundRect+0x216>
		int ri = r - i;
 8000f22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	1ad3      	subs	r3, r2, r3
 8000f28:	61bb      	str	r3, [r7, #24]
		if (ri < 0)
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	da01      	bge.n	8000f34 <DrawRoundRect+0x26>
			ri = 0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61bb      	str	r3, [r7, #24]
		/* 네 귀퉁이 호 */
		for (int yy = -ri; yy <= ri; yy++) {
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	425b      	negs	r3, r3
 8000f38:	617b      	str	r3, [r7, #20]
 8000f3a:	e0a9      	b.n	8001090 <DrawRoundRect+0x182>
			int dx = (int) (sqrtf((float) ri * ri - (float) yy * yy) + 0.5f);
 8000f3c:	69b8      	ldr	r0, [r7, #24]
 8000f3e:	f7ff f9bf 	bl	80002c0 <__aeabi_i2f>
 8000f42:	4604      	mov	r4, r0
 8000f44:	69b8      	ldr	r0, [r7, #24]
 8000f46:	f7ff f9bb 	bl	80002c0 <__aeabi_i2f>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4620      	mov	r0, r4
 8000f50:	f7ff fa0a 	bl	8000368 <__aeabi_fmul>
 8000f54:	4603      	mov	r3, r0
 8000f56:	461d      	mov	r5, r3
 8000f58:	6978      	ldr	r0, [r7, #20]
 8000f5a:	f7ff f9b1 	bl	80002c0 <__aeabi_i2f>
 8000f5e:	4604      	mov	r4, r0
 8000f60:	6978      	ldr	r0, [r7, #20]
 8000f62:	f7ff f9ad 	bl	80002c0 <__aeabi_i2f>
 8000f66:	4603      	mov	r3, r0
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4620      	mov	r0, r4
 8000f6c:	f7ff f9fc 	bl	8000368 <__aeabi_fmul>
 8000f70:	4603      	mov	r3, r0
 8000f72:	4619      	mov	r1, r3
 8000f74:	4628      	mov	r0, r5
 8000f76:	f7ff f8ed 	bl	8000154 <__aeabi_fsub>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f005 ffcf 	bl	8006f20 <sqrtf>
 8000f82:	4603      	mov	r3, r0
 8000f84:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff f8e5 	bl	8000158 <__addsf3>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff fbc5 	bl	8000720 <__aeabi_f2iz>
 8000f96:	4603      	mov	r3, r0
 8000f98:	613b      	str	r3, [r7, #16]
			/* 상단 좌/우 */
			ILI9341_FillRect(x + r - dx, y + i, 2 * dx, 1, c);
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	4413      	add	r3, r2
 8000fa4:	b29a      	uxth	r2, r3
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	b298      	uxth	r0, r3
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	b29a      	uxth	r2, r3
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	b29b      	uxth	r3, r3
 8000fb6:	4413      	add	r3, r2
 8000fb8:	b299      	uxth	r1, r3
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	b29a      	uxth	r2, r3
 8000fc2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	f7ff fd2f 	bl	8000a2a <ILI9341_FillRect>
			ILI9341_FillRect(x + w - r - dx, y + i, 2 * dx, 1, c);
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	4413      	add	r3, r2
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	b29a      	uxth	r2, r3
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	b298      	uxth	r0, r3
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	b29a      	uxth	r2, r3
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	4413      	add	r3, r2
 8000ff2:	b299      	uxth	r1, r3
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	2301      	movs	r3, #1
 8001002:	f7ff fd12 	bl	8000a2a <ILI9341_FillRect>
			/* 하단 좌/우 */
			ILI9341_FillRect(x + r - dx, y + h - 1 - i, 2 * dx, 1, c);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	b29a      	uxth	r2, r3
 800100a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800100c:	b29b      	uxth	r3, r3
 800100e:	4413      	add	r3, r2
 8001010:	b29a      	uxth	r2, r3
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	b29b      	uxth	r3, r3
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	b298      	uxth	r0, r3
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	b29a      	uxth	r2, r3
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	b29b      	uxth	r3, r3
 8001022:	4413      	add	r3, r2
 8001024:	b29a      	uxth	r2, r3
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	b29b      	uxth	r3, r3
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	b29b      	uxth	r3, r3
 800102e:	3b01      	subs	r3, #1
 8001030:	b299      	uxth	r1, r3
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	b29b      	uxth	r3, r3
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	b29a      	uxth	r2, r3
 800103a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	2301      	movs	r3, #1
 8001040:	f7ff fcf3 	bl	8000a2a <ILI9341_FillRect>
			ILI9341_FillRect(x + w - r - dx, y + h - 1 - i, 2 * dx, 1, c);
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	b29a      	uxth	r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	b29b      	uxth	r3, r3
 800104c:	4413      	add	r3, r2
 800104e:	b29a      	uxth	r2, r3
 8001050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001052:	b29b      	uxth	r3, r3
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	b29a      	uxth	r2, r3
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	b29b      	uxth	r3, r3
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	b298      	uxth	r0, r3
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	b29a      	uxth	r2, r3
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	b29b      	uxth	r3, r3
 8001068:	4413      	add	r3, r2
 800106a:	b29a      	uxth	r2, r3
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	b29b      	uxth	r3, r3
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	b29b      	uxth	r3, r3
 8001074:	3b01      	subs	r3, #1
 8001076:	b299      	uxth	r1, r3
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	b29b      	uxth	r3, r3
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	b29a      	uxth	r2, r3
 8001080:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001082:	9300      	str	r3, [sp, #0]
 8001084:	2301      	movs	r3, #1
 8001086:	f7ff fcd0 	bl	8000a2a <ILI9341_FillRect>
		for (int yy = -ri; yy <= ri; yy++) {
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	3301      	adds	r3, #1
 800108e:	617b      	str	r3, [r7, #20]
 8001090:	697a      	ldr	r2, [r7, #20]
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	429a      	cmp	r2, r3
 8001096:	f77f af51 	ble.w	8000f3c <DrawRoundRect+0x2e>
		}
		/* 직선 부분 */
		DrawLineH(x + r, y + i, w - 2 * r, 1, c);
 800109a:	68fa      	ldr	r2, [r7, #12]
 800109c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800109e:	18d0      	adds	r0, r2, r3
 80010a0:	68ba      	ldr	r2, [r7, #8]
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	18d1      	adds	r1, r2, r3
 80010a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	1ad2      	subs	r2, r2, r3
 80010ae:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80010b0:	9300      	str	r3, [sp, #0]
 80010b2:	2301      	movs	r3, #1
 80010b4:	f7ff feeb 	bl	8000e8e <DrawLineH>
		DrawLineH(x + r, y + h - 1 - i, w - 2 * r, 1, c);
 80010b8:	68fa      	ldr	r2, [r7, #12]
 80010ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010bc:	18d0      	adds	r0, r2, r3
 80010be:	68ba      	ldr	r2, [r7, #8]
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	4413      	add	r3, r2
 80010c4:	1e5a      	subs	r2, r3, #1
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	1ad1      	subs	r1, r2, r3
 80010ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	1ad2      	subs	r2, r2, r3
 80010d2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	2301      	movs	r3, #1
 80010d8:	f7ff fed9 	bl	8000e8e <DrawLineH>
		DrawLineV(x + i, y + r, h - 2 * r, 1, c);
 80010dc:	68fa      	ldr	r2, [r7, #12]
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	18d0      	adds	r0, r2, r3
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010e6:	18d1      	adds	r1, r2, r3
 80010e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	683a      	ldr	r2, [r7, #0]
 80010ee:	1ad2      	subs	r2, r2, r3
 80010f0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	2301      	movs	r3, #1
 80010f6:	f7ff feea 	bl	8000ece <DrawLineV>
		DrawLineV(x + w - 1 - i, y + r, h - 2 * r, 1, c);
 80010fa:	68fa      	ldr	r2, [r7, #12]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4413      	add	r3, r2
 8001100:	1e5a      	subs	r2, r3, #1
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	1ad0      	subs	r0, r2, r3
 8001106:	68ba      	ldr	r2, [r7, #8]
 8001108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800110a:	18d1      	adds	r1, r2, r3
 800110c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	683a      	ldr	r2, [r7, #0]
 8001112:	1ad2      	subs	r2, r2, r3
 8001114:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001116:	9300      	str	r3, [sp, #0]
 8001118:	2301      	movs	r3, #1
 800111a:	f7ff fed8 	bl	8000ece <DrawLineV>
	for (int i = 0; i < t; i++) {
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	3301      	adds	r3, #1
 8001122:	61fb      	str	r3, [r7, #28]
 8001124:	69fa      	ldr	r2, [r7, #28]
 8001126:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001128:	429a      	cmp	r2, r3
 800112a:	f6ff aefa 	blt.w	8000f22 <DrawRoundRect+0x14>
	}
}
 800112e:	bf00      	nop
 8001130:	bf00      	nop
 8001132:	3720      	adds	r7, #32
 8001134:	46bd      	mov	sp, r7
 8001136:	bdb0      	pop	{r4, r5, r7, pc}

08001138 <DrawPacman>:

static void DrawPacman(int xc, int yc, int r, float mouth_deg, uint16_t color,
		uint16_t bg) {
 8001138:	b5b0      	push	{r4, r5, r7, lr}
 800113a:	b098      	sub	sp, #96	@ 0x60
 800113c:	af02      	add	r7, sp, #8
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
 8001144:	603b      	str	r3, [r7, #0]
	DrawFilledCircle(xc, yc, r, color);
 8001146:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	68b9      	ldr	r1, [r7, #8]
 800114e:	68f8      	ldr	r0, [r7, #12]
 8001150:	f7ff fe40 	bl	8000dd4 <DrawFilledCircle>
	float a = mouth_deg * 3.1415926f / 180.f;
 8001154:	4989      	ldr	r1, [pc, #548]	@ (800137c <DrawPacman+0x244>)
 8001156:	6838      	ldr	r0, [r7, #0]
 8001158:	f7ff f906 	bl	8000368 <__aeabi_fmul>
 800115c:	4603      	mov	r3, r0
 800115e:	4988      	ldr	r1, [pc, #544]	@ (8001380 <DrawPacman+0x248>)
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff f9b5 	bl	80004d0 <__aeabi_fdiv>
 8001166:	4603      	mov	r3, r0
 8001168:	647b      	str	r3, [r7, #68]	@ 0x44
	int x1 = xc, y1 = yc;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	643b      	str	r3, [r7, #64]	@ 0x40
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	63fb      	str	r3, [r7, #60]	@ 0x3c
	int x2 = xc + (int) (r * cosf(a / 2)), y2 = yc - (int) (r * sinf(a / 2));
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff f8a4 	bl	80002c0 <__aeabi_i2f>
 8001178:	4604      	mov	r4, r0
 800117a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800117e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001180:	f7ff f9a6 	bl	80004d0 <__aeabi_fdiv>
 8001184:	4603      	mov	r3, r0
 8001186:	4618      	mov	r0, r3
 8001188:	f005 fee4 	bl	8006f54 <cosf>
 800118c:	4603      	mov	r3, r0
 800118e:	4619      	mov	r1, r3
 8001190:	4620      	mov	r0, r4
 8001192:	f7ff f8e9 	bl	8000368 <__aeabi_fmul>
 8001196:	4603      	mov	r3, r0
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff fac1 	bl	8000720 <__aeabi_f2iz>
 800119e:	4602      	mov	r2, r0
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	4413      	add	r3, r2
 80011a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f7ff f88a 	bl	80002c0 <__aeabi_i2f>
 80011ac:	4604      	mov	r4, r0
 80011ae:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80011b2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80011b4:	f7ff f98c 	bl	80004d0 <__aeabi_fdiv>
 80011b8:	4603      	mov	r3, r0
 80011ba:	4618      	mov	r0, r3
 80011bc:	f005 ff02 	bl	8006fc4 <sinf>
 80011c0:	4603      	mov	r3, r0
 80011c2:	4619      	mov	r1, r3
 80011c4:	4620      	mov	r0, r4
 80011c6:	f7ff f8cf 	bl	8000368 <__aeabi_fmul>
 80011ca:	4603      	mov	r3, r0
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff faa7 	bl	8000720 <__aeabi_f2iz>
 80011d2:	4602      	mov	r2, r0
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	1a9b      	subs	r3, r3, r2
 80011d8:	637b      	str	r3, [r7, #52]	@ 0x34
	int x3 = xc + (int) (r * cosf(-a / 2)), y3 = yc - (int) (r * sinf(-a / 2));
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f7ff f870 	bl	80002c0 <__aeabi_i2f>
 80011e0:	4604      	mov	r4, r0
 80011e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011e4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80011e8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff f96f 	bl	80004d0 <__aeabi_fdiv>
 80011f2:	4603      	mov	r3, r0
 80011f4:	4618      	mov	r0, r3
 80011f6:	f005 fead 	bl	8006f54 <cosf>
 80011fa:	4603      	mov	r3, r0
 80011fc:	4619      	mov	r1, r3
 80011fe:	4620      	mov	r0, r4
 8001200:	f7ff f8b2 	bl	8000368 <__aeabi_fmul>
 8001204:	4603      	mov	r3, r0
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff fa8a 	bl	8000720 <__aeabi_f2iz>
 800120c:	4602      	mov	r2, r0
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	4413      	add	r3, r2
 8001212:	633b      	str	r3, [r7, #48]	@ 0x30
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f7ff f853 	bl	80002c0 <__aeabi_i2f>
 800121a:	4604      	mov	r4, r0
 800121c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800121e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001222:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff f952 	bl	80004d0 <__aeabi_fdiv>
 800122c:	4603      	mov	r3, r0
 800122e:	4618      	mov	r0, r3
 8001230:	f005 fec8 	bl	8006fc4 <sinf>
 8001234:	4603      	mov	r3, r0
 8001236:	4619      	mov	r1, r3
 8001238:	4620      	mov	r0, r4
 800123a:	f7ff f895 	bl	8000368 <__aeabi_fmul>
 800123e:	4603      	mov	r3, r0
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff fa6d 	bl	8000720 <__aeabi_f2iz>
 8001246:	4602      	mov	r2, r0
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	1a9b      	subs	r3, r3, r2
 800124c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int miny = y1;
 800124e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001250:	657b      	str	r3, [r7, #84]	@ 0x54
	if (y2 < miny)
 8001252:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001254:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001256:	429a      	cmp	r2, r3
 8001258:	da01      	bge.n	800125e <DrawPacman+0x126>
		miny = y2;
 800125a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800125c:	657b      	str	r3, [r7, #84]	@ 0x54
	if (y3 < miny)
 800125e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001260:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001262:	429a      	cmp	r2, r3
 8001264:	da01      	bge.n	800126a <DrawPacman+0x132>
		miny = y3;
 8001266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001268:	657b      	str	r3, [r7, #84]	@ 0x54
	int maxy = y1;
 800126a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800126c:	653b      	str	r3, [r7, #80]	@ 0x50
	if (y2 > maxy)
 800126e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001270:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001272:	429a      	cmp	r2, r3
 8001274:	dd01      	ble.n	800127a <DrawPacman+0x142>
		maxy = y2;
 8001276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001278:	653b      	str	r3, [r7, #80]	@ 0x50
	if (y3 > maxy)
 800127a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800127c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800127e:	429a      	cmp	r2, r3
 8001280:	dd01      	ble.n	8001286 <DrawPacman+0x14e>
		maxy = y3;
 8001282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001284:	653b      	str	r3, [r7, #80]	@ 0x50
	for (int y = miny; y <= maxy; y++) {
 8001286:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001288:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800128a:	e102      	b.n	8001492 <DrawPacman+0x35a>
		int xs[3], n = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	64bb      	str	r3, [r7, #72]	@ 0x48
#define EDGE(xa,ya,xb,yb) if(!((ya<y&&yb<y)||(ya>y&&yb>y)||(ya==yb))){ float t=(ya==yb)?0.f:((float)(y-ya)/(float)(yb-ya)); xs[n++]=xa+(int)((xb-xa)*t); }
		EDGE(x1, y1, x2, y2);
 8001290:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001292:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001294:	429a      	cmp	r2, r3
 8001296:	da03      	bge.n	80012a0 <DrawPacman+0x168>
 8001298:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800129a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800129c:	429a      	cmp	r2, r3
 800129e:	db40      	blt.n	8001322 <DrawPacman+0x1ea>
 80012a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80012a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80012a4:	429a      	cmp	r2, r3
 80012a6:	dd03      	ble.n	80012b0 <DrawPacman+0x178>
 80012a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80012aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80012ac:	429a      	cmp	r2, r3
 80012ae:	dc38      	bgt.n	8001322 <DrawPacman+0x1ea>
 80012b0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80012b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d034      	beq.n	8001322 <DrawPacman+0x1ea>
 80012b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80012ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012bc:	429a      	cmp	r2, r3
 80012be:	d013      	beq.n	80012e8 <DrawPacman+0x1b0>
 80012c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80012c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7fe fffa 	bl	80002c0 <__aeabi_i2f>
 80012cc:	4604      	mov	r4, r0
 80012ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80012d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7fe fff3 	bl	80002c0 <__aeabi_i2f>
 80012da:	4603      	mov	r3, r0
 80012dc:	4619      	mov	r1, r3
 80012de:	4620      	mov	r0, r4
 80012e0:	f7ff f8f6 	bl	80004d0 <__aeabi_fdiv>
 80012e4:	4603      	mov	r3, r0
 80012e6:	e001      	b.n	80012ec <DrawPacman+0x1b4>
 80012e8:	f04f 0300 	mov.w	r3, #0
 80012ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80012ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80012f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7fe ffe3 	bl	80002c0 <__aeabi_i2f>
 80012fa:	4603      	mov	r3, r0
 80012fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff f832 	bl	8000368 <__aeabi_fmul>
 8001304:	4603      	mov	r3, r0
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff fa0a 	bl	8000720 <__aeabi_f2iz>
 800130c:	4601      	mov	r1, r0
 800130e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001310:	1c5a      	adds	r2, r3, #1
 8001312:	64ba      	str	r2, [r7, #72]	@ 0x48
 8001314:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001316:	440a      	add	r2, r1
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	3358      	adds	r3, #88	@ 0x58
 800131c:	443b      	add	r3, r7
 800131e:	f843 2c48 	str.w	r2, [r3, #-72]
		EDGE(x2, y2, x3, y3);
 8001322:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001324:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001326:	429a      	cmp	r2, r3
 8001328:	da03      	bge.n	8001332 <DrawPacman+0x1fa>
 800132a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800132c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800132e:	429a      	cmp	r2, r3
 8001330:	db45      	blt.n	80013be <DrawPacman+0x286>
 8001332:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001334:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001336:	429a      	cmp	r2, r3
 8001338:	dd03      	ble.n	8001342 <DrawPacman+0x20a>
 800133a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800133c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800133e:	429a      	cmp	r2, r3
 8001340:	dc3d      	bgt.n	80013be <DrawPacman+0x286>
 8001342:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001346:	429a      	cmp	r2, r3
 8001348:	d039      	beq.n	80013be <DrawPacman+0x286>
 800134a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800134c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800134e:	429a      	cmp	r2, r3
 8001350:	d018      	beq.n	8001384 <DrawPacman+0x24c>
 8001352:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001354:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	4618      	mov	r0, r3
 800135a:	f7fe ffb1 	bl	80002c0 <__aeabi_i2f>
 800135e:	4604      	mov	r4, r0
 8001360:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	4618      	mov	r0, r3
 8001368:	f7fe ffaa 	bl	80002c0 <__aeabi_i2f>
 800136c:	4603      	mov	r3, r0
 800136e:	4619      	mov	r1, r3
 8001370:	4620      	mov	r0, r4
 8001372:	f7ff f8ad 	bl	80004d0 <__aeabi_fdiv>
 8001376:	4603      	mov	r3, r0
 8001378:	e006      	b.n	8001388 <DrawPacman+0x250>
 800137a:	bf00      	nop
 800137c:	40490fda 	.word	0x40490fda
 8001380:	43340000 	.word	0x43340000
 8001384:	f04f 0300 	mov.w	r3, #0
 8001388:	627b      	str	r3, [r7, #36]	@ 0x24
 800138a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800138c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	4618      	mov	r0, r3
 8001392:	f7fe ff95 	bl	80002c0 <__aeabi_i2f>
 8001396:	4603      	mov	r3, r0
 8001398:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800139a:	4618      	mov	r0, r3
 800139c:	f7fe ffe4 	bl	8000368 <__aeabi_fmul>
 80013a0:	4603      	mov	r3, r0
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff f9bc 	bl	8000720 <__aeabi_f2iz>
 80013a8:	4601      	mov	r1, r0
 80013aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80013ac:	1c5a      	adds	r2, r3, #1
 80013ae:	64ba      	str	r2, [r7, #72]	@ 0x48
 80013b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80013b2:	440a      	add	r2, r1
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	3358      	adds	r3, #88	@ 0x58
 80013b8:	443b      	add	r3, r7
 80013ba:	f843 2c48 	str.w	r2, [r3, #-72]
		EDGE(x3, y3, x1, y1);
 80013be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80013c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80013c2:	429a      	cmp	r2, r3
 80013c4:	da03      	bge.n	80013ce <DrawPacman+0x296>
 80013c6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80013c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80013ca:	429a      	cmp	r2, r3
 80013cc:	db40      	blt.n	8001450 <DrawPacman+0x318>
 80013ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80013d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80013d2:	429a      	cmp	r2, r3
 80013d4:	dd03      	ble.n	80013de <DrawPacman+0x2a6>
 80013d6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80013d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80013da:	429a      	cmp	r2, r3
 80013dc:	dc38      	bgt.n	8001450 <DrawPacman+0x318>
 80013de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80013e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d034      	beq.n	8001450 <DrawPacman+0x318>
 80013e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80013e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d013      	beq.n	8001416 <DrawPacman+0x2de>
 80013ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80013f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7fe ff63 	bl	80002c0 <__aeabi_i2f>
 80013fa:	4604      	mov	r4, r0
 80013fc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80013fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	4618      	mov	r0, r3
 8001404:	f7fe ff5c 	bl	80002c0 <__aeabi_i2f>
 8001408:	4603      	mov	r3, r0
 800140a:	4619      	mov	r1, r3
 800140c:	4620      	mov	r0, r4
 800140e:	f7ff f85f 	bl	80004d0 <__aeabi_fdiv>
 8001412:	4603      	mov	r3, r0
 8001414:	e001      	b.n	800141a <DrawPacman+0x2e2>
 8001416:	f04f 0300 	mov.w	r3, #0
 800141a:	623b      	str	r3, [r7, #32]
 800141c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800141e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	4618      	mov	r0, r3
 8001424:	f7fe ff4c 	bl	80002c0 <__aeabi_i2f>
 8001428:	4603      	mov	r3, r0
 800142a:	6a39      	ldr	r1, [r7, #32]
 800142c:	4618      	mov	r0, r3
 800142e:	f7fe ff9b 	bl	8000368 <__aeabi_fmul>
 8001432:	4603      	mov	r3, r0
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff f973 	bl	8000720 <__aeabi_f2iz>
 800143a:	4601      	mov	r1, r0
 800143c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800143e:	1c5a      	adds	r2, r3, #1
 8001440:	64ba      	str	r2, [r7, #72]	@ 0x48
 8001442:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001444:	440a      	add	r2, r1
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	3358      	adds	r3, #88	@ 0x58
 800144a:	443b      	add	r3, r7
 800144c:	f843 2c48 	str.w	r2, [r3, #-72]
#undef EDGE
		if (n >= 2) {
 8001450:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001452:	2b01      	cmp	r3, #1
 8001454:	dd1a      	ble.n	800148c <DrawPacman+0x354>
			if (xs[0] > xs[1]) {
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	429a      	cmp	r2, r3
 800145c:	dd05      	ble.n	800146a <DrawPacman+0x332>
				int t = xs[0];
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	61fb      	str	r3, [r7, #28]
				xs[0] = xs[1];
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	613b      	str	r3, [r7, #16]
				xs[1] = t;
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	617b      	str	r3, [r7, #20]
			}
			ILI9341_FillRect(xs[0], y, xs[1] - xs[0] + 1, 1, COLOR_BLACK);
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	b298      	uxth	r0, r3
 800146e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001470:	b299      	uxth	r1, r3
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	b29a      	uxth	r2, r3
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	b29b      	uxth	r3, r3
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	b29b      	uxth	r3, r3
 800147e:	3301      	adds	r3, #1
 8001480:	b29a      	uxth	r2, r3
 8001482:	2300      	movs	r3, #0
 8001484:	9300      	str	r3, [sp, #0]
 8001486:	2301      	movs	r3, #1
 8001488:	f7ff facf 	bl	8000a2a <ILI9341_FillRect>
	for (int y = miny; y <= maxy; y++) {
 800148c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800148e:	3301      	adds	r3, #1
 8001490:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001492:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001494:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001496:	429a      	cmp	r2, r3
 8001498:	f77f aef8 	ble.w	800128c <DrawPacman+0x154>
		}
	}
	/* 눈 */
	ILI9341_FillRect(xc + r / 5, yc - r / 2, r / 6, r / 6, COLOR_BLACK);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4a16      	ldr	r2, [pc, #88]	@ (80014f8 <DrawPacman+0x3c0>)
 80014a0:	fb82 1203 	smull	r1, r2, r2, r3
 80014a4:	1052      	asrs	r2, r2, #1
 80014a6:	17db      	asrs	r3, r3, #31
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	b29a      	uxth	r2, r3
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	4413      	add	r3, r2
 80014b2:	b298      	uxth	r0, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	0fda      	lsrs	r2, r3, #31
 80014b8:	4413      	add	r3, r2
 80014ba:	105b      	asrs	r3, r3, #1
 80014bc:	425b      	negs	r3, r3
 80014be:	b29a      	uxth	r2, r3
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	4413      	add	r3, r2
 80014c6:	b299      	uxth	r1, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	4a0c      	ldr	r2, [pc, #48]	@ (80014fc <DrawPacman+0x3c4>)
 80014cc:	fb82 4203 	smull	r4, r2, r2, r3
 80014d0:	17db      	asrs	r3, r3, #31
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	b29c      	uxth	r4, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a08      	ldr	r2, [pc, #32]	@ (80014fc <DrawPacman+0x3c4>)
 80014da:	fb82 5203 	smull	r5, r2, r2, r3
 80014de:	17db      	asrs	r3, r3, #31
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	2200      	movs	r2, #0
 80014e6:	9200      	str	r2, [sp, #0]
 80014e8:	4622      	mov	r2, r4
 80014ea:	f7ff fa9e 	bl	8000a2a <ILI9341_FillRect>
}
 80014ee:	bf00      	nop
 80014f0:	3758      	adds	r7, #88	@ 0x58
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bdb0      	pop	{r4, r5, r7, pc}
 80014f6:	bf00      	nop
 80014f8:	66666667 	.word	0x66666667
 80014fc:	2aaaaaab 	.word	0x2aaaaaab

08001500 <DrawPacman_FlipX>:

static void DrawPacman_FlipX(int xc, int yc, int r, float mouth_deg,
		uint16_t color, uint16_t bg) {
 8001500:	b5b0      	push	{r4, r5, r7, lr}
 8001502:	b098      	sub	sp, #96	@ 0x60
 8001504:	af02      	add	r7, sp, #8
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
 800150c:	603b      	str	r3, [r7, #0]
	/* 몸통 채우기 */
	DrawFilledCircle(xc, yc, r, color);
 800150e:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	68b9      	ldr	r1, [r7, #8]
 8001516:	68f8      	ldr	r0, [r7, #12]
 8001518:	f7ff fc5c 	bl	8000dd4 <DrawFilledCircle>

	/* 입(왼쪽 방향으로 벌어지게): 중심각을 π(180°) 기준으로 ±a/2 */
	float a = mouth_deg * 3.1415926f / 180.f;
 800151c:	4986      	ldr	r1, [pc, #536]	@ (8001738 <DrawPacman_FlipX+0x238>)
 800151e:	6838      	ldr	r0, [r7, #0]
 8001520:	f7fe ff22 	bl	8000368 <__aeabi_fmul>
 8001524:	4603      	mov	r3, r0
 8001526:	4985      	ldr	r1, [pc, #532]	@ (800173c <DrawPacman_FlipX+0x23c>)
 8001528:	4618      	mov	r0, r3
 800152a:	f7fe ffd1 	bl	80004d0 <__aeabi_fdiv>
 800152e:	4603      	mov	r3, r0
 8001530:	647b      	str	r3, [r7, #68]	@ 0x44
	int x1 = xc, y1 = yc;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	643b      	str	r3, [r7, #64]	@ 0x40
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	63fb      	str	r3, [r7, #60]	@ 0x3c
	int x2 = xc - (int) (r * cosf(a / 2)), y2 = yc - (int) (r * sinf(a / 2));
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f7fe fec0 	bl	80002c0 <__aeabi_i2f>
 8001540:	4604      	mov	r4, r0
 8001542:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001546:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001548:	f7fe ffc2 	bl	80004d0 <__aeabi_fdiv>
 800154c:	4603      	mov	r3, r0
 800154e:	4618      	mov	r0, r3
 8001550:	f005 fd00 	bl	8006f54 <cosf>
 8001554:	4603      	mov	r3, r0
 8001556:	4619      	mov	r1, r3
 8001558:	4620      	mov	r0, r4
 800155a:	f7fe ff05 	bl	8000368 <__aeabi_fmul>
 800155e:	4603      	mov	r3, r0
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff f8dd 	bl	8000720 <__aeabi_f2iz>
 8001566:	4602      	mov	r2, r0
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	1a9b      	subs	r3, r3, r2
 800156c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f7fe fea6 	bl	80002c0 <__aeabi_i2f>
 8001574:	4604      	mov	r4, r0
 8001576:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800157a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800157c:	f7fe ffa8 	bl	80004d0 <__aeabi_fdiv>
 8001580:	4603      	mov	r3, r0
 8001582:	4618      	mov	r0, r3
 8001584:	f005 fd1e 	bl	8006fc4 <sinf>
 8001588:	4603      	mov	r3, r0
 800158a:	4619      	mov	r1, r3
 800158c:	4620      	mov	r0, r4
 800158e:	f7fe feeb 	bl	8000368 <__aeabi_fmul>
 8001592:	4603      	mov	r3, r0
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff f8c3 	bl	8000720 <__aeabi_f2iz>
 800159a:	4602      	mov	r2, r0
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	1a9b      	subs	r3, r3, r2
 80015a0:	637b      	str	r3, [r7, #52]	@ 0x34
	int x3 = xc - (int) (r * cosf(a / 2)), y3 = yc + (int) (r * sinf(a / 2));
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7fe fe8c 	bl	80002c0 <__aeabi_i2f>
 80015a8:	4604      	mov	r4, r0
 80015aa:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80015ae:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80015b0:	f7fe ff8e 	bl	80004d0 <__aeabi_fdiv>
 80015b4:	4603      	mov	r3, r0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f005 fccc 	bl	8006f54 <cosf>
 80015bc:	4603      	mov	r3, r0
 80015be:	4619      	mov	r1, r3
 80015c0:	4620      	mov	r0, r4
 80015c2:	f7fe fed1 	bl	8000368 <__aeabi_fmul>
 80015c6:	4603      	mov	r3, r0
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff f8a9 	bl	8000720 <__aeabi_f2iz>
 80015ce:	4602      	mov	r2, r0
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	1a9b      	subs	r3, r3, r2
 80015d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7fe fe72 	bl	80002c0 <__aeabi_i2f>
 80015dc:	4604      	mov	r4, r0
 80015de:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80015e2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80015e4:	f7fe ff74 	bl	80004d0 <__aeabi_fdiv>
 80015e8:	4603      	mov	r3, r0
 80015ea:	4618      	mov	r0, r3
 80015ec:	f005 fcea 	bl	8006fc4 <sinf>
 80015f0:	4603      	mov	r3, r0
 80015f2:	4619      	mov	r1, r3
 80015f4:	4620      	mov	r0, r4
 80015f6:	f7fe feb7 	bl	8000368 <__aeabi_fmul>
 80015fa:	4603      	mov	r3, r0
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff f88f 	bl	8000720 <__aeabi_f2iz>
 8001602:	4602      	mov	r2, r0
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	4413      	add	r3, r2
 8001608:	62fb      	str	r3, [r7, #44]	@ 0x2c

	int miny = y1;
 800160a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800160c:	657b      	str	r3, [r7, #84]	@ 0x54
	if (y2 < miny)
 800160e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001610:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001612:	429a      	cmp	r2, r3
 8001614:	da01      	bge.n	800161a <DrawPacman_FlipX+0x11a>
		miny = y2;
 8001616:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001618:	657b      	str	r3, [r7, #84]	@ 0x54
	if (y3 < miny)
 800161a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800161c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800161e:	429a      	cmp	r2, r3
 8001620:	da01      	bge.n	8001626 <DrawPacman_FlipX+0x126>
		miny = y3;
 8001622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001624:	657b      	str	r3, [r7, #84]	@ 0x54
	int maxy = y1;
 8001626:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001628:	653b      	str	r3, [r7, #80]	@ 0x50
	if (y2 > maxy)
 800162a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800162c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800162e:	429a      	cmp	r2, r3
 8001630:	dd01      	ble.n	8001636 <DrawPacman_FlipX+0x136>
		maxy = y2;
 8001632:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001634:	653b      	str	r3, [r7, #80]	@ 0x50
	if (y3 > maxy)
 8001636:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001638:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800163a:	429a      	cmp	r2, r3
 800163c:	dd01      	ble.n	8001642 <DrawPacman_FlipX+0x142>
		maxy = y3;
 800163e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001640:	653b      	str	r3, [r7, #80]	@ 0x50

	for (int y = miny; y <= maxy; y++) {
 8001642:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001644:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001646:	e102      	b.n	800184e <DrawPacman_FlipX+0x34e>
		int xs[3], n = 0;
 8001648:	2300      	movs	r3, #0
 800164a:	64bb      	str	r3, [r7, #72]	@ 0x48
#define EDGE(xa,ya,xb,yb) \
            if (!((ya<y && yb<y) || (ya>y && yb>y) || (ya==yb))) { \
                float t = (ya==yb) ? 0.f : ((float)(y - ya) / (float)(yb - ya)); \
                xs[n++] = xa + (int)((xb - xa) * t); \
            }
		EDGE(x1, y1, x2, y2);
 800164c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800164e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001650:	429a      	cmp	r2, r3
 8001652:	da03      	bge.n	800165c <DrawPacman_FlipX+0x15c>
 8001654:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001656:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001658:	429a      	cmp	r2, r3
 800165a:	db40      	blt.n	80016de <DrawPacman_FlipX+0x1de>
 800165c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800165e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001660:	429a      	cmp	r2, r3
 8001662:	dd03      	ble.n	800166c <DrawPacman_FlipX+0x16c>
 8001664:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001666:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001668:	429a      	cmp	r2, r3
 800166a:	dc38      	bgt.n	80016de <DrawPacman_FlipX+0x1de>
 800166c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800166e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001670:	429a      	cmp	r2, r3
 8001672:	d034      	beq.n	80016de <DrawPacman_FlipX+0x1de>
 8001674:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001678:	429a      	cmp	r2, r3
 800167a:	d013      	beq.n	80016a4 <DrawPacman_FlipX+0x1a4>
 800167c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800167e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	4618      	mov	r0, r3
 8001684:	f7fe fe1c 	bl	80002c0 <__aeabi_i2f>
 8001688:	4604      	mov	r4, r0
 800168a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800168c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	4618      	mov	r0, r3
 8001692:	f7fe fe15 	bl	80002c0 <__aeabi_i2f>
 8001696:	4603      	mov	r3, r0
 8001698:	4619      	mov	r1, r3
 800169a:	4620      	mov	r0, r4
 800169c:	f7fe ff18 	bl	80004d0 <__aeabi_fdiv>
 80016a0:	4603      	mov	r3, r0
 80016a2:	e001      	b.n	80016a8 <DrawPacman_FlipX+0x1a8>
 80016a4:	f04f 0300 	mov.w	r3, #0
 80016a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80016ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7fe fe05 	bl	80002c0 <__aeabi_i2f>
 80016b6:	4603      	mov	r3, r0
 80016b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7fe fe54 	bl	8000368 <__aeabi_fmul>
 80016c0:	4603      	mov	r3, r0
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff f82c 	bl	8000720 <__aeabi_f2iz>
 80016c8:	4601      	mov	r1, r0
 80016ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80016cc:	1c5a      	adds	r2, r3, #1
 80016ce:	64ba      	str	r2, [r7, #72]	@ 0x48
 80016d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80016d2:	440a      	add	r2, r1
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	3358      	adds	r3, #88	@ 0x58
 80016d8:	443b      	add	r3, r7
 80016da:	f843 2c48 	str.w	r2, [r3, #-72]
		EDGE(x2, y2, x3, y3);
 80016de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80016e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80016e2:	429a      	cmp	r2, r3
 80016e4:	da03      	bge.n	80016ee <DrawPacman_FlipX+0x1ee>
 80016e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80016ea:	429a      	cmp	r2, r3
 80016ec:	db45      	blt.n	800177a <DrawPacman_FlipX+0x27a>
 80016ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80016f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80016f2:	429a      	cmp	r2, r3
 80016f4:	dd03      	ble.n	80016fe <DrawPacman_FlipX+0x1fe>
 80016f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80016fa:	429a      	cmp	r2, r3
 80016fc:	dc3d      	bgt.n	800177a <DrawPacman_FlipX+0x27a>
 80016fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001702:	429a      	cmp	r2, r3
 8001704:	d039      	beq.n	800177a <DrawPacman_FlipX+0x27a>
 8001706:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800170a:	429a      	cmp	r2, r3
 800170c:	d018      	beq.n	8001740 <DrawPacman_FlipX+0x240>
 800170e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	4618      	mov	r0, r3
 8001716:	f7fe fdd3 	bl	80002c0 <__aeabi_i2f>
 800171a:	4604      	mov	r4, r0
 800171c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800171e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	4618      	mov	r0, r3
 8001724:	f7fe fdcc 	bl	80002c0 <__aeabi_i2f>
 8001728:	4603      	mov	r3, r0
 800172a:	4619      	mov	r1, r3
 800172c:	4620      	mov	r0, r4
 800172e:	f7fe fecf 	bl	80004d0 <__aeabi_fdiv>
 8001732:	4603      	mov	r3, r0
 8001734:	e006      	b.n	8001744 <DrawPacman_FlipX+0x244>
 8001736:	bf00      	nop
 8001738:	40490fda 	.word	0x40490fda
 800173c:	43340000 	.word	0x43340000
 8001740:	f04f 0300 	mov.w	r3, #0
 8001744:	627b      	str	r3, [r7, #36]	@ 0x24
 8001746:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	4618      	mov	r0, r3
 800174e:	f7fe fdb7 	bl	80002c0 <__aeabi_i2f>
 8001752:	4603      	mov	r3, r0
 8001754:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001756:	4618      	mov	r0, r3
 8001758:	f7fe fe06 	bl	8000368 <__aeabi_fmul>
 800175c:	4603      	mov	r3, r0
 800175e:	4618      	mov	r0, r3
 8001760:	f7fe ffde 	bl	8000720 <__aeabi_f2iz>
 8001764:	4601      	mov	r1, r0
 8001766:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001768:	1c5a      	adds	r2, r3, #1
 800176a:	64ba      	str	r2, [r7, #72]	@ 0x48
 800176c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800176e:	440a      	add	r2, r1
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	3358      	adds	r3, #88	@ 0x58
 8001774:	443b      	add	r3, r7
 8001776:	f843 2c48 	str.w	r2, [r3, #-72]
		EDGE(x3, y3, x1, y1);
 800177a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800177c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800177e:	429a      	cmp	r2, r3
 8001780:	da03      	bge.n	800178a <DrawPacman_FlipX+0x28a>
 8001782:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001784:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001786:	429a      	cmp	r2, r3
 8001788:	db40      	blt.n	800180c <DrawPacman_FlipX+0x30c>
 800178a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800178c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800178e:	429a      	cmp	r2, r3
 8001790:	dd03      	ble.n	800179a <DrawPacman_FlipX+0x29a>
 8001792:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001794:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001796:	429a      	cmp	r2, r3
 8001798:	dc38      	bgt.n	800180c <DrawPacman_FlipX+0x30c>
 800179a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800179c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800179e:	429a      	cmp	r2, r3
 80017a0:	d034      	beq.n	800180c <DrawPacman_FlipX+0x30c>
 80017a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d013      	beq.n	80017d2 <DrawPacman_FlipX+0x2d2>
 80017aa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80017ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7fe fd85 	bl	80002c0 <__aeabi_i2f>
 80017b6:	4604      	mov	r4, r0
 80017b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80017ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	4618      	mov	r0, r3
 80017c0:	f7fe fd7e 	bl	80002c0 <__aeabi_i2f>
 80017c4:	4603      	mov	r3, r0
 80017c6:	4619      	mov	r1, r3
 80017c8:	4620      	mov	r0, r4
 80017ca:	f7fe fe81 	bl	80004d0 <__aeabi_fdiv>
 80017ce:	4603      	mov	r3, r0
 80017d0:	e001      	b.n	80017d6 <DrawPacman_FlipX+0x2d6>
 80017d2:	f04f 0300 	mov.w	r3, #0
 80017d6:	623b      	str	r3, [r7, #32]
 80017d8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80017da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	4618      	mov	r0, r3
 80017e0:	f7fe fd6e 	bl	80002c0 <__aeabi_i2f>
 80017e4:	4603      	mov	r3, r0
 80017e6:	6a39      	ldr	r1, [r7, #32]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7fe fdbd 	bl	8000368 <__aeabi_fmul>
 80017ee:	4603      	mov	r3, r0
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7fe ff95 	bl	8000720 <__aeabi_f2iz>
 80017f6:	4601      	mov	r1, r0
 80017f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80017fa:	1c5a      	adds	r2, r3, #1
 80017fc:	64ba      	str	r2, [r7, #72]	@ 0x48
 80017fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001800:	440a      	add	r2, r1
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	3358      	adds	r3, #88	@ 0x58
 8001806:	443b      	add	r3, r7
 8001808:	f843 2c48 	str.w	r2, [r3, #-72]
#undef EDGE

		if (n >= 2) {
 800180c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800180e:	2b01      	cmp	r3, #1
 8001810:	dd1a      	ble.n	8001848 <DrawPacman_FlipX+0x348>
			if (xs[0] > xs[1]) {
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	429a      	cmp	r2, r3
 8001818:	dd05      	ble.n	8001826 <DrawPacman_FlipX+0x326>
				int t = xs[0];
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	61fb      	str	r3, [r7, #28]
				xs[0] = xs[1];
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	613b      	str	r3, [r7, #16]
				xs[1] = t;
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	617b      	str	r3, [r7, #20]
			}
			ILI9341_FillRect(xs[0], y, xs[1] - xs[0] + 1, 1, COLOR_BLACK);
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	b298      	uxth	r0, r3
 800182a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800182c:	b299      	uxth	r1, r3
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	b29a      	uxth	r2, r3
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	b29b      	uxth	r3, r3
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	b29b      	uxth	r3, r3
 800183a:	3301      	adds	r3, #1
 800183c:	b29a      	uxth	r2, r3
 800183e:	2300      	movs	r3, #0
 8001840:	9300      	str	r3, [sp, #0]
 8001842:	2301      	movs	r3, #1
 8001844:	f7ff f8f1 	bl	8000a2a <ILI9341_FillRect>
	for (int y = miny; y <= maxy; y++) {
 8001848:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800184a:	3301      	adds	r3, #1
 800184c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800184e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001850:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001852:	429a      	cmp	r2, r3
 8001854:	f77f aef8 	ble.w	8001648 <DrawPacman_FlipX+0x148>
		}
	}

	/* 눈: 왼쪽에 위치하도록 이동 */
	ILI9341_FillRect(xc - r / 5 - r / 6, yc - r / 2, r / 6, r / 6, COLOR_BLACK);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4a1a      	ldr	r2, [pc, #104]	@ (80018c4 <DrawPacman_FlipX+0x3c4>)
 800185c:	fb82 1203 	smull	r1, r2, r2, r3
 8001860:	1052      	asrs	r2, r2, #1
 8001862:	17db      	asrs	r3, r3, #31
 8001864:	1a9b      	subs	r3, r3, r2
 8001866:	b29a      	uxth	r2, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	b29b      	uxth	r3, r3
 800186c:	4413      	add	r3, r2
 800186e:	b29a      	uxth	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4915      	ldr	r1, [pc, #84]	@ (80018c8 <DrawPacman_FlipX+0x3c8>)
 8001874:	fb81 0103 	smull	r0, r1, r1, r3
 8001878:	17db      	asrs	r3, r3, #31
 800187a:	1a5b      	subs	r3, r3, r1
 800187c:	b29b      	uxth	r3, r3
 800187e:	4413      	add	r3, r2
 8001880:	b298      	uxth	r0, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	0fda      	lsrs	r2, r3, #31
 8001886:	4413      	add	r3, r2
 8001888:	105b      	asrs	r3, r3, #1
 800188a:	425b      	negs	r3, r3
 800188c:	b29a      	uxth	r2, r3
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	b29b      	uxth	r3, r3
 8001892:	4413      	add	r3, r2
 8001894:	b299      	uxth	r1, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a0b      	ldr	r2, [pc, #44]	@ (80018c8 <DrawPacman_FlipX+0x3c8>)
 800189a:	fb82 4203 	smull	r4, r2, r2, r3
 800189e:	17db      	asrs	r3, r3, #31
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	b29c      	uxth	r4, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4a08      	ldr	r2, [pc, #32]	@ (80018c8 <DrawPacman_FlipX+0x3c8>)
 80018a8:	fb82 5203 	smull	r5, r2, r2, r3
 80018ac:	17db      	asrs	r3, r3, #31
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	2200      	movs	r2, #0
 80018b4:	9200      	str	r2, [sp, #0]
 80018b6:	4622      	mov	r2, r4
 80018b8:	f7ff f8b7 	bl	8000a2a <ILI9341_FillRect>
}
 80018bc:	bf00      	nop
 80018be:	3758      	adds	r7, #88	@ 0x58
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bdb0      	pop	{r4, r5, r7, pc}
 80018c4:	66666667 	.word	0x66666667
 80018c8:	2aaaaaab 	.word	0x2aaaaaab

080018cc <DrawGhost>:

static void DrawGhost(int x, int y, int w, int h, uint16_t body, uint16_t eye) {
 80018cc:	b5b0      	push	{r4, r5, r7, lr}
 80018ce:	b08e      	sub	sp, #56	@ 0x38
 80018d0:	af02      	add	r7, sp, #8
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
 80018d8:	603b      	str	r3, [r7, #0]
	ILI9341_FillRect(x, y + h / 4, w, 3 * h / 4, body);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	b298      	uxth	r0, r3
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	da00      	bge.n	80018e6 <DrawGhost+0x1a>
 80018e4:	3303      	adds	r3, #3
 80018e6:	109b      	asrs	r3, r3, #2
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	4413      	add	r3, r2
 80018f0:	b299      	uxth	r1, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	b29c      	uxth	r4, r3
 80018f6:	683a      	ldr	r2, [r7, #0]
 80018f8:	4613      	mov	r3, r2
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	4413      	add	r3, r2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	da00      	bge.n	8001904 <DrawGhost+0x38>
 8001902:	3303      	adds	r3, #3
 8001904:	109b      	asrs	r3, r3, #2
 8001906:	b29a      	uxth	r2, r3
 8001908:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	4613      	mov	r3, r2
 8001910:	4622      	mov	r2, r4
 8001912:	f7ff f88a 	bl	8000a2a <ILI9341_FillRect>
	int r = w / 2;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	0fda      	lsrs	r2, r3, #31
 800191a:	4413      	add	r3, r2
 800191c:	105b      	asrs	r3, r3, #1
 800191e:	627b      	str	r3, [r7, #36]	@ 0x24
	for (int yy = 0; yy < h / 2; yy++) {
 8001920:	2300      	movs	r3, #0
 8001922:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001924:	e04b      	b.n	80019be <DrawGhost+0xf2>
		int dx = (int) sqrtf((float) r * r - (float) (r - yy) * (r - yy));
 8001926:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001928:	f7fe fcca 	bl	80002c0 <__aeabi_i2f>
 800192c:	4604      	mov	r4, r0
 800192e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001930:	f7fe fcc6 	bl	80002c0 <__aeabi_i2f>
 8001934:	4603      	mov	r3, r0
 8001936:	4619      	mov	r1, r3
 8001938:	4620      	mov	r0, r4
 800193a:	f7fe fd15 	bl	8000368 <__aeabi_fmul>
 800193e:	4603      	mov	r3, r0
 8001940:	461d      	mov	r5, r3
 8001942:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	4618      	mov	r0, r3
 800194a:	f7fe fcb9 	bl	80002c0 <__aeabi_i2f>
 800194e:	4604      	mov	r4, r0
 8001950:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	4618      	mov	r0, r3
 8001958:	f7fe fcb2 	bl	80002c0 <__aeabi_i2f>
 800195c:	4603      	mov	r3, r0
 800195e:	4619      	mov	r1, r3
 8001960:	4620      	mov	r0, r4
 8001962:	f7fe fd01 	bl	8000368 <__aeabi_fmul>
 8001966:	4603      	mov	r3, r0
 8001968:	4619      	mov	r1, r3
 800196a:	4628      	mov	r0, r5
 800196c:	f7fe fbf2 	bl	8000154 <__aeabi_fsub>
 8001970:	4603      	mov	r3, r0
 8001972:	4618      	mov	r0, r3
 8001974:	f005 fad4 	bl	8006f20 <sqrtf>
 8001978:	4603      	mov	r3, r0
 800197a:	4618      	mov	r0, r3
 800197c:	f7fe fed0 	bl	8000720 <__aeabi_f2iz>
 8001980:	4603      	mov	r3, r0
 8001982:	617b      	str	r3, [r7, #20]
		ILI9341_FillRect(x + r - dx, y + yy, 2 * dx, 1, body);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	b29a      	uxth	r2, r3
 8001988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198a:	b29b      	uxth	r3, r3
 800198c:	4413      	add	r3, r2
 800198e:	b29a      	uxth	r2, r3
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	b29b      	uxth	r3, r3
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	b298      	uxth	r0, r3
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	b29a      	uxth	r2, r3
 800199c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800199e:	b29b      	uxth	r3, r3
 80019a0:	4413      	add	r3, r2
 80019a2:	b299      	uxth	r1, r3
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	b29a      	uxth	r2, r3
 80019ac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80019b0:	9300      	str	r3, [sp, #0]
 80019b2:	2301      	movs	r3, #1
 80019b4:	f7ff f839 	bl	8000a2a <ILI9341_FillRect>
	for (int yy = 0; yy < h / 2; yy++) {
 80019b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019ba:	3301      	adds	r3, #1
 80019bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	0fda      	lsrs	r2, r3, #31
 80019c2:	4413      	add	r3, r2
 80019c4:	105b      	asrs	r3, r3, #1
 80019c6:	461a      	mov	r2, r3
 80019c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019ca:	4293      	cmp	r3, r2
 80019cc:	dbab      	blt.n	8001926 <DrawGhost+0x5a>
	}
	int tooth = w / 5;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a76      	ldr	r2, [pc, #472]	@ (8001bac <DrawGhost+0x2e0>)
 80019d2:	fb82 1203 	smull	r1, r2, r2, r3
 80019d6:	1052      	asrs	r2, r2, #1
 80019d8:	17db      	asrs	r3, r3, #31
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	623b      	str	r3, [r7, #32]
	for (int i = 0; i < 5; i++)
 80019de:	2300      	movs	r3, #0
 80019e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80019e2:	e02d      	b.n	8001a40 <DrawGhost+0x174>
		if (i % 2 == 0)
 80019e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d125      	bne.n	8001a3a <DrawGhost+0x16e>
			ILI9341_FillRect(x + i * tooth, y + h - (h / 8), tooth, h / 8,
 80019ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	6a3a      	ldr	r2, [r7, #32]
 80019f4:	b292      	uxth	r2, r2
 80019f6:	fb02 f303 	mul.w	r3, r2, r3
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	4413      	add	r3, r2
 8001a02:	b298      	uxth	r0, r3
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	4413      	add	r3, r2
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	da00      	bge.n	8001a18 <DrawGhost+0x14c>
 8001a16:	3307      	adds	r3, #7
 8001a18:	10db      	asrs	r3, r3, #3
 8001a1a:	425b      	negs	r3, r3
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	4413      	add	r3, r2
 8001a20:	b299      	uxth	r1, r3
 8001a22:	6a3b      	ldr	r3, [r7, #32]
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	da00      	bge.n	8001a2e <DrawGhost+0x162>
 8001a2c:	3307      	adds	r3, #7
 8001a2e:	10db      	asrs	r3, r3, #3
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	2400      	movs	r4, #0
 8001a34:	9400      	str	r4, [sp, #0]
 8001a36:	f7fe fff8 	bl	8000a2a <ILI9341_FillRect>
	for (int i = 0; i < 5; i++)
 8001a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a42:	2b04      	cmp	r3, #4
 8001a44:	ddce      	ble.n	80019e4 <DrawGhost+0x118>
			COLOR_BLACK);
	int ex = x + w / 4, ey = y + h / 3;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	da00      	bge.n	8001a4e <DrawGhost+0x182>
 8001a4c:	3303      	adds	r3, #3
 8001a4e:	109b      	asrs	r3, r3, #2
 8001a50:	461a      	mov	r2, r3
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	4413      	add	r3, r2
 8001a56:	61fb      	str	r3, [r7, #28]
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	4a55      	ldr	r2, [pc, #340]	@ (8001bb0 <DrawGhost+0x2e4>)
 8001a5c:	fb82 1203 	smull	r1, r2, r2, r3
 8001a60:	17db      	asrs	r3, r3, #31
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	68ba      	ldr	r2, [r7, #8]
 8001a66:	4413      	add	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
	ILI9341_FillRect(ex, ey, w / 6, h / 6, COLOR_WHITE);
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	b298      	uxth	r0, r3
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	b299      	uxth	r1, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a4f      	ldr	r2, [pc, #316]	@ (8001bb4 <DrawGhost+0x2e8>)
 8001a76:	fb82 4203 	smull	r4, r2, r2, r3
 8001a7a:	17db      	asrs	r3, r3, #31
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	b29c      	uxth	r4, r3
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	4a4c      	ldr	r2, [pc, #304]	@ (8001bb4 <DrawGhost+0x2e8>)
 8001a84:	fb82 5203 	smull	r5, r2, r2, r3
 8001a88:	17db      	asrs	r3, r3, #31
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a92:	9200      	str	r2, [sp, #0]
 8001a94:	4622      	mov	r2, r4
 8001a96:	f7fe ffc8 	bl	8000a2a <ILI9341_FillRect>
	ILI9341_FillRect(ex + w / 2, ey, w / 6, h / 6, COLOR_WHITE);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	0fda      	lsrs	r2, r3, #31
 8001a9e:	4413      	add	r3, r2
 8001aa0:	105b      	asrs	r3, r3, #1
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	4413      	add	r3, r2
 8001aaa:	b298      	uxth	r0, r3
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	b299      	uxth	r1, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	4a40      	ldr	r2, [pc, #256]	@ (8001bb4 <DrawGhost+0x2e8>)
 8001ab4:	fb82 4203 	smull	r4, r2, r2, r3
 8001ab8:	17db      	asrs	r3, r3, #31
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	b29c      	uxth	r4, r3
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	4a3c      	ldr	r2, [pc, #240]	@ (8001bb4 <DrawGhost+0x2e8>)
 8001ac2:	fb82 5203 	smull	r5, r2, r2, r3
 8001ac6:	17db      	asrs	r3, r3, #31
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ad0:	9200      	str	r2, [sp, #0]
 8001ad2:	4622      	mov	r2, r4
 8001ad4:	f7fe ffa9 	bl	8000a2a <ILI9341_FillRect>
	ILI9341_FillRect(ex + w / 12, ey + h / 12, w / 12, w / 12, eye);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4a36      	ldr	r2, [pc, #216]	@ (8001bb4 <DrawGhost+0x2e8>)
 8001adc:	fb82 1203 	smull	r1, r2, r2, r3
 8001ae0:	1052      	asrs	r2, r2, #1
 8001ae2:	17db      	asrs	r3, r3, #31
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	4413      	add	r3, r2
 8001aee:	b298      	uxth	r0, r3
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	4a30      	ldr	r2, [pc, #192]	@ (8001bb4 <DrawGhost+0x2e8>)
 8001af4:	fb82 1203 	smull	r1, r2, r2, r3
 8001af8:	1052      	asrs	r2, r2, #1
 8001afa:	17db      	asrs	r3, r3, #31
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	4413      	add	r3, r2
 8001b06:	b299      	uxth	r1, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a2a      	ldr	r2, [pc, #168]	@ (8001bb4 <DrawGhost+0x2e8>)
 8001b0c:	fb82 4203 	smull	r4, r2, r2, r3
 8001b10:	1052      	asrs	r2, r2, #1
 8001b12:	17db      	asrs	r3, r3, #31
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	b29c      	uxth	r4, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4a26      	ldr	r2, [pc, #152]	@ (8001bb4 <DrawGhost+0x2e8>)
 8001b1c:	fb82 5203 	smull	r5, r2, r2, r3
 8001b20:	1052      	asrs	r2, r2, #1
 8001b22:	17db      	asrs	r3, r3, #31
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8001b2c:	9300      	str	r3, [sp, #0]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	4622      	mov	r2, r4
 8001b32:	f7fe ff7a 	bl	8000a2a <ILI9341_FillRect>
	ILI9341_FillRect(ex + w / 2 + w / 12, ey + h / 12, w / 12, w / 12, eye);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	0fda      	lsrs	r2, r3, #31
 8001b3a:	4413      	add	r3, r2
 8001b3c:	105b      	asrs	r3, r3, #1
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	4413      	add	r3, r2
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	491a      	ldr	r1, [pc, #104]	@ (8001bb4 <DrawGhost+0x2e8>)
 8001b4c:	fb81 0103 	smull	r0, r1, r1, r3
 8001b50:	1049      	asrs	r1, r1, #1
 8001b52:	17db      	asrs	r3, r3, #31
 8001b54:	1acb      	subs	r3, r1, r3
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	4413      	add	r3, r2
 8001b5a:	b298      	uxth	r0, r3
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	4a15      	ldr	r2, [pc, #84]	@ (8001bb4 <DrawGhost+0x2e8>)
 8001b60:	fb82 1203 	smull	r1, r2, r2, r3
 8001b64:	1052      	asrs	r2, r2, #1
 8001b66:	17db      	asrs	r3, r3, #31
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	4413      	add	r3, r2
 8001b72:	b299      	uxth	r1, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4a0f      	ldr	r2, [pc, #60]	@ (8001bb4 <DrawGhost+0x2e8>)
 8001b78:	fb82 4203 	smull	r4, r2, r2, r3
 8001b7c:	1052      	asrs	r2, r2, #1
 8001b7e:	17db      	asrs	r3, r3, #31
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	b29c      	uxth	r4, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a0b      	ldr	r2, [pc, #44]	@ (8001bb4 <DrawGhost+0x2e8>)
 8001b88:	fb82 5203 	smull	r5, r2, r2, r3
 8001b8c:	1052      	asrs	r2, r2, #1
 8001b8e:	17db      	asrs	r3, r3, #31
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8001b98:	9300      	str	r3, [sp, #0]
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	4622      	mov	r2, r4
 8001b9e:	f7fe ff44 	bl	8000a2a <ILI9341_FillRect>
}
 8001ba2:	bf00      	nop
 8001ba4:	3730      	adds	r7, #48	@ 0x30
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bdb0      	pop	{r4, r5, r7, pc}
 8001baa:	bf00      	nop
 8001bac:	66666667 	.word	0x66666667
 8001bb0:	55555556 	.word	0x55555556
 8001bb4:	2aaaaaab 	.word	0x2aaaaaab

08001bb8 <StartScreen_Draw>:

/* --------------------------- Start Screen ------------------------------ */
/* 원본 참고 이미지를 가상의 기준 캔버스(가로 360, 세로 210)로 설계한 뒤
 LCD(240x320)에 비율 유지로 축소하여 중앙 배치. 위/아래 레터박스는 자동으로 검정. */
static void StartScreen_Draw(void) {
 8001bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bbc:	b096      	sub	sp, #88	@ 0x58
 8001bbe:	af04      	add	r7, sp, #16
	/* 반전 ON */
	g_mirror_xy = 1;
 8001bc0:	4bad      	ldr	r3, [pc, #692]	@ (8001e78 <StartScreen_Draw+0x2c0>)
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	701a      	strb	r2, [r3, #0]

	ILI9341_FillScreen(COLOR_BLACK);
 8001bc6:	2000      	movs	r0, #0
 8001bc8:	f7fe ff7a 	bl	8000ac0 <ILI9341_FillScreen>

	const float W_REF = 360.0f;
 8001bcc:	4bab      	ldr	r3, [pc, #684]	@ (8001e7c <StartScreen_Draw+0x2c4>)
 8001bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
	const float H_REF = 210.0f;
 8001bd0:	4bab      	ldr	r3, [pc, #684]	@ (8001e80 <StartScreen_Draw+0x2c8>)
 8001bd2:	62bb      	str	r3, [r7, #40]	@ 0x28

	float s = (float) LCD_WIDTH / W_REF;
 8001bd4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001bd6:	48ab      	ldr	r0, [pc, #684]	@ (8001e84 <StartScreen_Draw+0x2cc>)
 8001bd8:	f7fe fc7a 	bl	80004d0 <__aeabi_fdiv>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	627b      	str	r3, [r7, #36]	@ 0x24
	int scene_w = (int) (W_REF * s + 0.5f);
 8001be0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001be2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001be4:	f7fe fbc0 	bl	8000368 <__aeabi_fmul>
 8001be8:	4603      	mov	r3, r0
 8001bea:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7fe fab2 	bl	8000158 <__addsf3>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7fe fd92 	bl	8000720 <__aeabi_f2iz>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	623b      	str	r3, [r7, #32]
	int scene_h = (int) (H_REF * s + 0.5f);
 8001c00:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001c02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001c04:	f7fe fbb0 	bl	8000368 <__aeabi_fmul>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7fe faa2 	bl	8000158 <__addsf3>
 8001c14:	4603      	mov	r3, r0
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7fe fd82 	bl	8000720 <__aeabi_f2iz>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	61fb      	str	r3, [r7, #28]
	int x0 = (LCD_WIDTH - scene_w) / 2;
 8001c20:	6a3b      	ldr	r3, [r7, #32]
 8001c22:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001c26:	0fda      	lsrs	r2, r3, #31
 8001c28:	4413      	add	r3, r2
 8001c2a:	105b      	asrs	r3, r3, #1
 8001c2c:	61bb      	str	r3, [r7, #24]
	int y0 = (LCD_HEIGHT - scene_h) / 2;
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8001c34:	0fda      	lsrs	r2, r3, #31
 8001c36:	4413      	add	r3, r2
 8001c38:	105b      	asrs	r3, r3, #1
 8001c3a:	617b      	str	r3, [r7, #20]

	int stroke = (int) (3 * s);
 8001c3c:	4992      	ldr	r1, [pc, #584]	@ (8001e88 <StartScreen_Draw+0x2d0>)
 8001c3e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001c40:	f7fe fb92 	bl	8000368 <__aeabi_fmul>
 8001c44:	4603      	mov	r3, r0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7fe fd6a 	bl	8000720 <__aeabi_f2iz>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	647b      	str	r3, [r7, #68]	@ 0x44
	if (stroke < 2)
 8001c50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	dc01      	bgt.n	8001c5a <StartScreen_Draw+0xa2>
		stroke = 2;
 8001c56:	2302      	movs	r3, #2
 8001c58:	647b      	str	r3, [r7, #68]	@ 0x44

	/* 미로 프레임 */
	DrawRoundRect(x0 + (20 * s), y0 + (15 * s), (70 * s), (70 * s), (18 * s),
 8001c5a:	69b8      	ldr	r0, [r7, #24]
 8001c5c:	f7fe fb30 	bl	80002c0 <__aeabi_i2f>
 8001c60:	4604      	mov	r4, r0
 8001c62:	498a      	ldr	r1, [pc, #552]	@ (8001e8c <StartScreen_Draw+0x2d4>)
 8001c64:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001c66:	f7fe fb7f 	bl	8000368 <__aeabi_fmul>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4620      	mov	r0, r4
 8001c70:	f7fe fa72 	bl	8000158 <__addsf3>
 8001c74:	4603      	mov	r3, r0
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7fe fd52 	bl	8000720 <__aeabi_f2iz>
 8001c7c:	4604      	mov	r4, r0
 8001c7e:	6978      	ldr	r0, [r7, #20]
 8001c80:	f7fe fb1e 	bl	80002c0 <__aeabi_i2f>
 8001c84:	4605      	mov	r5, r0
 8001c86:	4982      	ldr	r1, [pc, #520]	@ (8001e90 <StartScreen_Draw+0x2d8>)
 8001c88:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001c8a:	f7fe fb6d 	bl	8000368 <__aeabi_fmul>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	4619      	mov	r1, r3
 8001c92:	4628      	mov	r0, r5
 8001c94:	f7fe fa60 	bl	8000158 <__addsf3>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7fe fd40 	bl	8000720 <__aeabi_f2iz>
 8001ca0:	4605      	mov	r5, r0
 8001ca2:	497c      	ldr	r1, [pc, #496]	@ (8001e94 <StartScreen_Draw+0x2dc>)
 8001ca4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001ca6:	f7fe fb5f 	bl	8000368 <__aeabi_fmul>
 8001caa:	4603      	mov	r3, r0
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe fd37 	bl	8000720 <__aeabi_f2iz>
 8001cb2:	4606      	mov	r6, r0
 8001cb4:	4977      	ldr	r1, [pc, #476]	@ (8001e94 <StartScreen_Draw+0x2dc>)
 8001cb6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001cb8:	f7fe fb56 	bl	8000368 <__aeabi_fmul>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7fe fd2e 	bl	8000720 <__aeabi_f2iz>
 8001cc4:	4680      	mov	r8, r0
 8001cc6:	4974      	ldr	r1, [pc, #464]	@ (8001e98 <StartScreen_Draw+0x2e0>)
 8001cc8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001cca:	f7fe fb4d 	bl	8000368 <__aeabi_fmul>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7fe fd25 	bl	8000720 <__aeabi_f2iz>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	231f      	movs	r3, #31
 8001cda:	9302      	str	r3, [sp, #8]
 8001cdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cde:	9301      	str	r3, [sp, #4]
 8001ce0:	9200      	str	r2, [sp, #0]
 8001ce2:	4643      	mov	r3, r8
 8001ce4:	4632      	mov	r2, r6
 8001ce6:	4629      	mov	r1, r5
 8001ce8:	4620      	mov	r0, r4
 8001cea:	f7ff f910 	bl	8000f0e <DrawRoundRect>
			stroke, COLOR_BLUE);
	DrawRoundRect(x0 + (270 * s), y0 + (135 * s), (70 * s), (70 * s), (18 * s),
 8001cee:	69b8      	ldr	r0, [r7, #24]
 8001cf0:	f7fe fae6 	bl	80002c0 <__aeabi_i2f>
 8001cf4:	4604      	mov	r4, r0
 8001cf6:	4969      	ldr	r1, [pc, #420]	@ (8001e9c <StartScreen_Draw+0x2e4>)
 8001cf8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001cfa:	f7fe fb35 	bl	8000368 <__aeabi_fmul>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	4619      	mov	r1, r3
 8001d02:	4620      	mov	r0, r4
 8001d04:	f7fe fa28 	bl	8000158 <__addsf3>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7fe fd08 	bl	8000720 <__aeabi_f2iz>
 8001d10:	4604      	mov	r4, r0
 8001d12:	6978      	ldr	r0, [r7, #20]
 8001d14:	f7fe fad4 	bl	80002c0 <__aeabi_i2f>
 8001d18:	4605      	mov	r5, r0
 8001d1a:	4961      	ldr	r1, [pc, #388]	@ (8001ea0 <StartScreen_Draw+0x2e8>)
 8001d1c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001d1e:	f7fe fb23 	bl	8000368 <__aeabi_fmul>
 8001d22:	4603      	mov	r3, r0
 8001d24:	4619      	mov	r1, r3
 8001d26:	4628      	mov	r0, r5
 8001d28:	f7fe fa16 	bl	8000158 <__addsf3>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe fcf6 	bl	8000720 <__aeabi_f2iz>
 8001d34:	4605      	mov	r5, r0
 8001d36:	4957      	ldr	r1, [pc, #348]	@ (8001e94 <StartScreen_Draw+0x2dc>)
 8001d38:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001d3a:	f7fe fb15 	bl	8000368 <__aeabi_fmul>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7fe fced 	bl	8000720 <__aeabi_f2iz>
 8001d46:	4606      	mov	r6, r0
 8001d48:	4952      	ldr	r1, [pc, #328]	@ (8001e94 <StartScreen_Draw+0x2dc>)
 8001d4a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001d4c:	f7fe fb0c 	bl	8000368 <__aeabi_fmul>
 8001d50:	4603      	mov	r3, r0
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7fe fce4 	bl	8000720 <__aeabi_f2iz>
 8001d58:	4680      	mov	r8, r0
 8001d5a:	494f      	ldr	r1, [pc, #316]	@ (8001e98 <StartScreen_Draw+0x2e0>)
 8001d5c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001d5e:	f7fe fb03 	bl	8000368 <__aeabi_fmul>
 8001d62:	4603      	mov	r3, r0
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7fe fcdb 	bl	8000720 <__aeabi_f2iz>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	231f      	movs	r3, #31
 8001d6e:	9302      	str	r3, [sp, #8]
 8001d70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d72:	9301      	str	r3, [sp, #4]
 8001d74:	9200      	str	r2, [sp, #0]
 8001d76:	4643      	mov	r3, r8
 8001d78:	4632      	mov	r2, r6
 8001d7a:	4629      	mov	r1, r5
 8001d7c:	4620      	mov	r0, r4
 8001d7e:	f7ff f8c6 	bl	8000f0e <DrawRoundRect>
			stroke, COLOR_BLUE);
	DrawRoundRect(x0 + (328 * s), y0 + (20 * s), (28 * s), (110 * s), (14 * s),
 8001d82:	69b8      	ldr	r0, [r7, #24]
 8001d84:	f7fe fa9c 	bl	80002c0 <__aeabi_i2f>
 8001d88:	4604      	mov	r4, r0
 8001d8a:	4946      	ldr	r1, [pc, #280]	@ (8001ea4 <StartScreen_Draw+0x2ec>)
 8001d8c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001d8e:	f7fe faeb 	bl	8000368 <__aeabi_fmul>
 8001d92:	4603      	mov	r3, r0
 8001d94:	4619      	mov	r1, r3
 8001d96:	4620      	mov	r0, r4
 8001d98:	f7fe f9de 	bl	8000158 <__addsf3>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7fe fcbe 	bl	8000720 <__aeabi_f2iz>
 8001da4:	4604      	mov	r4, r0
 8001da6:	6978      	ldr	r0, [r7, #20]
 8001da8:	f7fe fa8a 	bl	80002c0 <__aeabi_i2f>
 8001dac:	4605      	mov	r5, r0
 8001dae:	4937      	ldr	r1, [pc, #220]	@ (8001e8c <StartScreen_Draw+0x2d4>)
 8001db0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001db2:	f7fe fad9 	bl	8000368 <__aeabi_fmul>
 8001db6:	4603      	mov	r3, r0
 8001db8:	4619      	mov	r1, r3
 8001dba:	4628      	mov	r0, r5
 8001dbc:	f7fe f9cc 	bl	8000158 <__addsf3>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7fe fcac 	bl	8000720 <__aeabi_f2iz>
 8001dc8:	4605      	mov	r5, r0
 8001dca:	4937      	ldr	r1, [pc, #220]	@ (8001ea8 <StartScreen_Draw+0x2f0>)
 8001dcc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001dce:	f7fe facb 	bl	8000368 <__aeabi_fmul>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7fe fca3 	bl	8000720 <__aeabi_f2iz>
 8001dda:	4606      	mov	r6, r0
 8001ddc:	4933      	ldr	r1, [pc, #204]	@ (8001eac <StartScreen_Draw+0x2f4>)
 8001dde:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001de0:	f7fe fac2 	bl	8000368 <__aeabi_fmul>
 8001de4:	4603      	mov	r3, r0
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7fe fc9a 	bl	8000720 <__aeabi_f2iz>
 8001dec:	4680      	mov	r8, r0
 8001dee:	4930      	ldr	r1, [pc, #192]	@ (8001eb0 <StartScreen_Draw+0x2f8>)
 8001df0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001df2:	f7fe fab9 	bl	8000368 <__aeabi_fmul>
 8001df6:	4603      	mov	r3, r0
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7fe fc91 	bl	8000720 <__aeabi_f2iz>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	231f      	movs	r3, #31
 8001e02:	9302      	str	r3, [sp, #8]
 8001e04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e06:	9301      	str	r3, [sp, #4]
 8001e08:	9200      	str	r2, [sp, #0]
 8001e0a:	4643      	mov	r3, r8
 8001e0c:	4632      	mov	r2, r6
 8001e0e:	4629      	mov	r1, r5
 8001e10:	4620      	mov	r0, r4
 8001e12:	f7ff f87c 	bl	8000f0e <DrawRoundRect>
			stroke, COLOR_BLUE);
	DrawRoundRect(x0 + (20 * s), y0 + (120 * s), (28 * s), (110 * s), (14 * s),
 8001e16:	69b8      	ldr	r0, [r7, #24]
 8001e18:	f7fe fa52 	bl	80002c0 <__aeabi_i2f>
 8001e1c:	4604      	mov	r4, r0
 8001e1e:	491b      	ldr	r1, [pc, #108]	@ (8001e8c <StartScreen_Draw+0x2d4>)
 8001e20:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001e22:	f7fe faa1 	bl	8000368 <__aeabi_fmul>
 8001e26:	4603      	mov	r3, r0
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4620      	mov	r0, r4
 8001e2c:	f7fe f994 	bl	8000158 <__addsf3>
 8001e30:	4603      	mov	r3, r0
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7fe fc74 	bl	8000720 <__aeabi_f2iz>
 8001e38:	4604      	mov	r4, r0
 8001e3a:	6978      	ldr	r0, [r7, #20]
 8001e3c:	f7fe fa40 	bl	80002c0 <__aeabi_i2f>
 8001e40:	4605      	mov	r5, r0
 8001e42:	491c      	ldr	r1, [pc, #112]	@ (8001eb4 <StartScreen_Draw+0x2fc>)
 8001e44:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001e46:	f7fe fa8f 	bl	8000368 <__aeabi_fmul>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4628      	mov	r0, r5
 8001e50:	f7fe f982 	bl	8000158 <__addsf3>
 8001e54:	4603      	mov	r3, r0
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7fe fc62 	bl	8000720 <__aeabi_f2iz>
 8001e5c:	4605      	mov	r5, r0
 8001e5e:	4912      	ldr	r1, [pc, #72]	@ (8001ea8 <StartScreen_Draw+0x2f0>)
 8001e60:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001e62:	f7fe fa81 	bl	8000368 <__aeabi_fmul>
 8001e66:	4603      	mov	r3, r0
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7fe fc59 	bl	8000720 <__aeabi_f2iz>
 8001e6e:	4606      	mov	r6, r0
 8001e70:	490e      	ldr	r1, [pc, #56]	@ (8001eac <StartScreen_Draw+0x2f4>)
 8001e72:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001e74:	e020      	b.n	8001eb8 <StartScreen_Draw+0x300>
 8001e76:	bf00      	nop
 8001e78:	200002b4 	.word	0x200002b4
 8001e7c:	43b40000 	.word	0x43b40000
 8001e80:	43520000 	.word	0x43520000
 8001e84:	43700000 	.word	0x43700000
 8001e88:	40400000 	.word	0x40400000
 8001e8c:	41a00000 	.word	0x41a00000
 8001e90:	41700000 	.word	0x41700000
 8001e94:	428c0000 	.word	0x428c0000
 8001e98:	41900000 	.word	0x41900000
 8001e9c:	43870000 	.word	0x43870000
 8001ea0:	43070000 	.word	0x43070000
 8001ea4:	43a40000 	.word	0x43a40000
 8001ea8:	41e00000 	.word	0x41e00000
 8001eac:	42dc0000 	.word	0x42dc0000
 8001eb0:	41600000 	.word	0x41600000
 8001eb4:	42f00000 	.word	0x42f00000
 8001eb8:	f7fe fa56 	bl	8000368 <__aeabi_fmul>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7fe fc2e 	bl	8000720 <__aeabi_f2iz>
 8001ec4:	4680      	mov	r8, r0
 8001ec6:	49af      	ldr	r1, [pc, #700]	@ (8002184 <StartScreen_Draw+0x5cc>)
 8001ec8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001eca:	f7fe fa4d 	bl	8000368 <__aeabi_fmul>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7fe fc25 	bl	8000720 <__aeabi_f2iz>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	231f      	movs	r3, #31
 8001eda:	9302      	str	r3, [sp, #8]
 8001edc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ede:	9301      	str	r3, [sp, #4]
 8001ee0:	9200      	str	r2, [sp, #0]
 8001ee2:	4643      	mov	r3, r8
 8001ee4:	4632      	mov	r2, r6
 8001ee6:	4629      	mov	r1, r5
 8001ee8:	4620      	mov	r0, r4
 8001eea:	f7ff f810 	bl	8000f0e <DrawRoundRect>
			stroke, COLOR_BLUE);
	DrawRoundRect(x0 + (120 * s), y0 + (38 * s), (85 * s), (22 * s), (11 * s),
 8001eee:	69b8      	ldr	r0, [r7, #24]
 8001ef0:	f7fe f9e6 	bl	80002c0 <__aeabi_i2f>
 8001ef4:	4604      	mov	r4, r0
 8001ef6:	49a4      	ldr	r1, [pc, #656]	@ (8002188 <StartScreen_Draw+0x5d0>)
 8001ef8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001efa:	f7fe fa35 	bl	8000368 <__aeabi_fmul>
 8001efe:	4603      	mov	r3, r0
 8001f00:	4619      	mov	r1, r3
 8001f02:	4620      	mov	r0, r4
 8001f04:	f7fe f928 	bl	8000158 <__addsf3>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7fe fc08 	bl	8000720 <__aeabi_f2iz>
 8001f10:	4604      	mov	r4, r0
 8001f12:	6978      	ldr	r0, [r7, #20]
 8001f14:	f7fe f9d4 	bl	80002c0 <__aeabi_i2f>
 8001f18:	4605      	mov	r5, r0
 8001f1a:	499c      	ldr	r1, [pc, #624]	@ (800218c <StartScreen_Draw+0x5d4>)
 8001f1c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001f1e:	f7fe fa23 	bl	8000368 <__aeabi_fmul>
 8001f22:	4603      	mov	r3, r0
 8001f24:	4619      	mov	r1, r3
 8001f26:	4628      	mov	r0, r5
 8001f28:	f7fe f916 	bl	8000158 <__addsf3>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7fe fbf6 	bl	8000720 <__aeabi_f2iz>
 8001f34:	4605      	mov	r5, r0
 8001f36:	4996      	ldr	r1, [pc, #600]	@ (8002190 <StartScreen_Draw+0x5d8>)
 8001f38:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001f3a:	f7fe fa15 	bl	8000368 <__aeabi_fmul>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7fe fbed 	bl	8000720 <__aeabi_f2iz>
 8001f46:	4606      	mov	r6, r0
 8001f48:	4992      	ldr	r1, [pc, #584]	@ (8002194 <StartScreen_Draw+0x5dc>)
 8001f4a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001f4c:	f7fe fa0c 	bl	8000368 <__aeabi_fmul>
 8001f50:	4603      	mov	r3, r0
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7fe fbe4 	bl	8000720 <__aeabi_f2iz>
 8001f58:	4680      	mov	r8, r0
 8001f5a:	498f      	ldr	r1, [pc, #572]	@ (8002198 <StartScreen_Draw+0x5e0>)
 8001f5c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001f5e:	f7fe fa03 	bl	8000368 <__aeabi_fmul>
 8001f62:	4603      	mov	r3, r0
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7fe fbdb 	bl	8000720 <__aeabi_f2iz>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	231f      	movs	r3, #31
 8001f6e:	9302      	str	r3, [sp, #8]
 8001f70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f72:	9301      	str	r3, [sp, #4]
 8001f74:	9200      	str	r2, [sp, #0]
 8001f76:	4643      	mov	r3, r8
 8001f78:	4632      	mov	r2, r6
 8001f7a:	4629      	mov	r1, r5
 8001f7c:	4620      	mov	r0, r4
 8001f7e:	f7fe ffc6 	bl	8000f0e <DrawRoundRect>
			stroke, COLOR_BLUE);
	DrawRoundRect(x0 + (215 * s), y0 + (38 * s), (85 * s), (22 * s), (11 * s),
 8001f82:	69b8      	ldr	r0, [r7, #24]
 8001f84:	f7fe f99c 	bl	80002c0 <__aeabi_i2f>
 8001f88:	4604      	mov	r4, r0
 8001f8a:	4984      	ldr	r1, [pc, #528]	@ (800219c <StartScreen_Draw+0x5e4>)
 8001f8c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001f8e:	f7fe f9eb 	bl	8000368 <__aeabi_fmul>
 8001f92:	4603      	mov	r3, r0
 8001f94:	4619      	mov	r1, r3
 8001f96:	4620      	mov	r0, r4
 8001f98:	f7fe f8de 	bl	8000158 <__addsf3>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7fe fbbe 	bl	8000720 <__aeabi_f2iz>
 8001fa4:	4604      	mov	r4, r0
 8001fa6:	6978      	ldr	r0, [r7, #20]
 8001fa8:	f7fe f98a 	bl	80002c0 <__aeabi_i2f>
 8001fac:	4605      	mov	r5, r0
 8001fae:	4977      	ldr	r1, [pc, #476]	@ (800218c <StartScreen_Draw+0x5d4>)
 8001fb0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001fb2:	f7fe f9d9 	bl	8000368 <__aeabi_fmul>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4628      	mov	r0, r5
 8001fbc:	f7fe f8cc 	bl	8000158 <__addsf3>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7fe fbac 	bl	8000720 <__aeabi_f2iz>
 8001fc8:	4605      	mov	r5, r0
 8001fca:	4971      	ldr	r1, [pc, #452]	@ (8002190 <StartScreen_Draw+0x5d8>)
 8001fcc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001fce:	f7fe f9cb 	bl	8000368 <__aeabi_fmul>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7fe fba3 	bl	8000720 <__aeabi_f2iz>
 8001fda:	4606      	mov	r6, r0
 8001fdc:	496d      	ldr	r1, [pc, #436]	@ (8002194 <StartScreen_Draw+0x5dc>)
 8001fde:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001fe0:	f7fe f9c2 	bl	8000368 <__aeabi_fmul>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7fe fb9a 	bl	8000720 <__aeabi_f2iz>
 8001fec:	4680      	mov	r8, r0
 8001fee:	496a      	ldr	r1, [pc, #424]	@ (8002198 <StartScreen_Draw+0x5e0>)
 8001ff0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001ff2:	f7fe f9b9 	bl	8000368 <__aeabi_fmul>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7fe fb91 	bl	8000720 <__aeabi_f2iz>
 8001ffe:	4602      	mov	r2, r0
 8002000:	231f      	movs	r3, #31
 8002002:	9302      	str	r3, [sp, #8]
 8002004:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002006:	9301      	str	r3, [sp, #4]
 8002008:	9200      	str	r2, [sp, #0]
 800200a:	4643      	mov	r3, r8
 800200c:	4632      	mov	r2, r6
 800200e:	4629      	mov	r1, r5
 8002010:	4620      	mov	r0, r4
 8002012:	f7fe ff7c 	bl	8000f0e <DrawRoundRect>
			stroke, COLOR_BLUE);

	/* 과일 아이콘 */
	DrawFilledCircle(x0 + (210 * s), y0 + (30 * s), (5 * s), COLOR_RED);
 8002016:	69b8      	ldr	r0, [r7, #24]
 8002018:	f7fe f952 	bl	80002c0 <__aeabi_i2f>
 800201c:	4604      	mov	r4, r0
 800201e:	4960      	ldr	r1, [pc, #384]	@ (80021a0 <StartScreen_Draw+0x5e8>)
 8002020:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002022:	f7fe f9a1 	bl	8000368 <__aeabi_fmul>
 8002026:	4603      	mov	r3, r0
 8002028:	4619      	mov	r1, r3
 800202a:	4620      	mov	r0, r4
 800202c:	f7fe f894 	bl	8000158 <__addsf3>
 8002030:	4603      	mov	r3, r0
 8002032:	4618      	mov	r0, r3
 8002034:	f7fe fb74 	bl	8000720 <__aeabi_f2iz>
 8002038:	4604      	mov	r4, r0
 800203a:	6978      	ldr	r0, [r7, #20]
 800203c:	f7fe f940 	bl	80002c0 <__aeabi_i2f>
 8002040:	4605      	mov	r5, r0
 8002042:	4958      	ldr	r1, [pc, #352]	@ (80021a4 <StartScreen_Draw+0x5ec>)
 8002044:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002046:	f7fe f98f 	bl	8000368 <__aeabi_fmul>
 800204a:	4603      	mov	r3, r0
 800204c:	4619      	mov	r1, r3
 800204e:	4628      	mov	r0, r5
 8002050:	f7fe f882 	bl	8000158 <__addsf3>
 8002054:	4603      	mov	r3, r0
 8002056:	4618      	mov	r0, r3
 8002058:	f7fe fb62 	bl	8000720 <__aeabi_f2iz>
 800205c:	4605      	mov	r5, r0
 800205e:	4952      	ldr	r1, [pc, #328]	@ (80021a8 <StartScreen_Draw+0x5f0>)
 8002060:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002062:	f7fe f981 	bl	8000368 <__aeabi_fmul>
 8002066:	4603      	mov	r3, r0
 8002068:	4618      	mov	r0, r3
 800206a:	f7fe fb59 	bl	8000720 <__aeabi_f2iz>
 800206e:	4602      	mov	r2, r0
 8002070:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002074:	4629      	mov	r1, r5
 8002076:	4620      	mov	r0, r4
 8002078:	f7fe feac 	bl	8000dd4 <DrawFilledCircle>
	DrawFilledCircle(x0 + (165 * s), y0 + (30 * s), (5 * s), COLOR_RED);
 800207c:	69b8      	ldr	r0, [r7, #24]
 800207e:	f7fe f91f 	bl	80002c0 <__aeabi_i2f>
 8002082:	4604      	mov	r4, r0
 8002084:	4949      	ldr	r1, [pc, #292]	@ (80021ac <StartScreen_Draw+0x5f4>)
 8002086:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002088:	f7fe f96e 	bl	8000368 <__aeabi_fmul>
 800208c:	4603      	mov	r3, r0
 800208e:	4619      	mov	r1, r3
 8002090:	4620      	mov	r0, r4
 8002092:	f7fe f861 	bl	8000158 <__addsf3>
 8002096:	4603      	mov	r3, r0
 8002098:	4618      	mov	r0, r3
 800209a:	f7fe fb41 	bl	8000720 <__aeabi_f2iz>
 800209e:	4604      	mov	r4, r0
 80020a0:	6978      	ldr	r0, [r7, #20]
 80020a2:	f7fe f90d 	bl	80002c0 <__aeabi_i2f>
 80020a6:	4605      	mov	r5, r0
 80020a8:	493e      	ldr	r1, [pc, #248]	@ (80021a4 <StartScreen_Draw+0x5ec>)
 80020aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80020ac:	f7fe f95c 	bl	8000368 <__aeabi_fmul>
 80020b0:	4603      	mov	r3, r0
 80020b2:	4619      	mov	r1, r3
 80020b4:	4628      	mov	r0, r5
 80020b6:	f7fe f84f 	bl	8000158 <__addsf3>
 80020ba:	4603      	mov	r3, r0
 80020bc:	4618      	mov	r0, r3
 80020be:	f7fe fb2f 	bl	8000720 <__aeabi_f2iz>
 80020c2:	4605      	mov	r5, r0
 80020c4:	4938      	ldr	r1, [pc, #224]	@ (80021a8 <StartScreen_Draw+0x5f0>)
 80020c6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80020c8:	f7fe f94e 	bl	8000368 <__aeabi_fmul>
 80020cc:	4603      	mov	r3, r0
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7fe fb26 	bl	8000720 <__aeabi_f2iz>
 80020d4:	4602      	mov	r2, r0
 80020d6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80020da:	4629      	mov	r1, r5
 80020dc:	4620      	mov	r0, r4
 80020de:	f7fe fe79 	bl	8000dd4 <DrawFilledCircle>
	DrawFilledCircle(x0 + (58 * s), y0 + (172 * s), (6 * s), COLOR_RED);
 80020e2:	69b8      	ldr	r0, [r7, #24]
 80020e4:	f7fe f8ec 	bl	80002c0 <__aeabi_i2f>
 80020e8:	4604      	mov	r4, r0
 80020ea:	4931      	ldr	r1, [pc, #196]	@ (80021b0 <StartScreen_Draw+0x5f8>)
 80020ec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80020ee:	f7fe f93b 	bl	8000368 <__aeabi_fmul>
 80020f2:	4603      	mov	r3, r0
 80020f4:	4619      	mov	r1, r3
 80020f6:	4620      	mov	r0, r4
 80020f8:	f7fe f82e 	bl	8000158 <__addsf3>
 80020fc:	4603      	mov	r3, r0
 80020fe:	4618      	mov	r0, r3
 8002100:	f7fe fb0e 	bl	8000720 <__aeabi_f2iz>
 8002104:	4604      	mov	r4, r0
 8002106:	6978      	ldr	r0, [r7, #20]
 8002108:	f7fe f8da 	bl	80002c0 <__aeabi_i2f>
 800210c:	4605      	mov	r5, r0
 800210e:	4929      	ldr	r1, [pc, #164]	@ (80021b4 <StartScreen_Draw+0x5fc>)
 8002110:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002112:	f7fe f929 	bl	8000368 <__aeabi_fmul>
 8002116:	4603      	mov	r3, r0
 8002118:	4619      	mov	r1, r3
 800211a:	4628      	mov	r0, r5
 800211c:	f7fe f81c 	bl	8000158 <__addsf3>
 8002120:	4603      	mov	r3, r0
 8002122:	4618      	mov	r0, r3
 8002124:	f7fe fafc 	bl	8000720 <__aeabi_f2iz>
 8002128:	4605      	mov	r5, r0
 800212a:	4923      	ldr	r1, [pc, #140]	@ (80021b8 <StartScreen_Draw+0x600>)
 800212c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800212e:	f7fe f91b 	bl	8000368 <__aeabi_fmul>
 8002132:	4603      	mov	r3, r0
 8002134:	4618      	mov	r0, r3
 8002136:	f7fe faf3 	bl	8000720 <__aeabi_f2iz>
 800213a:	4602      	mov	r2, r0
 800213c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002140:	4629      	mov	r1, r5
 8002142:	4620      	mov	r0, r4
 8002144:	f7fe fe46 	bl	8000dd4 <DrawFilledCircle>

	/* 중앙 로고 */
	int logo_scale = (int) (5 * s);
 8002148:	4917      	ldr	r1, [pc, #92]	@ (80021a8 <StartScreen_Draw+0x5f0>)
 800214a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800214c:	f7fe f90c 	bl	8000368 <__aeabi_fmul>
 8002150:	4603      	mov	r3, r0
 8002152:	4618      	mov	r0, r3
 8002154:	f7fe fae4 	bl	8000720 <__aeabi_f2iz>
 8002158:	4603      	mov	r3, r0
 800215a:	643b      	str	r3, [r7, #64]	@ 0x40
	if (logo_scale < 2)
 800215c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800215e:	2b01      	cmp	r3, #1
 8002160:	dc01      	bgt.n	8002166 <StartScreen_Draw+0x5ae>
		logo_scale = 2;
 8002162:	2302      	movs	r3, #2
 8002164:	643b      	str	r3, [r7, #64]	@ 0x40
	int text_y = y0 + (80 * s);
 8002166:	6978      	ldr	r0, [r7, #20]
 8002168:	f7fe f8aa 	bl	80002c0 <__aeabi_i2f>
 800216c:	4604      	mov	r4, r0
 800216e:	4913      	ldr	r1, [pc, #76]	@ (80021bc <StartScreen_Draw+0x604>)
 8002170:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002172:	f7fe f8f9 	bl	8000368 <__aeabi_fmul>
 8002176:	4603      	mov	r3, r0
 8002178:	4619      	mov	r1, r3
 800217a:	4620      	mov	r0, r4
 800217c:	f7fd ffec 	bl	8000158 <__addsf3>
 8002180:	e01e      	b.n	80021c0 <StartScreen_Draw+0x608>
 8002182:	bf00      	nop
 8002184:	41600000 	.word	0x41600000
 8002188:	42f00000 	.word	0x42f00000
 800218c:	42180000 	.word	0x42180000
 8002190:	42aa0000 	.word	0x42aa0000
 8002194:	41b00000 	.word	0x41b00000
 8002198:	41300000 	.word	0x41300000
 800219c:	43570000 	.word	0x43570000
 80021a0:	43520000 	.word	0x43520000
 80021a4:	41f00000 	.word	0x41f00000
 80021a8:	40a00000 	.word	0x40a00000
 80021ac:	43250000 	.word	0x43250000
 80021b0:	42680000 	.word	0x42680000
 80021b4:	432c0000 	.word	0x432c0000
 80021b8:	40c00000 	.word	0x40c00000
 80021bc:	42a00000 	.word	0x42a00000
 80021c0:	4603      	mov	r3, r0
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7fe faac 	bl	8000720 <__aeabi_f2iz>
 80021c8:	4603      	mov	r3, r0
 80021ca:	613b      	str	r3, [r7, #16]
	DrawText_FlipXY(x0 + (110 * s), text_y, "PAC", COLOR_YELLOW, COLOR_BLACK,
 80021cc:	69b8      	ldr	r0, [r7, #24]
 80021ce:	f7fe f877 	bl	80002c0 <__aeabi_i2f>
 80021d2:	4604      	mov	r4, r0
 80021d4:	4995      	ldr	r1, [pc, #596]	@ (800242c <StartScreen_Draw+0x874>)
 80021d6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80021d8:	f7fe f8c6 	bl	8000368 <__aeabi_fmul>
 80021dc:	4603      	mov	r3, r0
 80021de:	4619      	mov	r1, r3
 80021e0:	4620      	mov	r0, r4
 80021e2:	f7fd ffb9 	bl	8000158 <__addsf3>
 80021e6:	4603      	mov	r3, r0
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7fe fa99 	bl	8000720 <__aeabi_f2iz>
 80021ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021f0:	9301      	str	r3, [sp, #4]
 80021f2:	2300      	movs	r3, #0
 80021f4:	9300      	str	r3, [sp, #0]
 80021f6:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80021fa:	4a8d      	ldr	r2, [pc, #564]	@ (8002430 <StartScreen_Draw+0x878>)
 80021fc:	6939      	ldr	r1, [r7, #16]
 80021fe:	f7fe fdbf 	bl	8000d80 <DrawText_FlipXY>
			logo_scale);
	DrawText_FlipXY(x0 + (110 * s) + 3 * (6 * logo_scale) + (8 * s), text_y,
 8002202:	69b8      	ldr	r0, [r7, #24]
 8002204:	f7fe f85c 	bl	80002c0 <__aeabi_i2f>
 8002208:	4604      	mov	r4, r0
 800220a:	4988      	ldr	r1, [pc, #544]	@ (800242c <StartScreen_Draw+0x874>)
 800220c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800220e:	f7fe f8ab 	bl	8000368 <__aeabi_fmul>
 8002212:	4603      	mov	r3, r0
 8002214:	4619      	mov	r1, r3
 8002216:	4620      	mov	r0, r4
 8002218:	f7fd ff9e 	bl	8000158 <__addsf3>
 800221c:	4603      	mov	r3, r0
 800221e:	461c      	mov	r4, r3
 8002220:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002222:	4613      	mov	r3, r2
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	4413      	add	r3, r2
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	4618      	mov	r0, r3
 800222c:	f7fe f848 	bl	80002c0 <__aeabi_i2f>
 8002230:	4603      	mov	r3, r0
 8002232:	4619      	mov	r1, r3
 8002234:	4620      	mov	r0, r4
 8002236:	f7fd ff8f 	bl	8000158 <__addsf3>
 800223a:	4603      	mov	r3, r0
 800223c:	461c      	mov	r4, r3
 800223e:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 8002242:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002244:	f7fe f890 	bl	8000368 <__aeabi_fmul>
 8002248:	4603      	mov	r3, r0
 800224a:	4619      	mov	r1, r3
 800224c:	4620      	mov	r0, r4
 800224e:	f7fd ff83 	bl	8000158 <__addsf3>
 8002252:	4603      	mov	r3, r0
 8002254:	4618      	mov	r0, r3
 8002256:	f7fe fa63 	bl	8000720 <__aeabi_f2iz>
 800225a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800225c:	9301      	str	r3, [sp, #4]
 800225e:	2300      	movs	r3, #0
 8002260:	9300      	str	r3, [sp, #0]
 8002262:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002266:	4a73      	ldr	r2, [pc, #460]	@ (8002434 <StartScreen_Draw+0x87c>)
 8002268:	6939      	ldr	r1, [r7, #16]
 800226a:	f7fe fd89 	bl	8000d80 <DrawText_FlipXY>
			"MAN",
			COLOR_YELLOW, COLOR_BLACK, logo_scale);

	/* 하단 도트 & 팩맨 */
	int dot_r = (int) (3 * s);
 800226e:	4972      	ldr	r1, [pc, #456]	@ (8002438 <StartScreen_Draw+0x880>)
 8002270:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002272:	f7fe f879 	bl	8000368 <__aeabi_fmul>
 8002276:	4603      	mov	r3, r0
 8002278:	4618      	mov	r0, r3
 800227a:	f7fe fa51 	bl	8000720 <__aeabi_f2iz>
 800227e:	4603      	mov	r3, r0
 8002280:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (dot_r < 2)
 8002282:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002284:	2b01      	cmp	r3, #1
 8002286:	dc01      	bgt.n	800228c <StartScreen_Draw+0x6d4>
		dot_r = 2;
 8002288:	2302      	movs	r3, #2
 800228a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	int big_r = (int) (7 * s);
 800228c:	496b      	ldr	r1, [pc, #428]	@ (800243c <StartScreen_Draw+0x884>)
 800228e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002290:	f7fe f86a 	bl	8000368 <__aeabi_fmul>
 8002294:	4603      	mov	r3, r0
 8002296:	4618      	mov	r0, r3
 8002298:	f7fe fa42 	bl	8000720 <__aeabi_f2iz>
 800229c:	4603      	mov	r3, r0
 800229e:	60fb      	str	r3, [r7, #12]
	int base_y = y0 + (140 * s);
 80022a0:	6978      	ldr	r0, [r7, #20]
 80022a2:	f7fe f80d 	bl	80002c0 <__aeabi_i2f>
 80022a6:	4604      	mov	r4, r0
 80022a8:	4965      	ldr	r1, [pc, #404]	@ (8002440 <StartScreen_Draw+0x888>)
 80022aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80022ac:	f7fe f85c 	bl	8000368 <__aeabi_fmul>
 80022b0:	4603      	mov	r3, r0
 80022b2:	4619      	mov	r1, r3
 80022b4:	4620      	mov	r0, r4
 80022b6:	f7fd ff4f 	bl	8000158 <__addsf3>
 80022ba:	4603      	mov	r3, r0
 80022bc:	4618      	mov	r0, r3
 80022be:	f7fe fa2f 	bl	8000720 <__aeabi_f2iz>
 80022c2:	4603      	mov	r3, r0
 80022c4:	60bb      	str	r3, [r7, #8]
	int base_x = x0 + (100 * s);
 80022c6:	69b8      	ldr	r0, [r7, #24]
 80022c8:	f7fd fffa 	bl	80002c0 <__aeabi_i2f>
 80022cc:	4604      	mov	r4, r0
 80022ce:	495d      	ldr	r1, [pc, #372]	@ (8002444 <StartScreen_Draw+0x88c>)
 80022d0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80022d2:	f7fe f849 	bl	8000368 <__aeabi_fmul>
 80022d6:	4603      	mov	r3, r0
 80022d8:	4619      	mov	r1, r3
 80022da:	4620      	mov	r0, r4
 80022dc:	f7fd ff3c 	bl	8000158 <__addsf3>
 80022e0:	4603      	mov	r3, r0
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7fe fa1c 	bl	8000720 <__aeabi_f2iz>
 80022e8:	4603      	mov	r3, r0
 80022ea:	607b      	str	r3, [r7, #4]

	for (int i = 0; i < 7; i++)
 80022ec:	2300      	movs	r3, #0
 80022ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80022f0:	e022      	b.n	8002338 <StartScreen_Draw+0x780>
		DrawFilledCircle(base_x + i * (12 * s), base_y, dot_r, COLOR_ORANGE);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f7fd ffe4 	bl	80002c0 <__aeabi_i2f>
 80022f8:	4604      	mov	r4, r0
 80022fa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80022fc:	f7fd ffe0 	bl	80002c0 <__aeabi_i2f>
 8002300:	4605      	mov	r5, r0
 8002302:	4951      	ldr	r1, [pc, #324]	@ (8002448 <StartScreen_Draw+0x890>)
 8002304:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002306:	f7fe f82f 	bl	8000368 <__aeabi_fmul>
 800230a:	4603      	mov	r3, r0
 800230c:	4619      	mov	r1, r3
 800230e:	4628      	mov	r0, r5
 8002310:	f7fe f82a 	bl	8000368 <__aeabi_fmul>
 8002314:	4603      	mov	r3, r0
 8002316:	4619      	mov	r1, r3
 8002318:	4620      	mov	r0, r4
 800231a:	f7fd ff1d 	bl	8000158 <__addsf3>
 800231e:	4603      	mov	r3, r0
 8002320:	4618      	mov	r0, r3
 8002322:	f7fe f9fd 	bl	8000720 <__aeabi_f2iz>
 8002326:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 800232a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800232c:	68b9      	ldr	r1, [r7, #8]
 800232e:	f7fe fd51 	bl	8000dd4 <DrawFilledCircle>
	for (int i = 0; i < 7; i++)
 8002332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002334:	3301      	adds	r3, #1
 8002336:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800233a:	2b06      	cmp	r3, #6
 800233c:	ddd9      	ble.n	80022f2 <StartScreen_Draw+0x73a>
	for (int i = 1; i < 8; i++)
 800233e:	2301      	movs	r3, #1
 8002340:	637b      	str	r3, [r7, #52]	@ 0x34
 8002342:	e023      	b.n	800238c <StartScreen_Draw+0x7d4>
		DrawFilledCircle(base_x, base_y + i * (12 * s), dot_r, COLOR_ORANGE);
 8002344:	68b8      	ldr	r0, [r7, #8]
 8002346:	f7fd ffbb 	bl	80002c0 <__aeabi_i2f>
 800234a:	4604      	mov	r4, r0
 800234c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800234e:	f7fd ffb7 	bl	80002c0 <__aeabi_i2f>
 8002352:	4605      	mov	r5, r0
 8002354:	493c      	ldr	r1, [pc, #240]	@ (8002448 <StartScreen_Draw+0x890>)
 8002356:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002358:	f7fe f806 	bl	8000368 <__aeabi_fmul>
 800235c:	4603      	mov	r3, r0
 800235e:	4619      	mov	r1, r3
 8002360:	4628      	mov	r0, r5
 8002362:	f7fe f801 	bl	8000368 <__aeabi_fmul>
 8002366:	4603      	mov	r3, r0
 8002368:	4619      	mov	r1, r3
 800236a:	4620      	mov	r0, r4
 800236c:	f7fd fef4 	bl	8000158 <__addsf3>
 8002370:	4603      	mov	r3, r0
 8002372:	4618      	mov	r0, r3
 8002374:	f7fe f9d4 	bl	8000720 <__aeabi_f2iz>
 8002378:	4601      	mov	r1, r0
 800237a:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 800237e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f7fe fd27 	bl	8000dd4 <DrawFilledCircle>
	for (int i = 1; i < 8; i++)
 8002386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002388:	3301      	adds	r3, #1
 800238a:	637b      	str	r3, [r7, #52]	@ 0x34
 800238c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800238e:	2b07      	cmp	r3, #7
 8002390:	ddd8      	ble.n	8002344 <StartScreen_Draw+0x78c>

	DrawFilledCircle(base_x + (8 * 12 * s), base_y, big_r, COLOR_ORANGE);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f7fd ff94 	bl	80002c0 <__aeabi_i2f>
 8002398:	4604      	mov	r4, r0
 800239a:	492c      	ldr	r1, [pc, #176]	@ (800244c <StartScreen_Draw+0x894>)
 800239c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800239e:	f7fd ffe3 	bl	8000368 <__aeabi_fmul>
 80023a2:	4603      	mov	r3, r0
 80023a4:	4619      	mov	r1, r3
 80023a6:	4620      	mov	r0, r4
 80023a8:	f7fd fed6 	bl	8000158 <__addsf3>
 80023ac:	4603      	mov	r3, r0
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7fe f9b6 	bl	8000720 <__aeabi_f2iz>
 80023b4:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	68b9      	ldr	r1, [r7, #8]
 80023bc:	f7fe fd0a 	bl	8000dd4 <DrawFilledCircle>
	DrawFilledCircle(base_x + (4 * 12 * s), base_y - (12 * s), (int) (5 * s),
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f7fd ff7d 	bl	80002c0 <__aeabi_i2f>
 80023c6:	4604      	mov	r4, r0
 80023c8:	4921      	ldr	r1, [pc, #132]	@ (8002450 <StartScreen_Draw+0x898>)
 80023ca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80023cc:	f7fd ffcc 	bl	8000368 <__aeabi_fmul>
 80023d0:	4603      	mov	r3, r0
 80023d2:	4619      	mov	r1, r3
 80023d4:	4620      	mov	r0, r4
 80023d6:	f7fd febf 	bl	8000158 <__addsf3>
 80023da:	4603      	mov	r3, r0
 80023dc:	4618      	mov	r0, r3
 80023de:	f7fe f99f 	bl	8000720 <__aeabi_f2iz>
 80023e2:	4604      	mov	r4, r0
 80023e4:	68b8      	ldr	r0, [r7, #8]
 80023e6:	f7fd ff6b 	bl	80002c0 <__aeabi_i2f>
 80023ea:	4605      	mov	r5, r0
 80023ec:	4916      	ldr	r1, [pc, #88]	@ (8002448 <StartScreen_Draw+0x890>)
 80023ee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80023f0:	f7fd ffba 	bl	8000368 <__aeabi_fmul>
 80023f4:	4603      	mov	r3, r0
 80023f6:	4619      	mov	r1, r3
 80023f8:	4628      	mov	r0, r5
 80023fa:	f7fd feab 	bl	8000154 <__aeabi_fsub>
 80023fe:	4603      	mov	r3, r0
 8002400:	4618      	mov	r0, r3
 8002402:	f7fe f98d 	bl	8000720 <__aeabi_f2iz>
 8002406:	4605      	mov	r5, r0
 8002408:	4912      	ldr	r1, [pc, #72]	@ (8002454 <StartScreen_Draw+0x89c>)
 800240a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800240c:	f7fd ffac 	bl	8000368 <__aeabi_fmul>
 8002410:	4603      	mov	r3, r0
 8002412:	4618      	mov	r0, r3
 8002414:	f7fe f984 	bl	8000720 <__aeabi_f2iz>
 8002418:	4602      	mov	r2, r0
 800241a:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 800241e:	4629      	mov	r1, r5
 8002420:	4620      	mov	r0, r4
 8002422:	f7fe fcd7 	bl	8000dd4 <DrawFilledCircle>
	COLOR_ORANGE);

	for (int i = 1; i <= 10; i++)
 8002426:	2301      	movs	r3, #1
 8002428:	633b      	str	r3, [r7, #48]	@ 0x30
 800242a:	e056      	b.n	80024da <StartScreen_Draw+0x922>
 800242c:	42dc0000 	.word	0x42dc0000
 8002430:	08007c4c 	.word	0x08007c4c
 8002434:	08007c50 	.word	0x08007c50
 8002438:	40400000 	.word	0x40400000
 800243c:	40e00000 	.word	0x40e00000
 8002440:	430c0000 	.word	0x430c0000
 8002444:	42c80000 	.word	0x42c80000
 8002448:	41400000 	.word	0x41400000
 800244c:	42c00000 	.word	0x42c00000
 8002450:	42400000 	.word	0x42400000
 8002454:	40a00000 	.word	0x40a00000
		DrawFilledCircle(base_x + (8 * 12 * s) + i * (11 * s),
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f7fd ff31 	bl	80002c0 <__aeabi_i2f>
 800245e:	4604      	mov	r4, r0
 8002460:	49a4      	ldr	r1, [pc, #656]	@ (80026f4 <StartScreen_Draw+0xb3c>)
 8002462:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002464:	f7fd ff80 	bl	8000368 <__aeabi_fmul>
 8002468:	4603      	mov	r3, r0
 800246a:	4619      	mov	r1, r3
 800246c:	4620      	mov	r0, r4
 800246e:	f7fd fe73 	bl	8000158 <__addsf3>
 8002472:	4603      	mov	r3, r0
 8002474:	461d      	mov	r5, r3
 8002476:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002478:	f7fd ff22 	bl	80002c0 <__aeabi_i2f>
 800247c:	4604      	mov	r4, r0
 800247e:	499e      	ldr	r1, [pc, #632]	@ (80026f8 <StartScreen_Draw+0xb40>)
 8002480:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002482:	f7fd ff71 	bl	8000368 <__aeabi_fmul>
 8002486:	4603      	mov	r3, r0
 8002488:	4619      	mov	r1, r3
 800248a:	4620      	mov	r0, r4
 800248c:	f7fd ff6c 	bl	8000368 <__aeabi_fmul>
 8002490:	4603      	mov	r3, r0
 8002492:	4619      	mov	r1, r3
 8002494:	4628      	mov	r0, r5
 8002496:	f7fd fe5f 	bl	8000158 <__addsf3>
 800249a:	4603      	mov	r3, r0
 800249c:	4618      	mov	r0, r3
 800249e:	f7fe f93f 	bl	8000720 <__aeabi_f2iz>
 80024a2:	4604      	mov	r4, r0
				base_y + (12 * s), dot_r, COLOR_ORANGE);
 80024a4:	68b8      	ldr	r0, [r7, #8]
 80024a6:	f7fd ff0b 	bl	80002c0 <__aeabi_i2f>
 80024aa:	4605      	mov	r5, r0
 80024ac:	4993      	ldr	r1, [pc, #588]	@ (80026fc <StartScreen_Draw+0xb44>)
 80024ae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80024b0:	f7fd ff5a 	bl	8000368 <__aeabi_fmul>
 80024b4:	4603      	mov	r3, r0
 80024b6:	4619      	mov	r1, r3
 80024b8:	4628      	mov	r0, r5
 80024ba:	f7fd fe4d 	bl	8000158 <__addsf3>
 80024be:	4603      	mov	r3, r0
		DrawFilledCircle(base_x + (8 * 12 * s) + i * (11 * s),
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7fe f92d 	bl	8000720 <__aeabi_f2iz>
 80024c6:	4601      	mov	r1, r0
 80024c8:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 80024cc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80024ce:	4620      	mov	r0, r4
 80024d0:	f7fe fc80 	bl	8000dd4 <DrawFilledCircle>
	for (int i = 1; i <= 10; i++)
 80024d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024d6:	3301      	adds	r3, #1
 80024d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80024da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024dc:	2b0a      	cmp	r3, #10
 80024de:	ddbb      	ble.n	8002458 <StartScreen_Draw+0x8a0>

	/* 원본은 오른쪽 끝 팩맨(왼쪽 바라보는 형태로 그렸음) — 전체 반전이 적용되어 최종적으로 상하/좌우 뒤집혀 보임 */
	DrawPacman_FlipX(base_x + (8 * 12 * s) + (11 * 11 * s), base_y + (12 * s),
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f7fd feed 	bl	80002c0 <__aeabi_i2f>
 80024e6:	4604      	mov	r4, r0
 80024e8:	4982      	ldr	r1, [pc, #520]	@ (80026f4 <StartScreen_Draw+0xb3c>)
 80024ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80024ec:	f7fd ff3c 	bl	8000368 <__aeabi_fmul>
 80024f0:	4603      	mov	r3, r0
 80024f2:	4619      	mov	r1, r3
 80024f4:	4620      	mov	r0, r4
 80024f6:	f7fd fe2f 	bl	8000158 <__addsf3>
 80024fa:	4603      	mov	r3, r0
 80024fc:	461c      	mov	r4, r3
 80024fe:	4980      	ldr	r1, [pc, #512]	@ (8002700 <StartScreen_Draw+0xb48>)
 8002500:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002502:	f7fd ff31 	bl	8000368 <__aeabi_fmul>
 8002506:	4603      	mov	r3, r0
 8002508:	4619      	mov	r1, r3
 800250a:	4620      	mov	r0, r4
 800250c:	f7fd fe24 	bl	8000158 <__addsf3>
 8002510:	4603      	mov	r3, r0
 8002512:	4618      	mov	r0, r3
 8002514:	f7fe f904 	bl	8000720 <__aeabi_f2iz>
 8002518:	4604      	mov	r4, r0
 800251a:	68b8      	ldr	r0, [r7, #8]
 800251c:	f7fd fed0 	bl	80002c0 <__aeabi_i2f>
 8002520:	4605      	mov	r5, r0
 8002522:	4976      	ldr	r1, [pc, #472]	@ (80026fc <StartScreen_Draw+0xb44>)
 8002524:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002526:	f7fd ff1f 	bl	8000368 <__aeabi_fmul>
 800252a:	4603      	mov	r3, r0
 800252c:	4619      	mov	r1, r3
 800252e:	4628      	mov	r0, r5
 8002530:	f7fd fe12 	bl	8000158 <__addsf3>
 8002534:	4603      	mov	r3, r0
 8002536:	4618      	mov	r0, r3
 8002538:	f7fe f8f2 	bl	8000720 <__aeabi_f2iz>
 800253c:	4605      	mov	r5, r0
			(int) (10 * s), 45.f, COLOR_YELLOW, COLOR_BLACK);
 800253e:	4971      	ldr	r1, [pc, #452]	@ (8002704 <StartScreen_Draw+0xb4c>)
 8002540:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002542:	f7fd ff11 	bl	8000368 <__aeabi_fmul>
 8002546:	4603      	mov	r3, r0
	DrawPacman_FlipX(base_x + (8 * 12 * s) + (11 * 11 * s), base_y + (12 * s),
 8002548:	4618      	mov	r0, r3
 800254a:	f7fe f8e9 	bl	8000720 <__aeabi_f2iz>
 800254e:	4602      	mov	r2, r0
 8002550:	2300      	movs	r3, #0
 8002552:	9301      	str	r3, [sp, #4]
 8002554:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	4b6b      	ldr	r3, [pc, #428]	@ (8002708 <StartScreen_Draw+0xb50>)
 800255c:	4629      	mov	r1, r5
 800255e:	4620      	mov	r0, r4
 8002560:	f7fe ffce 	bl	8001500 <DrawPacman_FlipX>

	/* 유령들 */
	DrawGhost(x0 + (75 * s), y0 + (120 * s), (24 * s), (18 * s), COLOR_CYAN,
 8002564:	69b8      	ldr	r0, [r7, #24]
 8002566:	f7fd feab 	bl	80002c0 <__aeabi_i2f>
 800256a:	4604      	mov	r4, r0
 800256c:	4967      	ldr	r1, [pc, #412]	@ (800270c <StartScreen_Draw+0xb54>)
 800256e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002570:	f7fd fefa 	bl	8000368 <__aeabi_fmul>
 8002574:	4603      	mov	r3, r0
 8002576:	4619      	mov	r1, r3
 8002578:	4620      	mov	r0, r4
 800257a:	f7fd fded 	bl	8000158 <__addsf3>
 800257e:	4603      	mov	r3, r0
 8002580:	4618      	mov	r0, r3
 8002582:	f7fe f8cd 	bl	8000720 <__aeabi_f2iz>
 8002586:	4604      	mov	r4, r0
 8002588:	6978      	ldr	r0, [r7, #20]
 800258a:	f7fd fe99 	bl	80002c0 <__aeabi_i2f>
 800258e:	4605      	mov	r5, r0
 8002590:	495f      	ldr	r1, [pc, #380]	@ (8002710 <StartScreen_Draw+0xb58>)
 8002592:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002594:	f7fd fee8 	bl	8000368 <__aeabi_fmul>
 8002598:	4603      	mov	r3, r0
 800259a:	4619      	mov	r1, r3
 800259c:	4628      	mov	r0, r5
 800259e:	f7fd fddb 	bl	8000158 <__addsf3>
 80025a2:	4603      	mov	r3, r0
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7fe f8bb 	bl	8000720 <__aeabi_f2iz>
 80025aa:	4605      	mov	r5, r0
 80025ac:	4959      	ldr	r1, [pc, #356]	@ (8002714 <StartScreen_Draw+0xb5c>)
 80025ae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80025b0:	f7fd feda 	bl	8000368 <__aeabi_fmul>
 80025b4:	4603      	mov	r3, r0
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7fe f8b2 	bl	8000720 <__aeabi_f2iz>
 80025bc:	4606      	mov	r6, r0
 80025be:	4956      	ldr	r1, [pc, #344]	@ (8002718 <StartScreen_Draw+0xb60>)
 80025c0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80025c2:	f7fd fed1 	bl	8000368 <__aeabi_fmul>
 80025c6:	4603      	mov	r3, r0
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7fe f8a9 	bl	8000720 <__aeabi_f2iz>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2200      	movs	r2, #0
 80025d2:	9201      	str	r2, [sp, #4]
 80025d4:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80025d8:	9200      	str	r2, [sp, #0]
 80025da:	4632      	mov	r2, r6
 80025dc:	4629      	mov	r1, r5
 80025de:	4620      	mov	r0, r4
 80025e0:	f7ff f974 	bl	80018cc <DrawGhost>
	COLOR_BLACK);
	DrawGhost(x0 + (180 * s), y0 + (185 * s), (24 * s), (18 * s), COLOR_RED,
 80025e4:	69b8      	ldr	r0, [r7, #24]
 80025e6:	f7fd fe6b 	bl	80002c0 <__aeabi_i2f>
 80025ea:	4604      	mov	r4, r0
 80025ec:	494b      	ldr	r1, [pc, #300]	@ (800271c <StartScreen_Draw+0xb64>)
 80025ee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80025f0:	f7fd feba 	bl	8000368 <__aeabi_fmul>
 80025f4:	4603      	mov	r3, r0
 80025f6:	4619      	mov	r1, r3
 80025f8:	4620      	mov	r0, r4
 80025fa:	f7fd fdad 	bl	8000158 <__addsf3>
 80025fe:	4603      	mov	r3, r0
 8002600:	4618      	mov	r0, r3
 8002602:	f7fe f88d 	bl	8000720 <__aeabi_f2iz>
 8002606:	4604      	mov	r4, r0
 8002608:	6978      	ldr	r0, [r7, #20]
 800260a:	f7fd fe59 	bl	80002c0 <__aeabi_i2f>
 800260e:	4605      	mov	r5, r0
 8002610:	4943      	ldr	r1, [pc, #268]	@ (8002720 <StartScreen_Draw+0xb68>)
 8002612:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002614:	f7fd fea8 	bl	8000368 <__aeabi_fmul>
 8002618:	4603      	mov	r3, r0
 800261a:	4619      	mov	r1, r3
 800261c:	4628      	mov	r0, r5
 800261e:	f7fd fd9b 	bl	8000158 <__addsf3>
 8002622:	4603      	mov	r3, r0
 8002624:	4618      	mov	r0, r3
 8002626:	f7fe f87b 	bl	8000720 <__aeabi_f2iz>
 800262a:	4605      	mov	r5, r0
 800262c:	4939      	ldr	r1, [pc, #228]	@ (8002714 <StartScreen_Draw+0xb5c>)
 800262e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002630:	f7fd fe9a 	bl	8000368 <__aeabi_fmul>
 8002634:	4603      	mov	r3, r0
 8002636:	4618      	mov	r0, r3
 8002638:	f7fe f872 	bl	8000720 <__aeabi_f2iz>
 800263c:	4606      	mov	r6, r0
 800263e:	4936      	ldr	r1, [pc, #216]	@ (8002718 <StartScreen_Draw+0xb60>)
 8002640:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002642:	f7fd fe91 	bl	8000368 <__aeabi_fmul>
 8002646:	4603      	mov	r3, r0
 8002648:	4618      	mov	r0, r3
 800264a:	f7fe f869 	bl	8000720 <__aeabi_f2iz>
 800264e:	4603      	mov	r3, r0
 8002650:	2200      	movs	r2, #0
 8002652:	9201      	str	r2, [sp, #4]
 8002654:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002658:	9200      	str	r2, [sp, #0]
 800265a:	4632      	mov	r2, r6
 800265c:	4629      	mov	r1, r5
 800265e:	4620      	mov	r0, r4
 8002660:	f7ff f934 	bl	80018cc <DrawGhost>
	COLOR_BLACK);
	DrawGhost(x0 + (315 * s), y0 + (115 * s), (24 * s), (18 * s), COLOR_PINK,
 8002664:	69b8      	ldr	r0, [r7, #24]
 8002666:	f7fd fe2b 	bl	80002c0 <__aeabi_i2f>
 800266a:	4604      	mov	r4, r0
 800266c:	492d      	ldr	r1, [pc, #180]	@ (8002724 <StartScreen_Draw+0xb6c>)
 800266e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002670:	f7fd fe7a 	bl	8000368 <__aeabi_fmul>
 8002674:	4603      	mov	r3, r0
 8002676:	4619      	mov	r1, r3
 8002678:	4620      	mov	r0, r4
 800267a:	f7fd fd6d 	bl	8000158 <__addsf3>
 800267e:	4603      	mov	r3, r0
 8002680:	4618      	mov	r0, r3
 8002682:	f7fe f84d 	bl	8000720 <__aeabi_f2iz>
 8002686:	4604      	mov	r4, r0
 8002688:	6978      	ldr	r0, [r7, #20]
 800268a:	f7fd fe19 	bl	80002c0 <__aeabi_i2f>
 800268e:	4605      	mov	r5, r0
 8002690:	4925      	ldr	r1, [pc, #148]	@ (8002728 <StartScreen_Draw+0xb70>)
 8002692:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002694:	f7fd fe68 	bl	8000368 <__aeabi_fmul>
 8002698:	4603      	mov	r3, r0
 800269a:	4619      	mov	r1, r3
 800269c:	4628      	mov	r0, r5
 800269e:	f7fd fd5b 	bl	8000158 <__addsf3>
 80026a2:	4603      	mov	r3, r0
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7fe f83b 	bl	8000720 <__aeabi_f2iz>
 80026aa:	4605      	mov	r5, r0
 80026ac:	4919      	ldr	r1, [pc, #100]	@ (8002714 <StartScreen_Draw+0xb5c>)
 80026ae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80026b0:	f7fd fe5a 	bl	8000368 <__aeabi_fmul>
 80026b4:	4603      	mov	r3, r0
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7fe f832 	bl	8000720 <__aeabi_f2iz>
 80026bc:	4606      	mov	r6, r0
 80026be:	4916      	ldr	r1, [pc, #88]	@ (8002718 <StartScreen_Draw+0xb60>)
 80026c0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80026c2:	f7fd fe51 	bl	8000368 <__aeabi_fmul>
 80026c6:	4603      	mov	r3, r0
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7fe f829 	bl	8000720 <__aeabi_f2iz>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2200      	movs	r2, #0
 80026d2:	9201      	str	r2, [sp, #4]
 80026d4:	f64f 32eb 	movw	r2, #64491	@ 0xfbeb
 80026d8:	9200      	str	r2, [sp, #0]
 80026da:	4632      	mov	r2, r6
 80026dc:	4629      	mov	r1, r5
 80026de:	4620      	mov	r0, r4
 80026e0:	f7ff f8f4 	bl	80018cc <DrawGhost>
	COLOR_BLACK);

	/* 반전 OFF (이후 화면에는 영향 없음) */
	g_mirror_xy = 0;
 80026e4:	4b11      	ldr	r3, [pc, #68]	@ (800272c <StartScreen_Draw+0xb74>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	701a      	strb	r2, [r3, #0]
}
 80026ea:	bf00      	nop
 80026ec:	3748      	adds	r7, #72	@ 0x48
 80026ee:	46bd      	mov	sp, r7
 80026f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80026f4:	42c00000 	.word	0x42c00000
 80026f8:	41300000 	.word	0x41300000
 80026fc:	41400000 	.word	0x41400000
 8002700:	42f20000 	.word	0x42f20000
 8002704:	41200000 	.word	0x41200000
 8002708:	42340000 	.word	0x42340000
 800270c:	42960000 	.word	0x42960000
 8002710:	42f00000 	.word	0x42f00000
 8002714:	41c00000 	.word	0x41c00000
 8002718:	41900000 	.word	0x41900000
 800271c:	43340000 	.word	0x43340000
 8002720:	43390000 	.word	0x43390000
 8002724:	439d8000 	.word	0x439d8000
 8002728:	42e60000 	.word	0x42e60000
 800272c:	200002b4 	.word	0x200002b4

08002730 <ds_lcg>:

//StartScreen_Draw 함수 뒤에 넣기

/* --- DeadScreen 전용 LCG 난수 --- */
static uint32_t ds_seed = 0x13572468u;
static inline uint32_t ds_lcg(void) {
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
	ds_seed = ds_seed * 1664525u + 1013904223u;
 8002734:	4b07      	ldr	r3, [pc, #28]	@ (8002754 <ds_lcg+0x24>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a07      	ldr	r2, [pc, #28]	@ (8002758 <ds_lcg+0x28>)
 800273a:	fb03 f202 	mul.w	r2, r3, r2
 800273e:	4b07      	ldr	r3, [pc, #28]	@ (800275c <ds_lcg+0x2c>)
 8002740:	4413      	add	r3, r2
 8002742:	4a04      	ldr	r2, [pc, #16]	@ (8002754 <ds_lcg+0x24>)
 8002744:	6013      	str	r3, [r2, #0]
	return ds_seed;
 8002746:	4b03      	ldr	r3, [pc, #12]	@ (8002754 <ds_lcg+0x24>)
 8002748:	681b      	ldr	r3, [r3, #0]
}
 800274a:	4618      	mov	r0, r3
 800274c:	46bd      	mov	sp, r7
 800274e:	bc80      	pop	{r7}
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	20000160 	.word	0x20000160
 8002758:	0019660d 	.word	0x0019660d
 800275c:	3c6ef35f 	.word	0x3c6ef35f

08002760 <PutDashH>:

/* --- 작은 가로 대시(‘-’) 찍기: 중심(xc,yc), 길이 len, 두께 th --- */
static inline void PutDashH(int xc, int yc, int len, int th, uint16_t col) {
 8002760:	b590      	push	{r4, r7, lr}
 8002762:	b089      	sub	sp, #36	@ 0x24
 8002764:	af02      	add	r7, sp, #8
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
 800276c:	603b      	str	r3, [r7, #0]
	if (len < 1)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2b00      	cmp	r3, #0
 8002772:	dc01      	bgt.n	8002778 <PutDashH+0x18>
		len = 1;
 8002774:	2301      	movs	r3, #1
 8002776:	607b      	str	r3, [r7, #4]
	if (th < 1)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	2b00      	cmp	r3, #0
 800277c:	dc01      	bgt.n	8002782 <PutDashH+0x22>
		th = 1;
 800277e:	2301      	movs	r3, #1
 8002780:	603b      	str	r3, [r7, #0]
	int x0 = xc - len / 2;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	0fda      	lsrs	r2, r3, #31
 8002786:	4413      	add	r3, r2
 8002788:	105b      	asrs	r3, r3, #1
 800278a:	425b      	negs	r3, r3
 800278c:	461a      	mov	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	4413      	add	r3, r2
 8002792:	617b      	str	r3, [r7, #20]
	int y0 = yc - th / 2;
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	0fda      	lsrs	r2, r3, #31
 8002798:	4413      	add	r3, r2
 800279a:	105b      	asrs	r3, r3, #1
 800279c:	425b      	negs	r3, r3
 800279e:	461a      	mov	r2, r3
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	4413      	add	r3, r2
 80027a4:	613b      	str	r3, [r7, #16]
	if (x0 < 0) {
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	da05      	bge.n	80027b8 <PutDashH+0x58>
		len -= -x0;
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	4413      	add	r3, r2
 80027b2:	607b      	str	r3, [r7, #4]
		x0 = 0;
 80027b4:	2300      	movs	r3, #0
 80027b6:	617b      	str	r3, [r7, #20]
	}
	if (y0 < 0) {
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	da05      	bge.n	80027ca <PutDashH+0x6a>
		th -= -y0;
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	4413      	add	r3, r2
 80027c4:	603b      	str	r3, [r7, #0]
		y0 = 0;
 80027c6:	2300      	movs	r3, #0
 80027c8:	613b      	str	r3, [r7, #16]
	}
	if (x0 + len > LCD_WIDTH)
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4413      	add	r3, r2
 80027d0:	2bf0      	cmp	r3, #240	@ 0xf0
 80027d2:	dd03      	ble.n	80027dc <PutDashH+0x7c>
		len = LCD_WIDTH - x0;
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80027da:	607b      	str	r3, [r7, #4]
	if (y0 + th > LCD_HEIGHT)
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	4413      	add	r3, r2
 80027e2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80027e6:	dd03      	ble.n	80027f0 <PutDashH+0x90>
		th = LCD_HEIGHT - y0;
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 80027ee:	603b      	str	r3, [r7, #0]
	if (len > 0 && th > 0)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	dd0f      	ble.n	8002816 <PutDashH+0xb6>
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	dd0c      	ble.n	8002816 <PutDashH+0xb6>
		ILI9341_FillRect(x0, y0, len, th, col);
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	b298      	uxth	r0, r3
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	b299      	uxth	r1, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	b29a      	uxth	r2, r3
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	b29c      	uxth	r4, r3
 800280c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	4623      	mov	r3, r4
 8002812:	f7fe f90a 	bl	8000a2a <ILI9341_FillRect>
}
 8002816:	bf00      	nop
 8002818:	371c      	adds	r7, #28
 800281a:	46bd      	mov	sp, r7
 800281c:	bd90      	pop	{r4, r7, pc}
	...

08002820 <DeadScreen_Draw>:

/* ===== 사망 폭발: '-' 대시가 링처럼 퍼지고, 중심부터 서서히 사라짐 ===== */
static void DeadScreen_Draw(void) {
 8002820:	b590      	push	{r4, r7, lr}
 8002822:	b0a3      	sub	sp, #140	@ 0x8c
 8002824:	af02      	add	r7, sp, #8

	/* 폭발 중심: 팩맨 현재 픽셀 좌표 */
	const int cx = pacman.x * GRID_SIZE + GRID_SIZE / 2;
 8002826:	4ba1      	ldr	r3, [pc, #644]	@ (8002aac <DeadScreen_Draw+0x28c>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	011b      	lsls	r3, r3, #4
 800282c:	3308      	adds	r3, #8
 800282e:	65fb      	str	r3, [r7, #92]	@ 0x5c
	const int cy = pacman.y * GRID_SIZE + GRID_SIZE / 2;
 8002830:	4b9e      	ldr	r3, [pc, #632]	@ (8002aac <DeadScreen_Draw+0x28c>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	011b      	lsls	r3, r3, #4
 8002836:	3308      	adds	r3, #8
 8002838:	65bb      	str	r3, [r7, #88]	@ 0x58
	/* 반경: 화면 전체의 약 90%까지 허용 */
	const int full = (LCD_WIDTH < LCD_HEIGHT ? LCD_WIDTH : LCD_HEIGHT) * 0.9f;
 800283a:	23d8      	movs	r3, #216	@ 0xd8
 800283c:	657b      	str	r3, [r7, #84]	@ 0x54

	int roomL = cx, roomR = LCD_WIDTH - 1 - cx;
 800283e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002840:	653b      	str	r3, [r7, #80]	@ 0x50
 8002842:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002844:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002848:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int roomT = cy, roomB = LCD_HEIGHT - 1 - cy;
 800284a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800284c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800284e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002850:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002854:	3301      	adds	r3, #1
 8002856:	647b      	str	r3, [r7, #68]	@ 0x44
	int edgeLimited = roomL;
 8002858:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800285a:	67fb      	str	r3, [r7, #124]	@ 0x7c
	if (roomR < edgeLimited)
 800285c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800285e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002860:	429a      	cmp	r2, r3
 8002862:	da01      	bge.n	8002868 <DeadScreen_Draw+0x48>
		edgeLimited = roomR;
 8002864:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002866:	67fb      	str	r3, [r7, #124]	@ 0x7c
	if (roomT < edgeLimited)
 8002868:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800286a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800286c:	429a      	cmp	r2, r3
 800286e:	da01      	bge.n	8002874 <DeadScreen_Draw+0x54>
		edgeLimited = roomT;
 8002870:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002872:	67fb      	str	r3, [r7, #124]	@ 0x7c
	if (roomB < edgeLimited)
 8002874:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002876:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002878:	429a      	cmp	r2, r3
 800287a:	da01      	bge.n	8002880 <DeadScreen_Draw+0x60>
		edgeLimited = roomB;
 800287c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800287e:	67fb      	str	r3, [r7, #124]	@ 0x7c

	/* 두 배 정도 넓힌 폭발 반경 */
	const int maxr = (edgeLimited < full ? edgeLimited : (int) full);
 8002880:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002882:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002884:	4293      	cmp	r3, r2
 8002886:	bfa8      	it	ge
 8002888:	4613      	movge	r3, r2
 800288a:	643b      	str	r3, [r7, #64]	@ 0x40

	/* 파라미터 */
	const int step_r = 3;          // 반경 증가 속도
 800288c:	2303      	movs	r3, #3
 800288e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	const int frame_delay_ms = 10; // 프레임 간 딜레이
 8002890:	230a      	movs	r3, #10
 8002892:	63bb      	str	r3, [r7, #56]	@ 0x38

	/* 화면 어둡게 시작 */
	ILI9341_FillRect(0, 0, LCD_WIDTH, LCD_HEIGHT, COLOR_BLACK);
 8002894:	2300      	movs	r3, #0
 8002896:	9300      	str	r3, [sp, #0]
 8002898:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800289c:	22f0      	movs	r2, #240	@ 0xf0
 800289e:	2100      	movs	r1, #0
 80028a0:	2000      	movs	r0, #0
 80028a2:	f7fe f8c2 	bl	8000a2a <ILI9341_FillRect>

	/* 1) 중심에서 바깥으로: '-' 대시 링을 뿌린다 */
	for (int r = 0; r <= maxr; r += step_r) {
 80028a6:	2300      	movs	r3, #0
 80028a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80028aa:	e13c      	b.n	8002b26 <DeadScreen_Draw+0x306>
		/* 색상 그라데이션: 노랑 → 오렌지 → 빨강 */
		uint16_t col = (r < (int) (maxr * 0.35f)) ? COLOR_YELLOW :
 80028ac:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80028ae:	f7fd fd07 	bl	80002c0 <__aeabi_i2f>
 80028b2:	4603      	mov	r3, r0
 80028b4:	497e      	ldr	r1, [pc, #504]	@ (8002ab0 <DeadScreen_Draw+0x290>)
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7fd fd56 	bl	8000368 <__aeabi_fmul>
 80028bc:	4603      	mov	r3, r0
 80028be:	4618      	mov	r0, r3
 80028c0:	f7fd ff2e 	bl	8000720 <__aeabi_f2iz>
 80028c4:	4602      	mov	r2, r0
 80028c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80028c8:	4293      	cmp	r3, r2
 80028ca:	db15      	blt.n	80028f8 <DeadScreen_Draw+0xd8>
						(r < (int) (maxr * 0.70f)) ? COLOR_ORANGE : COLOR_RED;
 80028cc:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80028ce:	f7fd fcf7 	bl	80002c0 <__aeabi_i2f>
 80028d2:	4603      	mov	r3, r0
 80028d4:	4977      	ldr	r1, [pc, #476]	@ (8002ab4 <DeadScreen_Draw+0x294>)
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7fd fd46 	bl	8000368 <__aeabi_fmul>
 80028dc:	4603      	mov	r3, r0
 80028de:	4618      	mov	r0, r3
 80028e0:	f7fd ff1e 	bl	8000720 <__aeabi_f2iz>
 80028e4:	4602      	mov	r2, r0
		uint16_t col = (r < (int) (maxr * 0.35f)) ? COLOR_YELLOW :
 80028e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80028e8:	4293      	cmp	r3, r2
 80028ea:	da02      	bge.n	80028f2 <DeadScreen_Draw+0xd2>
 80028ec:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 80028f0:	e004      	b.n	80028fc <DeadScreen_Draw+0xdc>
 80028f2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80028f6:	e001      	b.n	80028fc <DeadScreen_Draw+0xdc>
 80028f8:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80028fc:	857b      	strh	r3, [r7, #42]	@ 0x2a

		/* 링 위 대시 개수(둘레 비례, 하한 10) */
		int count = 8 + (int) ((2.f * 3.1415926f * r) / 12.f);
 80028fe:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8002900:	f7fd fcde 	bl	80002c0 <__aeabi_i2f>
 8002904:	4603      	mov	r3, r0
 8002906:	496c      	ldr	r1, [pc, #432]	@ (8002ab8 <DeadScreen_Draw+0x298>)
 8002908:	4618      	mov	r0, r3
 800290a:	f7fd fd2d 	bl	8000368 <__aeabi_fmul>
 800290e:	4603      	mov	r3, r0
 8002910:	496a      	ldr	r1, [pc, #424]	@ (8002abc <DeadScreen_Draw+0x29c>)
 8002912:	4618      	mov	r0, r3
 8002914:	f7fd fddc 	bl	80004d0 <__aeabi_fdiv>
 8002918:	4603      	mov	r3, r0
 800291a:	4618      	mov	r0, r3
 800291c:	f7fd ff00 	bl	8000720 <__aeabi_f2iz>
 8002920:	4603      	mov	r3, r0
 8002922:	3308      	adds	r3, #8
 8002924:	677b      	str	r3, [r7, #116]	@ 0x74
		if (count < 10)
 8002926:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002928:	2b09      	cmp	r3, #9
 800292a:	dc01      	bgt.n	8002930 <DeadScreen_Draw+0x110>
			count = 10;
 800292c:	230a      	movs	r3, #10
 800292e:	677b      	str	r3, [r7, #116]	@ 0x74

		for (int i = 0; i < count; ++i) {
 8002930:	2300      	movs	r3, #0
 8002932:	673b      	str	r3, [r7, #112]	@ 0x70
 8002934:	e081      	b.n	8002a3a <DeadScreen_Draw+0x21a>
			float base = (2.f * 3.1415926f * i) / (float) count;
 8002936:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002938:	f7fd fcc2 	bl	80002c0 <__aeabi_i2f>
 800293c:	4603      	mov	r3, r0
 800293e:	495e      	ldr	r1, [pc, #376]	@ (8002ab8 <DeadScreen_Draw+0x298>)
 8002940:	4618      	mov	r0, r3
 8002942:	f7fd fd11 	bl	8000368 <__aeabi_fmul>
 8002946:	4603      	mov	r3, r0
 8002948:	461c      	mov	r4, r3
 800294a:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800294c:	f7fd fcb8 	bl	80002c0 <__aeabi_i2f>
 8002950:	4603      	mov	r3, r0
 8002952:	4619      	mov	r1, r3
 8002954:	4620      	mov	r0, r4
 8002956:	f7fd fdbb 	bl	80004d0 <__aeabi_fdiv>
 800295a:	4603      	mov	r3, r0
 800295c:	61bb      	str	r3, [r7, #24]
			/* 각도/반경에 약간 지터(±1~2° 수준) */
			float jitter = ((int) (ds_lcg() % 61) - 30) * (3.1415926f / 1800.f);
 800295e:	f7ff fee7 	bl	8002730 <ds_lcg>
 8002962:	4601      	mov	r1, r0
 8002964:	4b56      	ldr	r3, [pc, #344]	@ (8002ac0 <DeadScreen_Draw+0x2a0>)
 8002966:	fba3 2301 	umull	r2, r3, r3, r1
 800296a:	091a      	lsrs	r2, r3, #4
 800296c:	4613      	mov	r3, r2
 800296e:	011b      	lsls	r3, r3, #4
 8002970:	1a9b      	subs	r3, r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	1aca      	subs	r2, r1, r3
 8002978:	4613      	mov	r3, r2
 800297a:	3b1e      	subs	r3, #30
 800297c:	4618      	mov	r0, r3
 800297e:	f7fd fc9f 	bl	80002c0 <__aeabi_i2f>
 8002982:	4603      	mov	r3, r0
 8002984:	494f      	ldr	r1, [pc, #316]	@ (8002ac4 <DeadScreen_Draw+0x2a4>)
 8002986:	4618      	mov	r0, r3
 8002988:	f7fd fcee 	bl	8000368 <__aeabi_fmul>
 800298c:	4603      	mov	r3, r0
 800298e:	617b      	str	r3, [r7, #20]
			float a = base + jitter;
 8002990:	6979      	ldr	r1, [r7, #20]
 8002992:	69b8      	ldr	r0, [r7, #24]
 8002994:	f7fd fbe0 	bl	8000158 <__addsf3>
 8002998:	4603      	mov	r3, r0
 800299a:	613b      	str	r3, [r7, #16]

			int x = cx + (int) (r * cosf(a));
 800299c:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 800299e:	f7fd fc8f 	bl	80002c0 <__aeabi_i2f>
 80029a2:	4604      	mov	r4, r0
 80029a4:	6938      	ldr	r0, [r7, #16]
 80029a6:	f004 fad5 	bl	8006f54 <cosf>
 80029aa:	4603      	mov	r3, r0
 80029ac:	4619      	mov	r1, r3
 80029ae:	4620      	mov	r0, r4
 80029b0:	f7fd fcda 	bl	8000368 <__aeabi_fmul>
 80029b4:	4603      	mov	r3, r0
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7fd feb2 	bl	8000720 <__aeabi_f2iz>
 80029bc:	4602      	mov	r2, r0
 80029be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029c0:	4413      	add	r3, r2
 80029c2:	60fb      	str	r3, [r7, #12]
			int y = cy + (int) (r * sinf(a));
 80029c4:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80029c6:	f7fd fc7b 	bl	80002c0 <__aeabi_i2f>
 80029ca:	4604      	mov	r4, r0
 80029cc:	6938      	ldr	r0, [r7, #16]
 80029ce:	f004 faf9 	bl	8006fc4 <sinf>
 80029d2:	4603      	mov	r3, r0
 80029d4:	4619      	mov	r1, r3
 80029d6:	4620      	mov	r0, r4
 80029d8:	f7fd fcc6 	bl	8000368 <__aeabi_fmul>
 80029dc:	4603      	mov	r3, r0
 80029de:	4618      	mov	r0, r3
 80029e0:	f7fd fe9e 	bl	8000720 <__aeabi_f2iz>
 80029e4:	4602      	mov	r2, r0
 80029e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029e8:	4413      	add	r3, r2
 80029ea:	60bb      	str	r3, [r7, #8]

			/* 대시 길이/두께를 살짝 랜덤화 (길이 4~8, 두께 1~2) */
			int len = 4 + (int) (ds_lcg() % 5);       // 4..8
 80029ec:	f7ff fea0 	bl	8002730 <ds_lcg>
 80029f0:	4601      	mov	r1, r0
 80029f2:	4b35      	ldr	r3, [pc, #212]	@ (8002ac8 <DeadScreen_Draw+0x2a8>)
 80029f4:	fba3 2301 	umull	r2, r3, r3, r1
 80029f8:	089a      	lsrs	r2, r3, #2
 80029fa:	4613      	mov	r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	4413      	add	r3, r2
 8002a00:	1aca      	subs	r2, r1, r3
 8002a02:	4613      	mov	r3, r2
 8002a04:	3304      	adds	r3, #4
 8002a06:	607b      	str	r3, [r7, #4]
			int th = 1 + (int) (ds_lcg() & 1);       // 1..2
 8002a08:	f7ff fe92 	bl	8002730 <ds_lcg>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	3301      	adds	r3, #1
 8002a14:	603b      	str	r3, [r7, #0]

			/* 가로 대시로 찍기(‘-’ 느낌). 방향은 모두 수평로 통일 */
			if ((unsigned) x < LCD_WIDTH && (unsigned) y < LCD_HEIGHT)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2bef      	cmp	r3, #239	@ 0xef
 8002a1a:	d80b      	bhi.n	8002a34 <DeadScreen_Draw+0x214>
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002a22:	d207      	bcs.n	8002a34 <DeadScreen_Draw+0x214>
				PutDashH(x, y, len, th, col);
 8002a24:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002a26:	9300      	str	r3, [sp, #0]
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	68b9      	ldr	r1, [r7, #8]
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f7ff fe96 	bl	8002760 <PutDashH>
		for (int i = 0; i < count; ++i) {
 8002a34:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a36:	3301      	adds	r3, #1
 8002a38:	673b      	str	r3, [r7, #112]	@ 0x70
 8002a3a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002a3c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	f6ff af79 	blt.w	8002936 <DeadScreen_Draw+0x116>
		}

		/* 중심을 조금씩 비워 ‘산산이’ 느낌 */
		if ((r % (step_r * 2)) == 0) {
 8002a44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a46:	005a      	lsls	r2, r3, #1
 8002a48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a4a:	fb93 f1f2 	sdiv	r1, r3, r2
 8002a4e:	fb01 f202 	mul.w	r2, r1, r2
 8002a52:	1a9b      	subs	r3, r3, r2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d15e      	bne.n	8002b16 <DeadScreen_Draw+0x2f6>
			int holes = count / 4;
 8002a58:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	da00      	bge.n	8002a60 <DeadScreen_Draw+0x240>
 8002a5e:	3303      	adds	r3, #3
 8002a60:	109b      	asrs	r3, r3, #2
 8002a62:	627b      	str	r3, [r7, #36]	@ 0x24
			for (int k = 0; k < holes; ++k) {
 8002a64:	2300      	movs	r3, #0
 8002a66:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002a68:	e051      	b.n	8002b0e <DeadScreen_Draw+0x2ee>
				int rx = cx + ((int) ds_lcg() % (r ? r : 1)) - r / 2;
 8002a6a:	f7ff fe61 	bl	8002730 <ds_lcg>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	461a      	mov	r2, r3
 8002a72:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <DeadScreen_Draw+0x25c>
 8002a78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a7a:	e000      	b.n	8002a7e <DeadScreen_Draw+0x25e>
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	fb92 f1f3 	sdiv	r1, r2, r3
 8002a82:	fb01 f303 	mul.w	r3, r1, r3
 8002a86:	1ad2      	subs	r2, r2, r3
 8002a88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a8a:	441a      	add	r2, r3
 8002a8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a8e:	0fd9      	lsrs	r1, r3, #31
 8002a90:	440b      	add	r3, r1
 8002a92:	105b      	asrs	r3, r3, #1
 8002a94:	425b      	negs	r3, r3
 8002a96:	4413      	add	r3, r2
 8002a98:	623b      	str	r3, [r7, #32]
				int ry = cy + ((int) ds_lcg() % (r ? r : 1)) - r / 2;
 8002a9a:	f7ff fe49 	bl	8002730 <ds_lcg>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d011      	beq.n	8002acc <DeadScreen_Draw+0x2ac>
 8002aa8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002aaa:	e010      	b.n	8002ace <DeadScreen_Draw+0x2ae>
 8002aac:	20000000 	.word	0x20000000
 8002ab0:	3eb33333 	.word	0x3eb33333
 8002ab4:	3f333333 	.word	0x3f333333
 8002ab8:	40c90fda 	.word	0x40c90fda
 8002abc:	41400000 	.word	0x41400000
 8002ac0:	4325c53f 	.word	0x4325c53f
 8002ac4:	3ae4c387 	.word	0x3ae4c387
 8002ac8:	cccccccd 	.word	0xcccccccd
 8002acc:	2301      	movs	r3, #1
 8002ace:	fb92 f1f3 	sdiv	r1, r2, r3
 8002ad2:	fb01 f303 	mul.w	r3, r1, r3
 8002ad6:	1ad2      	subs	r2, r2, r3
 8002ad8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ada:	441a      	add	r2, r3
 8002adc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ade:	0fd9      	lsrs	r1, r3, #31
 8002ae0:	440b      	add	r3, r1
 8002ae2:	105b      	asrs	r3, r3, #1
 8002ae4:	425b      	negs	r3, r3
 8002ae6:	4413      	add	r3, r2
 8002ae8:	61fb      	str	r3, [r7, #28]
				if ((unsigned) rx < LCD_WIDTH && (unsigned) ry < LCD_HEIGHT)
 8002aea:	6a3b      	ldr	r3, [r7, #32]
 8002aec:	2bef      	cmp	r3, #239	@ 0xef
 8002aee:	d80b      	bhi.n	8002b08 <DeadScreen_Draw+0x2e8>
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002af6:	d207      	bcs.n	8002b08 <DeadScreen_Draw+0x2e8>
					ILI9341_DrawPixel(rx, ry, COLOR_BLACK);
 8002af8:	6a3b      	ldr	r3, [r7, #32]
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	69fa      	ldr	r2, [r7, #28]
 8002afe:	b291      	uxth	r1, r2
 8002b00:	2200      	movs	r2, #0
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7fd ff72 	bl	80009ec <ILI9341_DrawPixel>
			for (int k = 0; k < holes; ++k) {
 8002b08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002b0e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b12:	429a      	cmp	r2, r3
 8002b14:	dba9      	blt.n	8002a6a <DeadScreen_Draw+0x24a>
			}
		}

		HAL_Delay(frame_delay_ms);
 8002b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f001 feab 	bl	8004874 <HAL_Delay>
	for (int r = 0; r <= maxr; r += step_r) {
 8002b1e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8002b20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b22:	4413      	add	r3, r2
 8002b24:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002b26:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8002b28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	f77f aebe 	ble.w	80028ac <DeadScreen_Draw+0x8c>
	}

	/* 2) 페이드아웃: 중심에서부터 검정 원을 키워가며 지운다 */
	for (int er = 2; er <= maxr; er += 3) {
 8002b30:	2302      	movs	r3, #2
 8002b32:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b34:	e00b      	b.n	8002b4e <DeadScreen_Draw+0x32e>
		DrawFilledCircle(cx, cy, er, COLOR_BLACK);   // 가운데부터 서서히 사라짐
 8002b36:	2300      	movs	r3, #0
 8002b38:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002b3a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002b3c:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8002b3e:	f7fe f949 	bl	8000dd4 <DrawFilledCircle>
		HAL_Delay(12);
 8002b42:	200c      	movs	r0, #12
 8002b44:	f001 fe96 	bl	8004874 <HAL_Delay>
	for (int er = 2; er <= maxr; er += 3) {
 8002b48:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b4a:	3303      	adds	r3, #3
 8002b4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b4e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002b50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b52:	429a      	cmp	r2, r3
 8002b54:	ddef      	ble.n	8002b36 <DeadScreen_Draw+0x316>
	}

	/* 3) 잔여 점수 정리(조금의 랜덤 블랙 스플랫) */
	for (int t = 0; t < 3; ++t) {
 8002b56:	2300      	movs	r3, #0
 8002b58:	667b      	str	r3, [r7, #100]	@ 0x64
 8002b5a:	e040      	b.n	8002bde <DeadScreen_Draw+0x3be>
		int n = 60 + (ds_lcg() % 40);
 8002b5c:	f7ff fde8 	bl	8002730 <ds_lcg>
 8002b60:	4601      	mov	r1, r0
 8002b62:	4b23      	ldr	r3, [pc, #140]	@ (8002bf0 <DeadScreen_Draw+0x3d0>)
 8002b64:	fba3 2301 	umull	r2, r3, r3, r1
 8002b68:	095a      	lsrs	r2, r3, #5
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	4413      	add	r3, r2
 8002b70:	00db      	lsls	r3, r3, #3
 8002b72:	1aca      	subs	r2, r1, r3
 8002b74:	f102 033c 	add.w	r3, r2, #60	@ 0x3c
 8002b78:	637b      	str	r3, [r7, #52]	@ 0x34
		for (int j = 0; j < n; ++j) {
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b7e:	e024      	b.n	8002bca <DeadScreen_Draw+0x3aa>
			int rx = (int) (ds_lcg() % LCD_WIDTH);
 8002b80:	f7ff fdd6 	bl	8002730 <ds_lcg>
 8002b84:	4601      	mov	r1, r0
 8002b86:	4b1b      	ldr	r3, [pc, #108]	@ (8002bf4 <DeadScreen_Draw+0x3d4>)
 8002b88:	fba3 2301 	umull	r2, r3, r3, r1
 8002b8c:	09da      	lsrs	r2, r3, #7
 8002b8e:	4613      	mov	r3, r2
 8002b90:	011b      	lsls	r3, r3, #4
 8002b92:	1a9b      	subs	r3, r3, r2
 8002b94:	011b      	lsls	r3, r3, #4
 8002b96:	1aca      	subs	r2, r1, r3
 8002b98:	633a      	str	r2, [r7, #48]	@ 0x30
			int ry = (int) (ds_lcg() % LCD_HEIGHT);
 8002b9a:	f7ff fdc9 	bl	8002730 <ds_lcg>
 8002b9e:	4601      	mov	r1, r0
 8002ba0:	4b13      	ldr	r3, [pc, #76]	@ (8002bf0 <DeadScreen_Draw+0x3d0>)
 8002ba2:	fba3 2301 	umull	r2, r3, r3, r1
 8002ba6:	0a1a      	lsrs	r2, r3, #8
 8002ba8:	4613      	mov	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	019b      	lsls	r3, r3, #6
 8002bb0:	1aca      	subs	r2, r1, r3
 8002bb2:	62fa      	str	r2, [r7, #44]	@ 0x2c
			ILI9341_DrawPixel(rx, ry, COLOR_BLACK);
 8002bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bba:	b291      	uxth	r1, r2
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fd ff14 	bl	80009ec <ILI9341_DrawPixel>
		for (int j = 0; j < n; ++j) {
 8002bc4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	663b      	str	r3, [r7, #96]	@ 0x60
 8002bca:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002bcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	dbd6      	blt.n	8002b80 <DeadScreen_Draw+0x360>
		}
		HAL_Delay(8);
 8002bd2:	2008      	movs	r0, #8
 8002bd4:	f001 fe4e 	bl	8004874 <HAL_Delay>
	for (int t = 0; t < 3; ++t) {
 8002bd8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002bda:	3301      	adds	r3, #1
 8002bdc:	667b      	str	r3, [r7, #100]	@ 0x64
 8002bde:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	ddbb      	ble.n	8002b5c <DeadScreen_Draw+0x33c>
	}
}
 8002be4:	bf00      	nop
 8002be6:	bf00      	nop
 8002be8:	3784      	adds	r7, #132	@ 0x84
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd90      	pop	{r4, r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	cccccccd 	.word	0xcccccccd
 8002bf4:	88888889 	.word	0x88888889

08002bf8 <Firework_BurstFade>:

/* ----- 축포: 폭발 → 중심부터 페이드아웃 ----- */
static void Firework_BurstFade(int xc, int yc, int rmax) {
 8002bf8:	b590      	push	{r4, r7, lr}
 8002bfa:	b095      	sub	sp, #84	@ 0x54
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
	if (rmax < 10)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2b09      	cmp	r3, #9
 8002c08:	dc01      	bgt.n	8002c0e <Firework_BurstFade+0x16>
		rmax = 10;
 8002c0a:	230a      	movs	r3, #10
 8002c0c:	607b      	str	r3, [r7, #4]

	/* 1) 폭발: 링을 늘려가며 점 뿌리기 */
	const int step_r = 3;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	637b      	str	r3, [r7, #52]	@ 0x34
	for (int r = 3; r <= rmax; r += step_r) {
 8002c12:	2303      	movs	r3, #3
 8002c14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c16:	e0b3      	b.n	8002d80 <Firework_BurstFade+0x188>
		/* 색상: 안쪽 노랑 → 중간 오렌지 → 바깥 흰색 */
		uint16_t col = (r < (int) (rmax * 0.33f)) ? COLOR_YELLOW :
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f7fd fb51 	bl	80002c0 <__aeabi_i2f>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	4989      	ldr	r1, [pc, #548]	@ (8002e48 <Firework_BurstFade+0x250>)
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7fd fba0 	bl	8000368 <__aeabi_fmul>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7fd fd78 	bl	8000720 <__aeabi_f2iz>
 8002c30:	4602      	mov	r2, r0
 8002c32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c34:	4293      	cmp	r3, r2
 8002c36:	db15      	blt.n	8002c64 <Firework_BurstFade+0x6c>
						(r < (int) (rmax * 0.66f)) ? COLOR_ORANGE : COLOR_WHITE;
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f7fd fb41 	bl	80002c0 <__aeabi_i2f>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	4982      	ldr	r1, [pc, #520]	@ (8002e4c <Firework_BurstFade+0x254>)
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7fd fb90 	bl	8000368 <__aeabi_fmul>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7fd fd68 	bl	8000720 <__aeabi_f2iz>
 8002c50:	4602      	mov	r2, r0
		uint16_t col = (r < (int) (rmax * 0.33f)) ? COLOR_YELLOW :
 8002c52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c54:	4293      	cmp	r3, r2
 8002c56:	da02      	bge.n	8002c5e <Firework_BurstFade+0x66>
 8002c58:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8002c5c:	e004      	b.n	8002c68 <Firework_BurstFade+0x70>
 8002c5e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002c62:	e001      	b.n	8002c68 <Firework_BurstFade+0x70>
 8002c64:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002c68:	84fb      	strh	r3, [r7, #38]	@ 0x26

		/* 링 위 점 개수(둘레에 비례, 상한 50) */
		int count = 10 + (int) ((2.f * 3.1415926f * r) / 12.f);
 8002c6a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002c6c:	f7fd fb28 	bl	80002c0 <__aeabi_i2f>
 8002c70:	4603      	mov	r3, r0
 8002c72:	4977      	ldr	r1, [pc, #476]	@ (8002e50 <Firework_BurstFade+0x258>)
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7fd fb77 	bl	8000368 <__aeabi_fmul>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	4975      	ldr	r1, [pc, #468]	@ (8002e54 <Firework_BurstFade+0x25c>)
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7fd fc26 	bl	80004d0 <__aeabi_fdiv>
 8002c84:	4603      	mov	r3, r0
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fd fd4a 	bl	8000720 <__aeabi_f2iz>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	330a      	adds	r3, #10
 8002c90:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (count > 50)
 8002c92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c94:	2b32      	cmp	r3, #50	@ 0x32
 8002c96:	dd01      	ble.n	8002c9c <Firework_BurstFade+0xa4>
			count = 50;
 8002c98:	2332      	movs	r3, #50	@ 0x32
 8002c9a:	64bb      	str	r3, [r7, #72]	@ 0x48

		for (int i = 0; i < count; ++i) {
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ca0:	e063      	b.n	8002d6a <Firework_BurstFade+0x172>
			float base = (2.f * 3.1415926f * i) / (float) count;
 8002ca2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002ca4:	f7fd fb0c 	bl	80002c0 <__aeabi_i2f>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	4969      	ldr	r1, [pc, #420]	@ (8002e50 <Firework_BurstFade+0x258>)
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7fd fb5b 	bl	8000368 <__aeabi_fmul>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	461c      	mov	r4, r3
 8002cb6:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8002cb8:	f7fd fb02 	bl	80002c0 <__aeabi_i2f>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	4620      	mov	r0, r4
 8002cc2:	f7fd fc05 	bl	80004d0 <__aeabi_fdiv>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	623b      	str	r3, [r7, #32]
			float jitter = ((int) (fw_rand() % 61) - 30)
 8002cca:	f7fd ff51 	bl	8000b70 <fw_rand>
 8002cce:	4601      	mov	r1, r0
 8002cd0:	4b61      	ldr	r3, [pc, #388]	@ (8002e58 <Firework_BurstFade+0x260>)
 8002cd2:	fba3 2301 	umull	r2, r3, r3, r1
 8002cd6:	091a      	lsrs	r2, r3, #4
 8002cd8:	4613      	mov	r3, r2
 8002cda:	011b      	lsls	r3, r3, #4
 8002cdc:	1a9b      	subs	r3, r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4413      	add	r3, r2
 8002ce2:	1aca      	subs	r2, r1, r3
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	3b1e      	subs	r3, #30
					* (3.1415926f / 1800.f); // ±~1.7°
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7fd fae9 	bl	80002c0 <__aeabi_i2f>
 8002cee:	4603      	mov	r3, r0
			float jitter = ((int) (fw_rand() % 61) - 30)
 8002cf0:	495a      	ldr	r1, [pc, #360]	@ (8002e5c <Firework_BurstFade+0x264>)
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fd fb38 	bl	8000368 <__aeabi_fmul>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	61fb      	str	r3, [r7, #28]
			float a = base + jitter;
 8002cfc:	69f9      	ldr	r1, [r7, #28]
 8002cfe:	6a38      	ldr	r0, [r7, #32]
 8002d00:	f7fd fa2a 	bl	8000158 <__addsf3>
 8002d04:	4603      	mov	r3, r0
 8002d06:	61bb      	str	r3, [r7, #24]

			int x = xc + (int) (r * cosf(a));
 8002d08:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002d0a:	f7fd fad9 	bl	80002c0 <__aeabi_i2f>
 8002d0e:	4604      	mov	r4, r0
 8002d10:	69b8      	ldr	r0, [r7, #24]
 8002d12:	f004 f91f 	bl	8006f54 <cosf>
 8002d16:	4603      	mov	r3, r0
 8002d18:	4619      	mov	r1, r3
 8002d1a:	4620      	mov	r0, r4
 8002d1c:	f7fd fb24 	bl	8000368 <__aeabi_fmul>
 8002d20:	4603      	mov	r3, r0
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7fd fcfc 	bl	8000720 <__aeabi_f2iz>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	617b      	str	r3, [r7, #20]
			int y = yc + (int) (r * sinf(a));
 8002d30:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002d32:	f7fd fac5 	bl	80002c0 <__aeabi_i2f>
 8002d36:	4604      	mov	r4, r0
 8002d38:	69b8      	ldr	r0, [r7, #24]
 8002d3a:	f004 f943 	bl	8006fc4 <sinf>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	4619      	mov	r1, r3
 8002d42:	4620      	mov	r0, r4
 8002d44:	f7fd fb10 	bl	8000368 <__aeabi_fmul>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7fd fce8 	bl	8000720 <__aeabi_f2iz>
 8002d50:	4602      	mov	r2, r0
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	4413      	add	r3, r2
 8002d56:	613b      	str	r3, [r7, #16]
			PutDot2(x, y, col);
 8002d58:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	6939      	ldr	r1, [r7, #16]
 8002d5e:	6978      	ldr	r0, [r7, #20]
 8002d60:	f7fd ff1e 	bl	8000ba0 <PutDot2>
		for (int i = 0; i < count; ++i) {
 8002d64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d66:	3301      	adds	r3, #1
 8002d68:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	db97      	blt.n	8002ca2 <Firework_BurstFade+0xaa>
		}
		HAL_Delay(10);
 8002d72:	200a      	movs	r0, #10
 8002d74:	f001 fd7e 	bl	8004874 <HAL_Delay>
	for (int r = 3; r <= rmax; r += step_r) {
 8002d78:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d7c:	4413      	add	r3, r2
 8002d7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d80:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	f77f af47 	ble.w	8002c18 <Firework_BurstFade+0x20>
	}

	/* 2) 페이드: 중심에서부터 검정 원을 키워가며 지우기 */
	for (int er = 2; er <= rmax; er += 3) {
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8002d8e:	e00b      	b.n	8002da8 <Firework_BurstFade+0x1b0>
		DrawFilledCircle(xc, yc, er, COLOR_BLACK); /* 중심부터 서서히 사라짐 */
 8002d90:	2300      	movs	r3, #0
 8002d92:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002d94:	68b9      	ldr	r1, [r7, #8]
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f7fe f81c 	bl	8000dd4 <DrawFilledCircle>
		HAL_Delay(12);
 8002d9c:	200c      	movs	r0, #12
 8002d9e:	f001 fd69 	bl	8004874 <HAL_Delay>
	for (int er = 2; er <= rmax; er += 3) {
 8002da2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002da4:	3303      	adds	r3, #3
 8002da6:	643b      	str	r3, [r7, #64]	@ 0x40
 8002da8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	ddef      	ble.n	8002d90 <Firework_BurstFade+0x198>
	}

	/* 3) 가장자리 남은 점 약간 정리(블랙 스플랫) */
	for (int t = 0; t < 3; ++t) {
 8002db0:	2300      	movs	r3, #0
 8002db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002db4:	e040      	b.n	8002e38 <Firework_BurstFade+0x240>
		int n = 60 + (fw_rand() % 40);
 8002db6:	f7fd fedb 	bl	8000b70 <fw_rand>
 8002dba:	4601      	mov	r1, r0
 8002dbc:	4b28      	ldr	r3, [pc, #160]	@ (8002e60 <Firework_BurstFade+0x268>)
 8002dbe:	fba3 2301 	umull	r2, r3, r3, r1
 8002dc2:	095a      	lsrs	r2, r3, #5
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4413      	add	r3, r2
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	1aca      	subs	r2, r1, r3
 8002dce:	f102 033c 	add.w	r3, r2, #60	@ 0x3c
 8002dd2:	633b      	str	r3, [r7, #48]	@ 0x30
		for (int j = 0; j < n; ++j) {
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002dd8:	e024      	b.n	8002e24 <Firework_BurstFade+0x22c>
			int rx = (int) (fw_rand() % LCD_WIDTH);
 8002dda:	f7fd fec9 	bl	8000b70 <fw_rand>
 8002dde:	4601      	mov	r1, r0
 8002de0:	4b20      	ldr	r3, [pc, #128]	@ (8002e64 <Firework_BurstFade+0x26c>)
 8002de2:	fba3 2301 	umull	r2, r3, r3, r1
 8002de6:	09da      	lsrs	r2, r3, #7
 8002de8:	4613      	mov	r3, r2
 8002dea:	011b      	lsls	r3, r3, #4
 8002dec:	1a9b      	subs	r3, r3, r2
 8002dee:	011b      	lsls	r3, r3, #4
 8002df0:	1aca      	subs	r2, r1, r3
 8002df2:	62fa      	str	r2, [r7, #44]	@ 0x2c
			int ry = (int) (fw_rand() % LCD_HEIGHT);
 8002df4:	f7fd febc 	bl	8000b70 <fw_rand>
 8002df8:	4601      	mov	r1, r0
 8002dfa:	4b19      	ldr	r3, [pc, #100]	@ (8002e60 <Firework_BurstFade+0x268>)
 8002dfc:	fba3 2301 	umull	r2, r3, r3, r1
 8002e00:	0a1a      	lsrs	r2, r3, #8
 8002e02:	4613      	mov	r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4413      	add	r3, r2
 8002e08:	019b      	lsls	r3, r3, #6
 8002e0a:	1aca      	subs	r2, r1, r3
 8002e0c:	62ba      	str	r2, [r7, #40]	@ 0x28
			ILI9341_DrawPixel(rx, ry, COLOR_BLACK);
 8002e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e14:	b291      	uxth	r1, r2
 8002e16:	2200      	movs	r2, #0
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7fd fde7 	bl	80009ec <ILI9341_DrawPixel>
		for (int j = 0; j < n; ++j) {
 8002e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e20:	3301      	adds	r3, #1
 8002e22:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e24:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	dbd6      	blt.n	8002dda <Firework_BurstFade+0x1e2>
		}
		HAL_Delay(8);
 8002e2c:	2008      	movs	r0, #8
 8002e2e:	f001 fd21 	bl	8004874 <HAL_Delay>
	for (int t = 0; t < 3; ++t) {
 8002e32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e34:	3301      	adds	r3, #1
 8002e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	ddbb      	ble.n	8002db6 <Firework_BurstFade+0x1be>
	}
}
 8002e3e:	bf00      	nop
 8002e40:	bf00      	nop
 8002e42:	3754      	adds	r7, #84	@ 0x54
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd90      	pop	{r4, r7, pc}
 8002e48:	3ea8f5c3 	.word	0x3ea8f5c3
 8002e4c:	3f28f5c3 	.word	0x3f28f5c3
 8002e50:	40c90fda 	.word	0x40c90fda
 8002e54:	41400000 	.word	0x41400000
 8002e58:	4325c53f 	.word	0x4325c53f
 8002e5c:	3ae4c387 	.word	0x3ae4c387
 8002e60:	cccccccd 	.word	0xcccccccd
 8002e64:	88888889 	.word	0x88888889

08002e68 <ClearScreen_Draw>:

/* ====== 문자 없이: 팩맨 + 주변 축포(2~3개) ====== */
static void ClearScreen_Draw(void) {
 8002e68:	b590      	push	{r4, r7, lr}
 8002e6a:	b08f      	sub	sp, #60	@ 0x3c
 8002e6c:	af02      	add	r7, sp, #8
	/* 배경 초기화 */
	ILI9341_FillScreen(COLOR_BLACK);
 8002e6e:	2000      	movs	r0, #0
 8002e70:	f7fd fe26 	bl	8000ac0 <ILI9341_FillScreen>
	fw_seed ^= (HAL_GetTick() | 0xA5A55A5Au);
 8002e74:	f001 fcf4 	bl	8004860 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	4b67      	ldr	r3, [pc, #412]	@ (8003018 <ClearScreen_Draw+0x1b0>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	4a67      	ldr	r2, [pc, #412]	@ (800301c <ClearScreen_Draw+0x1b4>)
 8002e80:	6812      	ldr	r2, [r2, #0]
 8002e82:	4053      	eors	r3, r2
 8002e84:	4a65      	ldr	r2, [pc, #404]	@ (800301c <ClearScreen_Draw+0x1b4>)
 8002e86:	6013      	str	r3, [r2, #0]

	/* 중앙 팩맨 유지(살짝 입 애니메 2프레임) */
	int pcx = LCD_WIDTH / 2;
 8002e88:	2378      	movs	r3, #120	@ 0x78
 8002e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
	int pcy = LCD_HEIGHT / 2 + 8;
 8002e8c:	23a8      	movs	r3, #168	@ 0xa8
 8002e8e:	627b      	str	r3, [r7, #36]	@ 0x24
	int pr = (LCD_WIDTH < LCD_HEIGHT ? LCD_WIDTH : LCD_HEIGHT) / 6;
 8002e90:	2328      	movs	r3, #40	@ 0x28
 8002e92:	623b      	str	r3, [r7, #32]
	DrawPacman(pcx, pcy, pr, 28.f, COLOR_YELLOW, COLOR_BLACK);
 8002e94:	2300      	movs	r3, #0
 8002e96:	9301      	str	r3, [sp, #4]
 8002e98:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002e9c:	9300      	str	r3, [sp, #0]
 8002e9e:	4b60      	ldr	r3, [pc, #384]	@ (8003020 <ClearScreen_Draw+0x1b8>)
 8002ea0:	6a3a      	ldr	r2, [r7, #32]
 8002ea2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ea4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002ea6:	f7fe f947 	bl	8001138 <DrawPacman>
	HAL_Delay(120);
 8002eaa:	2078      	movs	r0, #120	@ 0x78
 8002eac:	f001 fce2 	bl	8004874 <HAL_Delay>
	DrawPacman(pcx, pcy, pr, 8.f, COLOR_YELLOW, COLOR_BLACK);
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	9301      	str	r3, [sp, #4]
 8002eb4:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002eb8:	9300      	str	r3, [sp, #0]
 8002eba:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8002ebe:	6a3a      	ldr	r2, [r7, #32]
 8002ec0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ec2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002ec4:	f7fe f938 	bl	8001138 <DrawPacman>

	/* 축포 위치 계산: 팩맨 주변 원 위에 2~3개 */
	int fireworks = 2 + (fw_rand() % 2);         // 2 또는 3개
 8002ec8:	f7fd fe52 	bl	8000b70 <fw_rand>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	3302      	adds	r3, #2
 8002ed4:	61fb      	str	r3, [r7, #28]
	float base_ang = (float) (fw_rand() % 360) * 3.1415926f / 180.f;
 8002ed6:	f7fd fe4b 	bl	8000b70 <fw_rand>
 8002eda:	4602      	mov	r2, r0
 8002edc:	08d3      	lsrs	r3, r2, #3
 8002ede:	4951      	ldr	r1, [pc, #324]	@ (8003024 <ClearScreen_Draw+0x1bc>)
 8002ee0:	fba1 1303 	umull	r1, r3, r1, r3
 8002ee4:	089b      	lsrs	r3, r3, #2
 8002ee6:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8002eea:	fb01 f303 	mul.w	r3, r1, r3
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7fd f9e1 	bl	80002b8 <__aeabi_ui2f>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	494b      	ldr	r1, [pc, #300]	@ (8003028 <ClearScreen_Draw+0x1c0>)
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7fd fa34 	bl	8000368 <__aeabi_fmul>
 8002f00:	4603      	mov	r3, r0
 8002f02:	494a      	ldr	r1, [pc, #296]	@ (800302c <ClearScreen_Draw+0x1c4>)
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7fd fae3 	bl	80004d0 <__aeabi_fdiv>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	61bb      	str	r3, [r7, #24]
	int ring_r = (int) (pr * 1.8f);             // 팩맨에서 약간 떨어진 반경
 8002f0e:	6a38      	ldr	r0, [r7, #32]
 8002f10:	f7fd f9d6 	bl	80002c0 <__aeabi_i2f>
 8002f14:	4603      	mov	r3, r0
 8002f16:	4946      	ldr	r1, [pc, #280]	@ (8003030 <ClearScreen_Draw+0x1c8>)
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7fd fa25 	bl	8000368 <__aeabi_fmul>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7fd fbfd 	bl	8000720 <__aeabi_f2iz>
 8002f26:	4603      	mov	r3, r0
 8002f28:	617b      	str	r3, [r7, #20]
	int fr_max = (LCD_WIDTH < LCD_HEIGHT ? LCD_WIDTH : LCD_HEIGHT) / 2;
 8002f2a:	2378      	movs	r3, #120	@ 0x78
 8002f2c:	613b      	str	r3, [r7, #16]
	int fw_rmax = (int) (fr_max * 0.45f);       // 축포 자체의 최대 반경(화면 절반 미만)
 8002f2e:	6938      	ldr	r0, [r7, #16]
 8002f30:	f7fd f9c6 	bl	80002c0 <__aeabi_i2f>
 8002f34:	4603      	mov	r3, r0
 8002f36:	493f      	ldr	r1, [pc, #252]	@ (8003034 <ClearScreen_Draw+0x1cc>)
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7fd fa15 	bl	8000368 <__aeabi_fmul>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7fd fbed 	bl	8000720 <__aeabi_f2iz>
 8002f46:	4603      	mov	r3, r0
 8002f48:	60fb      	str	r3, [r7, #12]

	for (int k = 0; k < fireworks; ++k) {
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f4e:	e05a      	b.n	8003006 <ClearScreen_Draw+0x19e>
		float a = base_ang + k * (2.f * 3.1415926f / fireworks);
 8002f50:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002f52:	f7fd f9b5 	bl	80002c0 <__aeabi_i2f>
 8002f56:	4604      	mov	r4, r0
 8002f58:	69f8      	ldr	r0, [r7, #28]
 8002f5a:	f7fd f9b1 	bl	80002c0 <__aeabi_i2f>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	4619      	mov	r1, r3
 8002f62:	4835      	ldr	r0, [pc, #212]	@ (8003038 <ClearScreen_Draw+0x1d0>)
 8002f64:	f7fd fab4 	bl	80004d0 <__aeabi_fdiv>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	4620      	mov	r0, r4
 8002f6e:	f7fd f9fb 	bl	8000368 <__aeabi_fmul>
 8002f72:	4603      	mov	r3, r0
 8002f74:	4619      	mov	r1, r3
 8002f76:	69b8      	ldr	r0, [r7, #24]
 8002f78:	f7fd f8ee 	bl	8000158 <__addsf3>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	60bb      	str	r3, [r7, #8]
		/* 위치 */
		int fx = pcx + (int) (ring_r * cosf(a));
 8002f80:	6978      	ldr	r0, [r7, #20]
 8002f82:	f7fd f99d 	bl	80002c0 <__aeabi_i2f>
 8002f86:	4604      	mov	r4, r0
 8002f88:	68b8      	ldr	r0, [r7, #8]
 8002f8a:	f003 ffe3 	bl	8006f54 <cosf>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	4619      	mov	r1, r3
 8002f92:	4620      	mov	r0, r4
 8002f94:	f7fd f9e8 	bl	8000368 <__aeabi_fmul>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7fd fbc0 	bl	8000720 <__aeabi_f2iz>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fa4:	4413      	add	r3, r2
 8002fa6:	607b      	str	r3, [r7, #4]
		int fy = pcy + (int) (ring_r * sinf(a));
 8002fa8:	6978      	ldr	r0, [r7, #20]
 8002faa:	f7fd f989 	bl	80002c0 <__aeabi_i2f>
 8002fae:	4604      	mov	r4, r0
 8002fb0:	68b8      	ldr	r0, [r7, #8]
 8002fb2:	f004 f807 	bl	8006fc4 <sinf>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4620      	mov	r0, r4
 8002fbc:	f7fd f9d4 	bl	8000368 <__aeabi_fmul>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7fd fbac 	bl	8000720 <__aeabi_f2iz>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fcc:	4413      	add	r3, r2
 8002fce:	603b      	str	r3, [r7, #0]
		clamp_inside(&fx, &fy, fw_rmax + 6);   // 화면 밖으로 나가지 않게 마진 확보
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	1d9a      	adds	r2, r3, #6
 8002fd4:	4639      	mov	r1, r7
 8002fd6:	1d3b      	adds	r3, r7, #4
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7fd fe23 	bl	8000c24 <clamp_inside>

		/* 축포 1개 연출 */
		Firework_BurstFade(fx, fy, fw_rmax);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6839      	ldr	r1, [r7, #0]
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff fe07 	bl	8002bf8 <Firework_BurstFade>

		/* 팩맨이 가려졌다면 다시 한 번 그려 안정감 부여 */
		DrawPacman(pcx, pcy, pr, 12.f, COLOR_YELLOW, COLOR_BLACK);
 8002fea:	2300      	movs	r3, #0
 8002fec:	9301      	str	r3, [sp, #4]
 8002fee:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	4b11      	ldr	r3, [pc, #68]	@ (800303c <ClearScreen_Draw+0x1d4>)
 8002ff6:	6a3a      	ldr	r2, [r7, #32]
 8002ff8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ffa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002ffc:	f7fe f89c 	bl	8001138 <DrawPacman>
	for (int k = 0; k < fireworks; ++k) {
 8003000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003002:	3301      	adds	r3, #1
 8003004:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003006:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	429a      	cmp	r2, r3
 800300c:	dba0      	blt.n	8002f50 <ClearScreen_Draw+0xe8>
	}
}
 800300e:	bf00      	nop
 8003010:	bf00      	nop
 8003012:	3734      	adds	r7, #52	@ 0x34
 8003014:	46bd      	mov	sp, r7
 8003016:	bd90      	pop	{r4, r7, pc}
 8003018:	a5a55a5a 	.word	0xa5a55a5a
 800301c:	2000015c 	.word	0x2000015c
 8003020:	41e00000 	.word	0x41e00000
 8003024:	16c16c17 	.word	0x16c16c17
 8003028:	40490fda 	.word	0x40490fda
 800302c:	43340000 	.word	0x43340000
 8003030:	3fe66666 	.word	0x3fe66666
 8003034:	3ee66666 	.word	0x3ee66666
 8003038:	40c90fda 	.word	0x40c90fda
 800303c:	41400000 	.word	0x41400000

08003040 <any_button_now>:

/* 50ms debounce for any of UP/LEFT/RIGHT/DOWN */
static int any_button_now(void) {
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
	return BTN_PRESSED(UP_GPIO_Port, UP_Pin)
 8003044:	2104      	movs	r1, #4
 8003046:	4811      	ldr	r0, [pc, #68]	@ (800308c <any_button_now+0x4c>)
 8003048:	f001 feca 	bl	8004de0 <HAL_GPIO_ReadPin>
 800304c:	4603      	mov	r3, r0
			|| BTN_PRESSED(LEFT_GPIO_Port, LEFT_Pin)
			|| BTN_PRESSED(RIGHT_GPIO_Port, RIGHT_Pin)
			|| BTN_PRESSED(DOWN_GPIO_Port, DOWN_Pin);
 800304e:	2b00      	cmp	r3, #0
 8003050:	d016      	beq.n	8003080 <any_button_now+0x40>
			|| BTN_PRESSED(LEFT_GPIO_Port, LEFT_Pin)
 8003052:	2108      	movs	r1, #8
 8003054:	480d      	ldr	r0, [pc, #52]	@ (800308c <any_button_now+0x4c>)
 8003056:	f001 fec3 	bl	8004de0 <HAL_GPIO_ReadPin>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00f      	beq.n	8003080 <any_button_now+0x40>
			|| BTN_PRESSED(RIGHT_GPIO_Port, RIGHT_Pin)
 8003060:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003064:	480a      	ldr	r0, [pc, #40]	@ (8003090 <any_button_now+0x50>)
 8003066:	f001 febb 	bl	8004de0 <HAL_GPIO_ReadPin>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d007      	beq.n	8003080 <any_button_now+0x40>
			|| BTN_PRESSED(DOWN_GPIO_Port, DOWN_Pin);
 8003070:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003074:	4806      	ldr	r0, [pc, #24]	@ (8003090 <any_button_now+0x50>)
 8003076:	f001 feb3 	bl	8004de0 <HAL_GPIO_ReadPin>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d101      	bne.n	8003084 <any_button_now+0x44>
 8003080:	2301      	movs	r3, #1
 8003082:	e000      	b.n	8003086 <any_button_now+0x46>
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	40011000 	.word	0x40011000
 8003090:	40010c00 	.word	0x40010c00

08003094 <wait_for_any_button_press>:

void wait_for_any_button_press(void) {
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
	while (!any_button_now()) {
 8003098:	e002      	b.n	80030a0 <wait_for_any_button_press+0xc>
		HAL_Delay(1);
 800309a:	2001      	movs	r0, #1
 800309c:	f001 fbea 	bl	8004874 <HAL_Delay>
	while (!any_button_now()) {
 80030a0:	f7ff ffce 	bl	8003040 <any_button_now>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d0f7      	beq.n	800309a <wait_for_any_button_press+0x6>
	}
	HAL_Delay(50);
 80030aa:	2032      	movs	r0, #50	@ 0x32
 80030ac:	f001 fbe2 	bl	8004874 <HAL_Delay>
	if (!any_button_now())
 80030b0:	f7ff ffc6 	bl	8003040 <any_button_now>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d010      	beq.n	80030dc <wait_for_any_button_press+0x48>
		return;
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80030ba:	2120      	movs	r1, #32
 80030bc:	4808      	ldr	r0, [pc, #32]	@ (80030e0 <wait_for_any_button_press+0x4c>)
 80030be:	f001 febe 	bl	8004e3e <HAL_GPIO_TogglePin>
	while (any_button_now()) {
 80030c2:	e002      	b.n	80030ca <wait_for_any_button_press+0x36>
		HAL_Delay(1);
 80030c4:	2001      	movs	r0, #1
 80030c6:	f001 fbd5 	bl	8004874 <HAL_Delay>
	while (any_button_now()) {
 80030ca:	f7ff ffb9 	bl	8003040 <any_button_now>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1f7      	bne.n	80030c4 <wait_for_any_button_press+0x30>
	}
	HAL_Delay(20);
 80030d4:	2014      	movs	r0, #20
 80030d6:	f001 fbcd 	bl	8004874 <HAL_Delay>
 80030da:	e000      	b.n	80030de <wait_for_any_button_press+0x4a>
		return;
 80030dc:	bf00      	nop
}
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	40010800 	.word	0x40010800

080030e4 <ILI9341_Init>:

/* ----------------------------- ILI9341 init ------------------------------ */
void ILI9341_Init(void) {
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
	LCD_CS_HIGH();
 80030e8:	f7fd fb4c 	bl	8000784 <LCD_CS_HIGH>
	LCD_WR_HIGH();
 80030ec:	f7fd fb7a 	bl	80007e4 <LCD_WR_HIGH>
	LCD_RD_HIGH();
 80030f0:	f7fd fb84 	bl	80007fc <LCD_RD_HIGH>
	LCD_RST_LOW();
 80030f4:	f7fd fb8e 	bl	8000814 <LCD_RST_LOW>
	HAL_Delay(20);
 80030f8:	2014      	movs	r0, #20
 80030fa:	f001 fbbb 	bl	8004874 <HAL_Delay>
	LCD_RST_HIGH();
 80030fe:	f7fd fb95 	bl	800082c <LCD_RST_HIGH>
	HAL_Delay(120);
 8003102:	2078      	movs	r0, #120	@ 0x78
 8003104:	f001 fbb6 	bl	8004874 <HAL_Delay>

	LCD_CS_LOW();
 8003108:	f7fd fb30 	bl	800076c <LCD_CS_LOW>

	ILI9341_WriteCmd(0x01);
 800310c:	2001      	movs	r0, #1
 800310e:	f7fd fc0a 	bl	8000926 <ILI9341_WriteCmd>
	HAL_Delay(5);
 8003112:	2005      	movs	r0, #5
 8003114:	f001 fbae 	bl	8004874 <HAL_Delay>
	ILI9341_WriteCmd(0x28);
 8003118:	2028      	movs	r0, #40	@ 0x28
 800311a:	f7fd fc04 	bl	8000926 <ILI9341_WriteCmd>

	ILI9341_WriteCmd(0xCF);
 800311e:	20cf      	movs	r0, #207	@ 0xcf
 8003120:	f7fd fc01 	bl	8000926 <ILI9341_WriteCmd>
	ILI9341_WriteData8(0x00);
 8003124:	2000      	movs	r0, #0
 8003126:	f7fd fc0f 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteData8(0x83);
 800312a:	2083      	movs	r0, #131	@ 0x83
 800312c:	f7fd fc0c 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteData8(0x30);
 8003130:	2030      	movs	r0, #48	@ 0x30
 8003132:	f7fd fc09 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteCmd(0xED);
 8003136:	20ed      	movs	r0, #237	@ 0xed
 8003138:	f7fd fbf5 	bl	8000926 <ILI9341_WriteCmd>
	ILI9341_WriteData8(0x64);
 800313c:	2064      	movs	r0, #100	@ 0x64
 800313e:	f7fd fc03 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteData8(0x03);
 8003142:	2003      	movs	r0, #3
 8003144:	f7fd fc00 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteData8(0x12);
 8003148:	2012      	movs	r0, #18
 800314a:	f7fd fbfd 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteData8(0x81);
 800314e:	2081      	movs	r0, #129	@ 0x81
 8003150:	f7fd fbfa 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteCmd(0xE8);
 8003154:	20e8      	movs	r0, #232	@ 0xe8
 8003156:	f7fd fbe6 	bl	8000926 <ILI9341_WriteCmd>
	ILI9341_WriteData8(0x85);
 800315a:	2085      	movs	r0, #133	@ 0x85
 800315c:	f7fd fbf4 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteData8(0x01);
 8003160:	2001      	movs	r0, #1
 8003162:	f7fd fbf1 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteData8(0x79);
 8003166:	2079      	movs	r0, #121	@ 0x79
 8003168:	f7fd fbee 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteCmd(0xCB);
 800316c:	20cb      	movs	r0, #203	@ 0xcb
 800316e:	f7fd fbda 	bl	8000926 <ILI9341_WriteCmd>
	ILI9341_WriteData8(0x39);
 8003172:	2039      	movs	r0, #57	@ 0x39
 8003174:	f7fd fbe8 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteData8(0x2C);
 8003178:	202c      	movs	r0, #44	@ 0x2c
 800317a:	f7fd fbe5 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteData8(0x00);
 800317e:	2000      	movs	r0, #0
 8003180:	f7fd fbe2 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteData8(0x34);
 8003184:	2034      	movs	r0, #52	@ 0x34
 8003186:	f7fd fbdf 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteData8(0x02);
 800318a:	2002      	movs	r0, #2
 800318c:	f7fd fbdc 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteCmd(0xF7);
 8003190:	20f7      	movs	r0, #247	@ 0xf7
 8003192:	f7fd fbc8 	bl	8000926 <ILI9341_WriteCmd>
	ILI9341_WriteData8(0x20);
 8003196:	2020      	movs	r0, #32
 8003198:	f7fd fbd6 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteCmd(0xEA);
 800319c:	20ea      	movs	r0, #234	@ 0xea
 800319e:	f7fd fbc2 	bl	8000926 <ILI9341_WriteCmd>
	ILI9341_WriteData8(0x00);
 80031a2:	2000      	movs	r0, #0
 80031a4:	f7fd fbd0 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteData8(0x00);
 80031a8:	2000      	movs	r0, #0
 80031aa:	f7fd fbcd 	bl	8000948 <ILI9341_WriteData8>

	ILI9341_WriteCmd(0xC0);
 80031ae:	20c0      	movs	r0, #192	@ 0xc0
 80031b0:	f7fd fbb9 	bl	8000926 <ILI9341_WriteCmd>
	ILI9341_WriteData8(0x26);
 80031b4:	2026      	movs	r0, #38	@ 0x26
 80031b6:	f7fd fbc7 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteCmd(0xC1);
 80031ba:	20c1      	movs	r0, #193	@ 0xc1
 80031bc:	f7fd fbb3 	bl	8000926 <ILI9341_WriteCmd>
	ILI9341_WriteData8(0x11);
 80031c0:	2011      	movs	r0, #17
 80031c2:	f7fd fbc1 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteCmd(0xC5);
 80031c6:	20c5      	movs	r0, #197	@ 0xc5
 80031c8:	f7fd fbad 	bl	8000926 <ILI9341_WriteCmd>
	ILI9341_WriteData8(0x35);
 80031cc:	2035      	movs	r0, #53	@ 0x35
 80031ce:	f7fd fbbb 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteData8(0x3E);
 80031d2:	203e      	movs	r0, #62	@ 0x3e
 80031d4:	f7fd fbb8 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteCmd(0xC7);
 80031d8:	20c7      	movs	r0, #199	@ 0xc7
 80031da:	f7fd fba4 	bl	8000926 <ILI9341_WriteCmd>
	ILI9341_WriteData8(0xBE);
 80031de:	20be      	movs	r0, #190	@ 0xbe
 80031e0:	f7fd fbb2 	bl	8000948 <ILI9341_WriteData8>

	ILI9341_WriteCmd(0x36);
 80031e4:	2036      	movs	r0, #54	@ 0x36
 80031e6:	f7fd fb9e 	bl	8000926 <ILI9341_WriteCmd>
	ILI9341_WriteData8(0x48); /* MY=1, BGR=1 */
 80031ea:	2048      	movs	r0, #72	@ 0x48
 80031ec:	f7fd fbac 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteCmd(0x3A);
 80031f0:	203a      	movs	r0, #58	@ 0x3a
 80031f2:	f7fd fb98 	bl	8000926 <ILI9341_WriteCmd>
	ILI9341_WriteData8(0x55); /* RGB565 */
 80031f6:	2055      	movs	r0, #85	@ 0x55
 80031f8:	f7fd fba6 	bl	8000948 <ILI9341_WriteData8>

	ILI9341_WriteCmd(0xB1);
 80031fc:	20b1      	movs	r0, #177	@ 0xb1
 80031fe:	f7fd fb92 	bl	8000926 <ILI9341_WriteCmd>
	ILI9341_WriteData8(0x00);
 8003202:	2000      	movs	r0, #0
 8003204:	f7fd fba0 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteData8(0x1B);
 8003208:	201b      	movs	r0, #27
 800320a:	f7fd fb9d 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteCmd(0xB6);
 800320e:	20b6      	movs	r0, #182	@ 0xb6
 8003210:	f7fd fb89 	bl	8000926 <ILI9341_WriteCmd>
	ILI9341_WriteData8(0x0A);
 8003214:	200a      	movs	r0, #10
 8003216:	f7fd fb97 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteData8(0xA2);
 800321a:	20a2      	movs	r0, #162	@ 0xa2
 800321c:	f7fd fb94 	bl	8000948 <ILI9341_WriteData8>

	ILI9341_WriteCmd(0xF2);
 8003220:	20f2      	movs	r0, #242	@ 0xf2
 8003222:	f7fd fb80 	bl	8000926 <ILI9341_WriteCmd>
	ILI9341_WriteData8(0x00);
 8003226:	2000      	movs	r0, #0
 8003228:	f7fd fb8e 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteCmd(0x26);
 800322c:	2026      	movs	r0, #38	@ 0x26
 800322e:	f7fd fb7a 	bl	8000926 <ILI9341_WriteCmd>
	ILI9341_WriteData8(0x01);
 8003232:	2001      	movs	r0, #1
 8003234:	f7fd fb88 	bl	8000948 <ILI9341_WriteData8>

	ILI9341_WriteCmd(0x11);
 8003238:	2011      	movs	r0, #17
 800323a:	f7fd fb74 	bl	8000926 <ILI9341_WriteCmd>
	HAL_Delay(120);
 800323e:	2078      	movs	r0, #120	@ 0x78
 8003240:	f001 fb18 	bl	8004874 <HAL_Delay>
	ILI9341_WriteCmd(0x29);
 8003244:	2029      	movs	r0, #41	@ 0x29
 8003246:	f7fd fb6e 	bl	8000926 <ILI9341_WriteCmd>
}
 800324a:	bf00      	nop
 800324c:	bd80      	pop	{r7, pc}
	...

08003250 <set_pwm_freq>:

/* ----------------------------- Buzzer (PWM) ------------------------------ */
/* duty 50% square: ARR = TIMER_TICK_HZ/freq - 1 , CCR = (ARR+1)/2 */
static void set_pwm_freq(TIM_HandleTypeDef *htim, uint32_t channel, uint32_t hz) {
 8003250:	b480      	push	{r7}
 8003252:	b087      	sub	sp, #28
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	607a      	str	r2, [r7, #4]
	if (hz == 0) {
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d11c      	bne.n	800329c <set_pwm_freq+0x4c>
		__HAL_TIM_SET_COMPARE(htim, channel, 0); /* mute */
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d104      	bne.n	8003272 <set_pwm_freq+0x22>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2200      	movs	r2, #0
 800326e:	635a      	str	r2, [r3, #52]	@ 0x34
		return;
 8003270:	e050      	b.n	8003314 <set_pwm_freq+0xc4>
		__HAL_TIM_SET_COMPARE(htim, channel, 0); /* mute */
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	2b04      	cmp	r3, #4
 8003276:	d104      	bne.n	8003282 <set_pwm_freq+0x32>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	2300      	movs	r3, #0
 800327e:	6393      	str	r3, [r2, #56]	@ 0x38
		return;
 8003280:	e048      	b.n	8003314 <set_pwm_freq+0xc4>
		__HAL_TIM_SET_COMPARE(htim, channel, 0); /* mute */
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	2b08      	cmp	r3, #8
 8003286:	d104      	bne.n	8003292 <set_pwm_freq+0x42>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	2300      	movs	r3, #0
 800328e:	63d3      	str	r3, [r2, #60]	@ 0x3c
		return;
 8003290:	e040      	b.n	8003314 <set_pwm_freq+0xc4>
		__HAL_TIM_SET_COMPARE(htim, channel, 0); /* mute */
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	2300      	movs	r3, #0
 8003298:	6413      	str	r3, [r2, #64]	@ 0x40
		return;
 800329a:	e03b      	b.n	8003314 <set_pwm_freq+0xc4>
	}
	uint32_t arr = (TIMER_TICK_HZ / hz);
 800329c:	4a1f      	ldr	r2, [pc, #124]	@ (800331c <set_pwm_freq+0xcc>)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a4:	617b      	str	r3, [r7, #20]
	if (arr < 2)
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d801      	bhi.n	80032b0 <set_pwm_freq+0x60>
		arr = 2;
 80032ac:	2302      	movs	r3, #2
 80032ae:	617b      	str	r3, [r7, #20]
	arr -= 1;
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	3b01      	subs	r3, #1
 80032b4:	617b      	str	r3, [r7, #20]
	__HAL_TIM_SET_AUTORELOAD(htim, arr);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	697a      	ldr	r2, [r7, #20]
 80032bc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(htim, channel, (arr + 1) / 2);
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d106      	bne.n	80032d8 <set_pwm_freq+0x88>
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	1c5a      	adds	r2, r3, #1
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	0852      	lsrs	r2, r2, #1
 80032d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80032d6:	e019      	b.n	800330c <set_pwm_freq+0xbc>
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d106      	bne.n	80032ec <set_pwm_freq+0x9c>
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	3301      	adds	r3, #1
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	6812      	ldr	r2, [r2, #0]
 80032e6:	085b      	lsrs	r3, r3, #1
 80032e8:	6393      	str	r3, [r2, #56]	@ 0x38
 80032ea:	e00f      	b.n	800330c <set_pwm_freq+0xbc>
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	2b08      	cmp	r3, #8
 80032f0:	d106      	bne.n	8003300 <set_pwm_freq+0xb0>
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	3301      	adds	r3, #1
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	6812      	ldr	r2, [r2, #0]
 80032fa:	085b      	lsrs	r3, r3, #1
 80032fc:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80032fe:	e005      	b.n	800330c <set_pwm_freq+0xbc>
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	3301      	adds	r3, #1
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	6812      	ldr	r2, [r2, #0]
 8003308:	085b      	lsrs	r3, r3, #1
 800330a:	6413      	str	r3, [r2, #64]	@ 0x40
	__HAL_TIM_SET_COUNTER(htim, 0);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2200      	movs	r2, #0
 8003312:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8003314:	371c      	adds	r7, #28
 8003316:	46bd      	mov	sp, r7
 8003318:	bc80      	pop	{r7}
 800331a:	4770      	bx	lr
 800331c:	000f4240 	.word	0x000f4240

08003320 <BUZZ_Start>:

void BUZZ_Start(void) {
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4); /* PA11 */
 8003324:	210c      	movs	r1, #12
 8003326:	4804      	ldr	r0, [pc, #16]	@ (8003338 <BUZZ_Start+0x18>)
 8003328:	f002 fa7c 	bl	8005824 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); /* PB1  */
 800332c:	210c      	movs	r1, #12
 800332e:	4803      	ldr	r0, [pc, #12]	@ (800333c <BUZZ_Start+0x1c>)
 8003330:	f002 fa78 	bl	8005824 <HAL_TIM_PWM_Start>
}
 8003334:	bf00      	nop
 8003336:	bd80      	pop	{r7, pc}
 8003338:	200001dc 	.word	0x200001dc
 800333c:	20000224 	.word	0x20000224

08003340 <BUZZ_Stop>:
void BUZZ_Stop(void) {
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8003344:	4b08      	ldr	r3, [pc, #32]	@ (8003368 <BUZZ_Stop+0x28>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2200      	movs	r2, #0
 800334a:	641a      	str	r2, [r3, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 800334c:	4b07      	ldr	r3, [pc, #28]	@ (800336c <BUZZ_Stop+0x2c>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2200      	movs	r2, #0
 8003352:	641a      	str	r2, [r3, #64]	@ 0x40
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_4);
 8003354:	210c      	movs	r1, #12
 8003356:	4804      	ldr	r0, [pc, #16]	@ (8003368 <BUZZ_Stop+0x28>)
 8003358:	f002 fb06 	bl	8005968 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 800335c:	210c      	movs	r1, #12
 800335e:	4803      	ldr	r0, [pc, #12]	@ (800336c <BUZZ_Stop+0x2c>)
 8003360:	f002 fb02 	bl	8005968 <HAL_TIM_PWM_Stop>
}
 8003364:	bf00      	nop
 8003366:	bd80      	pop	{r7, pc}
 8003368:	200001dc 	.word	0x200001dc
 800336c:	20000224 	.word	0x20000224

08003370 <BUZZ_SetFreq_TIM1>:
void BUZZ_SetFreq_TIM1(uint32_t hz) {
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
	set_pwm_freq(&htim1, TIM_CHANNEL_4, hz);
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	210c      	movs	r1, #12
 800337c:	4803      	ldr	r0, [pc, #12]	@ (800338c <BUZZ_SetFreq_TIM1+0x1c>)
 800337e:	f7ff ff67 	bl	8003250 <set_pwm_freq>
}
 8003382:	bf00      	nop
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	200001dc 	.word	0x200001dc

08003390 <BUZZ_SetFreq_TIM3>:
void BUZZ_SetFreq_TIM3(uint32_t hz) {
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
	set_pwm_freq(&htim3, TIM_CHANNEL_4, hz);
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	210c      	movs	r1, #12
 800339c:	4803      	ldr	r0, [pc, #12]	@ (80033ac <BUZZ_SetFreq_TIM3+0x1c>)
 800339e:	f7ff ff57 	bl	8003250 <set_pwm_freq>
}
 80033a2:	bf00      	nop
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	20000224 	.word	0x20000224

080033b0 <PLAY_Pacman_eating>:
static const uint16_t voice_dur_eat[] = { 40, 40, 40, 60 };
//static const uint16_t voice_dur_eat[] = { 30, 30, 40, 50, 40, 30, 30 };
static const size_t VOICE_LEN_4 =
		(sizeof(voice9_freq) / sizeof(voice10_freq[0]));

void PLAY_Pacman_eating(void) {
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
	BUZZ_Start();
 80033b6:	f7ff ffb3 	bl	8003320 <BUZZ_Start>
	for (size_t i = 0; i < VOICE_LEN_4; ++i) {
 80033ba:	2300      	movs	r3, #0
 80033bc:	607b      	str	r3, [r7, #4]
 80033be:	e021      	b.n	8003404 <PLAY_Pacman_eating+0x54>
		BUZZ_SetFreq_TIM1(voice9_freq[i]); /* 멜로디 */
 80033c0:	4a15      	ldr	r2, [pc, #84]	@ (8003418 <PLAY_Pacman_eating+0x68>)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7ff ffd1 	bl	8003370 <BUZZ_SetFreq_TIM1>
		BUZZ_SetFreq_TIM3(voice10_freq[i]); /* 하모니 */
 80033ce:	4a13      	ldr	r2, [pc, #76]	@ (800341c <PLAY_Pacman_eating+0x6c>)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7ff ffda 	bl	8003390 <BUZZ_SetFreq_TIM3>
		HAL_Delay(voice_dur_eat[i] - 10);
 80033dc:	4a10      	ldr	r2, [pc, #64]	@ (8003420 <PLAY_Pacman_eating+0x70>)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033e4:	3b0a      	subs	r3, #10
 80033e6:	4618      	mov	r0, r3
 80033e8:	f001 fa44 	bl	8004874 <HAL_Delay>
		/* 짧은 스택카토 */
		BUZZ_SetFreq_TIM1(0);
 80033ec:	2000      	movs	r0, #0
 80033ee:	f7ff ffbf 	bl	8003370 <BUZZ_SetFreq_TIM1>
		BUZZ_SetFreq_TIM3(0);
 80033f2:	2000      	movs	r0, #0
 80033f4:	f7ff ffcc 	bl	8003390 <BUZZ_SetFreq_TIM3>
		HAL_Delay(10);
 80033f8:	200a      	movs	r0, #10
 80033fa:	f001 fa3b 	bl	8004874 <HAL_Delay>
	for (size_t i = 0; i < VOICE_LEN_4; ++i) {
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	3301      	adds	r3, #1
 8003402:	607b      	str	r3, [r7, #4]
 8003404:	2204      	movs	r2, #4
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4293      	cmp	r3, r2
 800340a:	d3d9      	bcc.n	80033c0 <PLAY_Pacman_eating+0x10>
	}
	BUZZ_Stop();
 800340c:	f7ff ff98 	bl	8003340 <BUZZ_Stop>
}
 8003410:	bf00      	nop
 8003412:	3708      	adds	r7, #8
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	08007f64 	.word	0x08007f64
 800341c:	08007f6c 	.word	0x08007f6c
 8003420:	08007f74 	.word	0x08007f74

08003424 <PLAY_PacmanIntro_Blocking>:

void PLAY_PacmanIntro_Blocking(void) {
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
	BUZZ_Start();
 800342a:	f7ff ff79 	bl	8003320 <BUZZ_Start>
	for (size_t i = 0; i < VOICE_LEN; ++i) {
 800342e:	2300      	movs	r3, #0
 8003430:	607b      	str	r3, [r7, #4]
 8003432:	e021      	b.n	8003478 <PLAY_PacmanIntro_Blocking+0x54>
		BUZZ_SetFreq_TIM1(voice1_freq[i]); /* 멜로디 */
 8003434:	4a15      	ldr	r2, [pc, #84]	@ (800348c <PLAY_PacmanIntro_Blocking+0x68>)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff ff97 	bl	8003370 <BUZZ_SetFreq_TIM1>
		BUZZ_SetFreq_TIM3(voice2_freq[i]); /* 하모니 */
 8003442:	4a13      	ldr	r2, [pc, #76]	@ (8003490 <PLAY_PacmanIntro_Blocking+0x6c>)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800344a:	4618      	mov	r0, r3
 800344c:	f7ff ffa0 	bl	8003390 <BUZZ_SetFreq_TIM3>
		HAL_Delay(voice_dur[i] - 10);
 8003450:	4a10      	ldr	r2, [pc, #64]	@ (8003494 <PLAY_PacmanIntro_Blocking+0x70>)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003458:	3b0a      	subs	r3, #10
 800345a:	4618      	mov	r0, r3
 800345c:	f001 fa0a 	bl	8004874 <HAL_Delay>
		/* 짧은 스택카토 */
		BUZZ_SetFreq_TIM1(0);
 8003460:	2000      	movs	r0, #0
 8003462:	f7ff ff85 	bl	8003370 <BUZZ_SetFreq_TIM1>
		BUZZ_SetFreq_TIM3(0);
 8003466:	2000      	movs	r0, #0
 8003468:	f7ff ff92 	bl	8003390 <BUZZ_SetFreq_TIM3>
		HAL_Delay(10);
 800346c:	200a      	movs	r0, #10
 800346e:	f001 fa01 	bl	8004874 <HAL_Delay>
	for (size_t i = 0; i < VOICE_LEN; ++i) {
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	3301      	adds	r3, #1
 8003476:	607b      	str	r3, [r7, #4]
 8003478:	220d      	movs	r2, #13
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4293      	cmp	r3, r2
 800347e:	d3d9      	bcc.n	8003434 <PLAY_PacmanIntro_Blocking+0x10>
	}
	BUZZ_Stop();
 8003480:	f7ff ff5e 	bl	8003340 <BUZZ_Stop>
}
 8003484:	bf00      	nop
 8003486:	3708      	adds	r7, #8
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	08007e44 	.word	0x08007e44
 8003490:	08007e60 	.word	0x08007e60
 8003494:	08007e7c 	.word	0x08007e7c

08003498 <PLAY_Pacman_map>:

void PLAY_Pacman_map(void) {
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
	BUZZ_Start();
 800349e:	f7ff ff3f 	bl	8003320 <BUZZ_Start>
	for (size_t i = 0; i < VOICE_LEN_1; ++i) {
 80034a2:	2300      	movs	r3, #0
 80034a4:	607b      	str	r3, [r7, #4]
 80034a6:	e021      	b.n	80034ec <PLAY_Pacman_map+0x54>
		BUZZ_SetFreq_TIM1(voice3_freq[i]); /* 멜로디 */
 80034a8:	4a15      	ldr	r2, [pc, #84]	@ (8003500 <PLAY_Pacman_map+0x68>)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7ff ff5d 	bl	8003370 <BUZZ_SetFreq_TIM1>
		BUZZ_SetFreq_TIM3(voice4_freq[i]); /* 하모니 */
 80034b6:	4a13      	ldr	r2, [pc, #76]	@ (8003504 <PLAY_Pacman_map+0x6c>)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034be:	4618      	mov	r0, r3
 80034c0:	f7ff ff66 	bl	8003390 <BUZZ_SetFreq_TIM3>
		HAL_Delay(voice_dur_1[i] - 10);
 80034c4:	4a10      	ldr	r2, [pc, #64]	@ (8003508 <PLAY_Pacman_map+0x70>)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034cc:	3b0a      	subs	r3, #10
 80034ce:	4618      	mov	r0, r3
 80034d0:	f001 f9d0 	bl	8004874 <HAL_Delay>
		/* 짧은 스택카토 */
		BUZZ_SetFreq_TIM1(0);
 80034d4:	2000      	movs	r0, #0
 80034d6:	f7ff ff4b 	bl	8003370 <BUZZ_SetFreq_TIM1>
		BUZZ_SetFreq_TIM3(0);
 80034da:	2000      	movs	r0, #0
 80034dc:	f7ff ff58 	bl	8003390 <BUZZ_SetFreq_TIM3>
		HAL_Delay(10);
 80034e0:	200a      	movs	r0, #10
 80034e2:	f001 f9c7 	bl	8004874 <HAL_Delay>
	for (size_t i = 0; i < VOICE_LEN_1; ++i) {
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	3301      	adds	r3, #1
 80034ea:	607b      	str	r3, [r7, #4]
 80034ec:	220e      	movs	r2, #14
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d3d9      	bcc.n	80034a8 <PLAY_Pacman_map+0x10>
	}
	BUZZ_Stop();
 80034f4:	f7ff ff24 	bl	8003340 <BUZZ_Stop>
}
 80034f8:	bf00      	nop
 80034fa:	3708      	adds	r7, #8
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	08007e98 	.word	0x08007e98
 8003504:	08007eb4 	.word	0x08007eb4
 8003508:	08007ed0 	.word	0x08007ed0

0800350c <PLAY_Pacman_dead>:

void PLAY_Pacman_dead(void) {
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
	BUZZ_Start();
 8003512:	f7ff ff05 	bl	8003320 <BUZZ_Start>
	for (size_t i = 0; i < VOICE_LEN_2; ++i) {
 8003516:	2300      	movs	r3, #0
 8003518:	607b      	str	r3, [r7, #4]
 800351a:	e021      	b.n	8003560 <PLAY_Pacman_dead+0x54>
		BUZZ_SetFreq_TIM1(voice5_freq[i]); /* 멜로디 */
 800351c:	4a15      	ldr	r2, [pc, #84]	@ (8003574 <PLAY_Pacman_dead+0x68>)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003524:	4618      	mov	r0, r3
 8003526:	f7ff ff23 	bl	8003370 <BUZZ_SetFreq_TIM1>
		BUZZ_SetFreq_TIM3(voice6_freq[i]); /* 하모니 */
 800352a:	4a13      	ldr	r2, [pc, #76]	@ (8003578 <PLAY_Pacman_dead+0x6c>)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003532:	4618      	mov	r0, r3
 8003534:	f7ff ff2c 	bl	8003390 <BUZZ_SetFreq_TIM3>
		HAL_Delay(voice_dur_death[i] - 10);
 8003538:	4a10      	ldr	r2, [pc, #64]	@ (800357c <PLAY_Pacman_dead+0x70>)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003540:	3b0a      	subs	r3, #10
 8003542:	4618      	mov	r0, r3
 8003544:	f001 f996 	bl	8004874 <HAL_Delay>
		/* 짧은 스택카토 */
		BUZZ_SetFreq_TIM1(0);
 8003548:	2000      	movs	r0, #0
 800354a:	f7ff ff11 	bl	8003370 <BUZZ_SetFreq_TIM1>
		BUZZ_SetFreq_TIM3(0);
 800354e:	2000      	movs	r0, #0
 8003550:	f7ff ff1e 	bl	8003390 <BUZZ_SetFreq_TIM3>
		HAL_Delay(10);
 8003554:	200a      	movs	r0, #10
 8003556:	f001 f98d 	bl	8004874 <HAL_Delay>
	for (size_t i = 0; i < VOICE_LEN_2; ++i) {
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	3301      	adds	r3, #1
 800355e:	607b      	str	r3, [r7, #4]
 8003560:	220a      	movs	r2, #10
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4293      	cmp	r3, r2
 8003566:	d3d9      	bcc.n	800351c <PLAY_Pacman_dead+0x10>
	}
	BUZZ_Stop();
 8003568:	f7ff feea 	bl	8003340 <BUZZ_Stop>
}
 800356c:	bf00      	nop
 800356e:	3708      	adds	r7, #8
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	08007eec 	.word	0x08007eec
 8003578:	08007f00 	.word	0x08007f00
 800357c:	08007f14 	.word	0x08007f14

08003580 <PLAY_Pacman_clear>:

void PLAY_Pacman_clear(void) {
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
	BUZZ_Start();
 8003586:	f7ff fecb 	bl	8003320 <BUZZ_Start>
	for (size_t i = 0; i < VOICE_LEN_3; ++i) {
 800358a:	2300      	movs	r3, #0
 800358c:	607b      	str	r3, [r7, #4]
 800358e:	e021      	b.n	80035d4 <PLAY_Pacman_clear+0x54>
		BUZZ_SetFreq_TIM1(voice7_freq[i]); /* 멜로디 */
 8003590:	4a15      	ldr	r2, [pc, #84]	@ (80035e8 <PLAY_Pacman_clear+0x68>)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003598:	4618      	mov	r0, r3
 800359a:	f7ff fee9 	bl	8003370 <BUZZ_SetFreq_TIM1>
		BUZZ_SetFreq_TIM3(voice8_freq[i]); /* 하모니 */
 800359e:	4a13      	ldr	r2, [pc, #76]	@ (80035ec <PLAY_Pacman_clear+0x6c>)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7ff fef2 	bl	8003390 <BUZZ_SetFreq_TIM3>
		HAL_Delay(voice_dur_clear[i] - 10);
 80035ac:	4a10      	ldr	r2, [pc, #64]	@ (80035f0 <PLAY_Pacman_clear+0x70>)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035b4:	3b0a      	subs	r3, #10
 80035b6:	4618      	mov	r0, r3
 80035b8:	f001 f95c 	bl	8004874 <HAL_Delay>
		/* 짧은 스택카토 */
		BUZZ_SetFreq_TIM1(0);
 80035bc:	2000      	movs	r0, #0
 80035be:	f7ff fed7 	bl	8003370 <BUZZ_SetFreq_TIM1>
		BUZZ_SetFreq_TIM3(0);
 80035c2:	2000      	movs	r0, #0
 80035c4:	f7ff fee4 	bl	8003390 <BUZZ_SetFreq_TIM3>
		HAL_Delay(10);
 80035c8:	200a      	movs	r0, #10
 80035ca:	f001 f953 	bl	8004874 <HAL_Delay>
	for (size_t i = 0; i < VOICE_LEN_3; ++i) {
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	3301      	adds	r3, #1
 80035d2:	607b      	str	r3, [r7, #4]
 80035d4:	2209      	movs	r2, #9
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4293      	cmp	r3, r2
 80035da:	d3d9      	bcc.n	8003590 <PLAY_Pacman_clear+0x10>
	}
	BUZZ_Stop();
 80035dc:	f7ff feb0 	bl	8003340 <BUZZ_Stop>
}
 80035e0:	bf00      	nop
 80035e2:	3708      	adds	r7, #8
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	08007f28 	.word	0x08007f28
 80035ec:	08007f3c 	.word	0x08007f3c
 80035f0:	08007f50 	.word	0x08007f50

080035f4 <GameScreen_DrawMap>:

/* ----------------------------- Game UI ----------------------------- */

// 미로와 도트 그리기
void GameScreen_DrawMap(void) {
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af02      	add	r7, sp, #8
	ILI9341_FillScreen(COLOR_BLACK);
 80035fa:	2000      	movs	r0, #0
 80035fc:	f7fd fa60 	bl	8000ac0 <ILI9341_FillScreen>
	for (int y = 0; y < 20; y++) {
 8003600:	2300      	movs	r3, #0
 8003602:	60fb      	str	r3, [r7, #12]
 8003604:	e041      	b.n	800368a <GameScreen_DrawMap+0x96>
		for (int x = 0; x < 15; x++) {
 8003606:	2300      	movs	r3, #0
 8003608:	60bb      	str	r3, [r7, #8]
 800360a:	e038      	b.n	800367e <GameScreen_DrawMap+0x8a>
			int px = x * GRID_SIZE;
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	011b      	lsls	r3, r3, #4
 8003610:	607b      	str	r3, [r7, #4]
			int py = y * GRID_SIZE;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	011b      	lsls	r3, r3, #4
 8003616:	603b      	str	r3, [r7, #0]
			if (game_map[y][x] == 1) {
 8003618:	4920      	ldr	r1, [pc, #128]	@ (800369c <GameScreen_DrawMap+0xa8>)
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	4613      	mov	r3, r2
 800361e:	011b      	lsls	r3, r3, #4
 8003620:	1a9b      	subs	r3, r3, r2
 8003622:	18ca      	adds	r2, r1, r3
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	4413      	add	r3, r2
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d10a      	bne.n	8003644 <GameScreen_DrawMap+0x50>
				// 벽 (파란색)
				ILI9341_FillRect(px, py, GRID_SIZE, GRID_SIZE, COLOR_BLUE);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	b298      	uxth	r0, r3
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	b299      	uxth	r1, r3
 8003636:	231f      	movs	r3, #31
 8003638:	9300      	str	r3, [sp, #0]
 800363a:	2310      	movs	r3, #16
 800363c:	2210      	movs	r2, #16
 800363e:	f7fd f9f4 	bl	8000a2a <ILI9341_FillRect>
 8003642:	e019      	b.n	8003678 <GameScreen_DrawMap+0x84>
			} else if (game_map[y][x] == 2) {
 8003644:	4915      	ldr	r1, [pc, #84]	@ (800369c <GameScreen_DrawMap+0xa8>)
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	4613      	mov	r3, r2
 800364a:	011b      	lsls	r3, r3, #4
 800364c:	1a9b      	subs	r3, r3, r2
 800364e:	18ca      	adds	r2, r1, r3
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	4413      	add	r3, r2
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	2b02      	cmp	r3, #2
 8003658:	d10e      	bne.n	8003678 <GameScreen_DrawMap+0x84>
				// 도트 (흰색)
				ILI9341_FillRect(px + GRID_SIZE / 2 - DOT_SIZE / 2,
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	b29b      	uxth	r3, r3
 800365e:	3306      	adds	r3, #6
 8003660:	b298      	uxth	r0, r3
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	b29b      	uxth	r3, r3
 8003666:	3306      	adds	r3, #6
 8003668:	b299      	uxth	r1, r3
 800366a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800366e:	9300      	str	r3, [sp, #0]
 8003670:	2304      	movs	r3, #4
 8003672:	2204      	movs	r2, #4
 8003674:	f7fd f9d9 	bl	8000a2a <ILI9341_FillRect>
		for (int x = 0; x < 15; x++) {
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	3301      	adds	r3, #1
 800367c:	60bb      	str	r3, [r7, #8]
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	2b0e      	cmp	r3, #14
 8003682:	ddc3      	ble.n	800360c <GameScreen_DrawMap+0x18>
	for (int y = 0; y < 20; y++) {
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	3301      	adds	r3, #1
 8003688:	60fb      	str	r3, [r7, #12]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2b13      	cmp	r3, #19
 800368e:	ddba      	ble.n	8003606 <GameScreen_DrawMap+0x12>
						py + GRID_SIZE / 2 - DOT_SIZE / 2,
						DOT_SIZE, DOT_SIZE, COLOR_WHITE);
			}
		}
	}
}
 8003690:	bf00      	nop
 8003692:	bf00      	nop
 8003694:	3710      	adds	r7, #16
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	20000030 	.word	0x20000030

080036a0 <Game_ResetMap>:

void Game_ResetMap(void) {
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b0cc      	sub	sp, #304	@ 0x130
 80036a4:	af00      	add	r7, sp, #0
	uint8_t initial_map[20][15] = { { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
 80036a6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80036aa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80036ae:	4a0f      	ldr	r2, [pc, #60]	@ (80036ec <Game_ResetMap+0x4c>)
 80036b0:	4618      	mov	r0, r3
 80036b2:	4611      	mov	r1, r2
 80036b4:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80036b8:	461a      	mov	r2, r3
 80036ba:	f002 ffd7 	bl	800666c <memcpy>
					1 }, { 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1 }, { 1,
					2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1 }, { 1, 2, 1, 2, 1,
					1, 1, 1, 1, 1, 1, 2, 1, 2, 1 }, { 1, 2, 1, 2, 2, 2, 2, 2, 2,
					2, 2, 2, 1, 2, 1 }, { 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
					2, 1 }, { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 } };
	memcpy(game_map, initial_map, sizeof(game_map));
 80036be:	4a0c      	ldr	r2, [pc, #48]	@ (80036f0 <Game_ResetMap+0x50>)
 80036c0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80036c4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80036c8:	4610      	mov	r0, r2
 80036ca:	4619      	mov	r1, r3
 80036cc:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80036d0:	461a      	mov	r2, r3
 80036d2:	f002 ffcb 	bl	800666c <memcpy>

	// 2. 화면 다시 그리기
	GameScreen_DrawMap();
 80036d6:	f7ff ff8d 	bl	80035f4 <GameScreen_DrawMap>
	score = 0;
 80036da:	4b06      	ldr	r3, [pc, #24]	@ (80036f4 <Game_ResetMap+0x54>)
 80036dc:	2200      	movs	r2, #0
 80036de:	601a      	str	r2, [r3, #0]
}
 80036e0:	bf00      	nop
 80036e2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	08007c54 	.word	0x08007c54
 80036f0:	20000030 	.word	0x20000030
 80036f4:	200002c4 	.word	0x200002c4

080036f8 <GameScreen_DrawEntities>:

// 팩맨과 고스트 그리기
void GameScreen_DrawEntities(void) {
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af02      	add	r7, sp, #8
	// 팩맨 그리기
	DrawPacman(pacman.x * GRID_SIZE + GRID_SIZE / 2,
 80036fe:	4b13      	ldr	r3, [pc, #76]	@ (800374c <GameScreen_DrawEntities+0x54>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	011b      	lsls	r3, r3, #4
 8003704:	f103 0008 	add.w	r0, r3, #8
			pacman.y * GRID_SIZE + GRID_SIZE / 2,
 8003708:	4b10      	ldr	r3, [pc, #64]	@ (800374c <GameScreen_DrawEntities+0x54>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	011b      	lsls	r3, r3, #4
	DrawPacman(pacman.x * GRID_SIZE + GRID_SIZE / 2,
 800370e:	f103 0108 	add.w	r1, r3, #8
 8003712:	4b0e      	ldr	r3, [pc, #56]	@ (800374c <GameScreen_DrawEntities+0x54>)
 8003714:	899b      	ldrh	r3, [r3, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	9201      	str	r2, [sp, #4]
 800371a:	9300      	str	r3, [sp, #0]
 800371c:	4b0c      	ldr	r3, [pc, #48]	@ (8003750 <GameScreen_DrawEntities+0x58>)
 800371e:	2206      	movs	r2, #6
 8003720:	f7fd fd0a 	bl	8001138 <DrawPacman>
			GRID_SIZE / 2 - 2, 40.f, pacman.color, COLOR_BLACK);

	// 고스트 그리기 (단순화)
	DrawGhost(ghost.x * GRID_SIZE + 2, ghost.y * GRID_SIZE + 2,
 8003724:	4b0b      	ldr	r3, [pc, #44]	@ (8003754 <GameScreen_DrawEntities+0x5c>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	011b      	lsls	r3, r3, #4
 800372a:	1c98      	adds	r0, r3, #2
 800372c:	4b09      	ldr	r3, [pc, #36]	@ (8003754 <GameScreen_DrawEntities+0x5c>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	011b      	lsls	r3, r3, #4
 8003732:	1c99      	adds	r1, r3, #2
 8003734:	4b07      	ldr	r3, [pc, #28]	@ (8003754 <GameScreen_DrawEntities+0x5c>)
 8003736:	899b      	ldrh	r3, [r3, #12]
 8003738:	221f      	movs	r2, #31
 800373a:	9201      	str	r2, [sp, #4]
 800373c:	9300      	str	r3, [sp, #0]
 800373e:	230c      	movs	r3, #12
 8003740:	220c      	movs	r2, #12
 8003742:	f7fe f8c3 	bl	80018cc <DrawGhost>
	GRID_SIZE - 4, GRID_SIZE - 4, ghost.color, COLOR_BLUE);
}
 8003746:	bf00      	nop
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	20000000 	.word	0x20000000
 8003750:	42200000 	.word	0x42200000
 8003754:	20000010 	.word	0x20000010

08003758 <get_next_pacman_dir>:

/* ----------------------------- Game Logic ----------------------------- */

// 버튼 입력에 따라 팩맨의 다음 방향 결정
int get_next_pacman_dir(void) {
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
	int direction;

	// 각 버튼의 현재 상태를 변수로 저장
	GPIO_PinState up_state = HAL_GPIO_ReadPin(UP_GPIO_Port, UP_Pin);
 800375e:	2104      	movs	r1, #4
 8003760:	481c      	ldr	r0, [pc, #112]	@ (80037d4 <get_next_pacman_dir+0x7c>)
 8003762:	f001 fb3d 	bl	8004de0 <HAL_GPIO_ReadPin>
 8003766:	4603      	mov	r3, r0
 8003768:	70fb      	strb	r3, [r7, #3]
	GPIO_PinState down_state = HAL_GPIO_ReadPin(DOWN_GPIO_Port, DOWN_Pin);
 800376a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800376e:	481a      	ldr	r0, [pc, #104]	@ (80037d8 <get_next_pacman_dir+0x80>)
 8003770:	f001 fb36 	bl	8004de0 <HAL_GPIO_ReadPin>
 8003774:	4603      	mov	r3, r0
 8003776:	70bb      	strb	r3, [r7, #2]
	GPIO_PinState left_state = HAL_GPIO_ReadPin(LEFT_GPIO_Port, LEFT_Pin);
 8003778:	2108      	movs	r1, #8
 800377a:	4816      	ldr	r0, [pc, #88]	@ (80037d4 <get_next_pacman_dir+0x7c>)
 800377c:	f001 fb30 	bl	8004de0 <HAL_GPIO_ReadPin>
 8003780:	4603      	mov	r3, r0
 8003782:	707b      	strb	r3, [r7, #1]
	GPIO_PinState right_state = HAL_GPIO_ReadPin(RIGHT_GPIO_Port, RIGHT_Pin);
 8003784:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003788:	4813      	ldr	r0, [pc, #76]	@ (80037d8 <get_next_pacman_dir+0x80>)
 800378a:	f001 fb29 	bl	8004de0 <HAL_GPIO_ReadPin>
 800378e:	4603      	mov	r3, r0
 8003790:	703b      	strb	r3, [r7, #0]

	// 디버깅용: watch 창에서 이 변수들을 보면 됨
	if (up_state == GPIO_PIN_RESET)
 8003792:	78fb      	ldrb	r3, [r7, #3]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d102      	bne.n	800379e <get_next_pacman_dir+0x46>
		direction = 1;
 8003798:	2301      	movs	r3, #1
 800379a:	607b      	str	r3, [r7, #4]
 800379c:	e014      	b.n	80037c8 <get_next_pacman_dir+0x70>
	else if (left_state == GPIO_PIN_RESET)
 800379e:	787b      	ldrb	r3, [r7, #1]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d102      	bne.n	80037aa <get_next_pacman_dir+0x52>
		direction = 2;
 80037a4:	2302      	movs	r3, #2
 80037a6:	607b      	str	r3, [r7, #4]
 80037a8:	e00e      	b.n	80037c8 <get_next_pacman_dir+0x70>
	else if (right_state == GPIO_PIN_RESET)
 80037aa:	783b      	ldrb	r3, [r7, #0]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d102      	bne.n	80037b6 <get_next_pacman_dir+0x5e>
		direction = 0;
 80037b0:	2300      	movs	r3, #0
 80037b2:	607b      	str	r3, [r7, #4]
 80037b4:	e008      	b.n	80037c8 <get_next_pacman_dir+0x70>
	else if (down_state == GPIO_PIN_RESET)
 80037b6:	78bb      	ldrb	r3, [r7, #2]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d102      	bne.n	80037c2 <get_next_pacman_dir+0x6a>
		direction = 3;
 80037bc:	2303      	movs	r3, #3
 80037be:	607b      	str	r3, [r7, #4]
 80037c0:	e002      	b.n	80037c8 <get_next_pacman_dir+0x70>
	else
		direction = -1;
 80037c2:	f04f 33ff 	mov.w	r3, #4294967295
 80037c6:	607b      	str	r3, [r7, #4]

	return direction;
 80037c8:	687b      	ldr	r3, [r7, #4]
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3708      	adds	r7, #8
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	40011000 	.word	0x40011000
 80037d8:	40010c00 	.word	0x40010c00

080037dc <Update_Pacman_Logic>:

// 팩맨 이동 및 도트 처리 로직
void Update_Pacman_Logic(void) {
 80037dc:	b580      	push	{r7, lr}
 80037de:	b088      	sub	sp, #32
 80037e0:	af00      	add	r7, sp, #0
	// 1. ✨ 화면 업데이트를 위해 현재 위치를 이전 위치로 저장 (이동 시도 전에 저장해야 함)
	pacman_old_x = pacman.x;
 80037e2:	4b42      	ldr	r3, [pc, #264]	@ (80038ec <Update_Pacman_Logic+0x110>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a42      	ldr	r2, [pc, #264]	@ (80038f0 <Update_Pacman_Logic+0x114>)
 80037e8:	6013      	str	r3, [r2, #0]
	pacman_old_y = pacman.y;
 80037ea:	4b40      	ldr	r3, [pc, #256]	@ (80038ec <Update_Pacman_Logic+0x110>)
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	4a41      	ldr	r2, [pc, #260]	@ (80038f4 <Update_Pacman_Logic+0x118>)
 80037f0:	6013      	str	r3, [r2, #0]

	int input_dir = get_next_pacman_dir();
 80037f2:	f7ff ffb1 	bl	8003758 <get_next_pacman_dir>
 80037f6:	6178      	str	r0, [r7, #20]

	// 입력이 없으면 움직이지 않고, 화면 업데이트가 되지 않도록 여기서 바로 종료
	if (input_dir == -1) {
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037fe:	d070      	beq.n	80038e2 <Update_Pacman_Logic+0x106>
		// pacman.x == pacman_old_x 상태로 유지되어 GameScreen_Update_Screen에서 지우지 않음
		return;
	}

	int next_x = pacman.x;
 8003800:	4b3a      	ldr	r3, [pc, #232]	@ (80038ec <Update_Pacman_Logic+0x110>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	61fb      	str	r3, [r7, #28]
	int next_y = pacman.y;
 8003806:	4b39      	ldr	r3, [pc, #228]	@ (80038ec <Update_Pacman_Logic+0x110>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	61bb      	str	r3, [r7, #24]

	// 다음 위치 계산 (0:Right, 1:Up, 2:Left, 3:Down)
	if (input_dir == 0)
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d103      	bne.n	800381a <Update_Pacman_Logic+0x3e>
		next_x++;
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	3301      	adds	r3, #1
 8003816:	61fb      	str	r3, [r7, #28]
 8003818:	e013      	b.n	8003842 <Update_Pacman_Logic+0x66>
	else if (input_dir == 1)
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d103      	bne.n	8003828 <Update_Pacman_Logic+0x4c>
		next_y--;
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	3b01      	subs	r3, #1
 8003824:	61bb      	str	r3, [r7, #24]
 8003826:	e00c      	b.n	8003842 <Update_Pacman_Logic+0x66>
	else if (input_dir == 2)
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	2b02      	cmp	r3, #2
 800382c:	d103      	bne.n	8003836 <Update_Pacman_Logic+0x5a>
		next_x--;
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	3b01      	subs	r3, #1
 8003832:	61fb      	str	r3, [r7, #28]
 8003834:	e005      	b.n	8003842 <Update_Pacman_Logic+0x66>
	else if (input_dir == 3)
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	2b03      	cmp	r3, #3
 800383a:	d102      	bne.n	8003842 <Update_Pacman_Logic+0x66>
		next_y++;
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	3301      	adds	r3, #1
 8003840:	61bb      	str	r3, [r7, #24]

	// 충돌 검사 (벽=1)
	if (next_x >= 0 && next_x < 15 && next_y >= 0 && next_y < 20
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	2b00      	cmp	r3, #0
 8003846:	db4d      	blt.n	80038e4 <Update_Pacman_Logic+0x108>
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	2b0e      	cmp	r3, #14
 800384c:	dc4a      	bgt.n	80038e4 <Update_Pacman_Logic+0x108>
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	2b00      	cmp	r3, #0
 8003852:	db47      	blt.n	80038e4 <Update_Pacman_Logic+0x108>
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	2b13      	cmp	r3, #19
 8003858:	dc44      	bgt.n	80038e4 <Update_Pacman_Logic+0x108>
			&& game_map[next_y][next_x] != 1) {
 800385a:	4927      	ldr	r1, [pc, #156]	@ (80038f8 <Update_Pacman_Logic+0x11c>)
 800385c:	69ba      	ldr	r2, [r7, #24]
 800385e:	4613      	mov	r3, r2
 8003860:	011b      	lsls	r3, r3, #4
 8003862:	1a9b      	subs	r3, r3, r2
 8003864:	18ca      	adds	r2, r1, r3
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	4413      	add	r3, r2
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d039      	beq.n	80038e4 <Update_Pacman_Logic+0x108>
		// 움직임 허용
		pacman.x = next_x;
 8003870:	4a1e      	ldr	r2, [pc, #120]	@ (80038ec <Update_Pacman_Logic+0x110>)
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	6013      	str	r3, [r2, #0]
		pacman.y = next_y;
 8003876:	4a1d      	ldr	r2, [pc, #116]	@ (80038ec <Update_Pacman_Logic+0x110>)
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	6053      	str	r3, [r2, #4]

		// 🚨 이동 성공 시에만 방향 업데이트
		pacman.dir = input_dir;
 800387c:	4a1b      	ldr	r2, [pc, #108]	@ (80038ec <Update_Pacman_Logic+0x110>)
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	6093      	str	r3, [r2, #8]
		char str_buffer[17];

		// 도트(2) 먹기
		if (game_map[pacman.y][pacman.x] == 2) {
 8003882:	4b1a      	ldr	r3, [pc, #104]	@ (80038ec <Update_Pacman_Logic+0x110>)
 8003884:	685a      	ldr	r2, [r3, #4]
 8003886:	4b19      	ldr	r3, [pc, #100]	@ (80038ec <Update_Pacman_Logic+0x110>)
 8003888:	6819      	ldr	r1, [r3, #0]
 800388a:	481b      	ldr	r0, [pc, #108]	@ (80038f8 <Update_Pacman_Logic+0x11c>)
 800388c:	4613      	mov	r3, r2
 800388e:	011b      	lsls	r3, r3, #4
 8003890:	1a9b      	subs	r3, r3, r2
 8003892:	4403      	add	r3, r0
 8003894:	440b      	add	r3, r1
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	2b02      	cmp	r3, #2
 800389a:	d123      	bne.n	80038e4 <Update_Pacman_Logic+0x108>
			game_map[pacman.y][pacman.x] = 0; // 도트 제거
 800389c:	4b13      	ldr	r3, [pc, #76]	@ (80038ec <Update_Pacman_Logic+0x110>)
 800389e:	685a      	ldr	r2, [r3, #4]
 80038a0:	4b12      	ldr	r3, [pc, #72]	@ (80038ec <Update_Pacman_Logic+0x110>)
 80038a2:	6819      	ldr	r1, [r3, #0]
 80038a4:	4814      	ldr	r0, [pc, #80]	@ (80038f8 <Update_Pacman_Logic+0x11c>)
 80038a6:	4613      	mov	r3, r2
 80038a8:	011b      	lsls	r3, r3, #4
 80038aa:	1a9b      	subs	r3, r3, r2
 80038ac:	4403      	add	r3, r0
 80038ae:	440b      	add	r3, r1
 80038b0:	2200      	movs	r2, #0
 80038b2:	701a      	strb	r2, [r3, #0]

			// 💰 아이템 획득 사운드 (간단한 고음 재생)
			PLAY_Pacman_eating();
 80038b4:	f7ff fd7c 	bl	80033b0 <PLAY_Pacman_eating>
			score = score + 5;
 80038b8:	4b10      	ldr	r3, [pc, #64]	@ (80038fc <Update_Pacman_Logic+0x120>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	3305      	adds	r3, #5
 80038be:	4a0f      	ldr	r2, [pc, #60]	@ (80038fc <Update_Pacman_Logic+0x120>)
 80038c0:	6013      	str	r3, [r2, #0]

			 // 문자열을 저장할 버퍼 (16글자 + null 종료 문자)

			// 1. 커서 이동 (0행 1열, 즉 두 번째 줄 시작)
			LCD_XY(0, 1);
 80038c2:	2101      	movs	r1, #1
 80038c4:	2000      	movs	r0, #0
 80038c6:	f000 fb1f 	bl	8003f08 <LCD_XY>

			// 2. 숫자 값을 문자열로 변환
			// 'score' 변수의 값을 10진수 문자열로 변환하여 str_buffer에 저장합니다.
			sprintf(str_buffer, "SCORE: %*d   ", SCORE_MAX_DIGITS, score);
 80038ca:	4b0c      	ldr	r3, [pc, #48]	@ (80038fc <Update_Pacman_Logic+0x120>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4638      	mov	r0, r7
 80038d0:	2206      	movs	r2, #6
 80038d2:	490b      	ldr	r1, [pc, #44]	@ (8003900 <Update_Pacman_Logic+0x124>)
 80038d4:	f002 fe74 	bl	80065c0 <siprintf>

			// 3. 문자열 출력
			LCD_PUTS(str_buffer);
 80038d8:	463b      	mov	r3, r7
 80038da:	4618      	mov	r0, r3
 80038dc:	f000 fb47 	bl	8003f6e <LCD_PUTS>
 80038e0:	e000      	b.n	80038e4 <Update_Pacman_Logic+0x108>
		return;
 80038e2:	bf00      	nop
	} else {
		// 🚨 벽에 막혀 움직이지 못한 경우:
		// pacman.x가 pacman_old_x와 같아지도록 원래대로 놔둠.
		// 이는 GameScreen_Update_Screen에서 팩맨을 지우지 않도록 보장함.
	}
}
 80038e4:	3720      	adds	r7, #32
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	20000000 	.word	0x20000000
 80038f0:	20000020 	.word	0x20000020
 80038f4:	20000024 	.word	0x20000024
 80038f8:	20000030 	.word	0x20000030
 80038fc:	200002c4 	.word	0x200002c4
 8003900:	08007d80 	.word	0x08007d80

08003904 <Update_Ghost_Logic>:

// 고스트 이동 (단순 무작위 이동)
void Update_Ghost_Logic(void) {
 8003904:	b590      	push	{r4, r7, lr}
 8003906:	b08b      	sub	sp, #44	@ 0x2c
 8003908:	af00      	add	r7, sp, #0
	// ✨ 1. 현재 위치를 이전 위치로 저장 (화면 지우기를 위해)
	ghost_old_x = ghost.x;
 800390a:	4b30      	ldr	r3, [pc, #192]	@ (80039cc <Update_Ghost_Logic+0xc8>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a30      	ldr	r2, [pc, #192]	@ (80039d0 <Update_Ghost_Logic+0xcc>)
 8003910:	6013      	str	r3, [r2, #0]
	ghost_old_y = ghost.y;
 8003912:	4b2e      	ldr	r3, [pc, #184]	@ (80039cc <Update_Ghost_Logic+0xc8>)
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	4a2f      	ldr	r2, [pc, #188]	@ (80039d4 <Update_Ghost_Logic+0xd0>)
 8003918:	6013      	str	r3, [r2, #0]

	if (HAL_GetTick() - ghost_last_move_time < 200)
 800391a:	f000 ffa1 	bl	8004860 <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	4b2d      	ldr	r3, [pc, #180]	@ (80039d8 <Update_Ghost_Logic+0xd4>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2bc7      	cmp	r3, #199	@ 0xc7
 8003928:	d94b      	bls.n	80039c2 <Update_Ghost_Logic+0xbe>
		return; // 200ms마다 이동
	ghost_last_move_time = HAL_GetTick();
 800392a:	f000 ff99 	bl	8004860 <HAL_GetTick>
 800392e:	4603      	mov	r3, r0
 8003930:	4a29      	ldr	r2, [pc, #164]	@ (80039d8 <Update_Ghost_Logic+0xd4>)
 8003932:	6013      	str	r3, [r2, #0]

	int dx[] = { 1, 0, -1, 0 }; // R, U, L, D
 8003934:	4b29      	ldr	r3, [pc, #164]	@ (80039dc <Update_Ghost_Logic+0xd8>)
 8003936:	f107 0410 	add.w	r4, r7, #16
 800393a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800393c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int dy[] = { 0, -1, 0, 1 };
 8003940:	4b27      	ldr	r3, [pc, #156]	@ (80039e0 <Update_Ghost_Logic+0xdc>)
 8003942:	463c      	mov	r4, r7
 8003944:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003946:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	int next_x = ghost.x + dx[ghost.dir];
 800394a:	4b20      	ldr	r3, [pc, #128]	@ (80039cc <Update_Ghost_Logic+0xc8>)
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	4b1f      	ldr	r3, [pc, #124]	@ (80039cc <Update_Ghost_Logic+0xc8>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	3328      	adds	r3, #40	@ 0x28
 8003956:	443b      	add	r3, r7
 8003958:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800395c:	4413      	add	r3, r2
 800395e:	627b      	str	r3, [r7, #36]	@ 0x24
	int next_y = ghost.y + dy[ghost.dir];
 8003960:	4b1a      	ldr	r3, [pc, #104]	@ (80039cc <Update_Ghost_Logic+0xc8>)
 8003962:	685a      	ldr	r2, [r3, #4]
 8003964:	4b19      	ldr	r3, [pc, #100]	@ (80039cc <Update_Ghost_Logic+0xc8>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	3328      	adds	r3, #40	@ 0x28
 800396c:	443b      	add	r3, r7
 800396e:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8003972:	4413      	add	r3, r2
 8003974:	623b      	str	r3, [r7, #32]

	// 벽에 부딪히거나 통로가 막혔을 경우 무작위 방향으로 변경
	if (next_x < 0 || next_x >= 15 || next_y < 0 || next_y >= 20
 8003976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003978:	2b00      	cmp	r3, #0
 800397a:	db13      	blt.n	80039a4 <Update_Ghost_Logic+0xa0>
 800397c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800397e:	2b0e      	cmp	r3, #14
 8003980:	dc10      	bgt.n	80039a4 <Update_Ghost_Logic+0xa0>
 8003982:	6a3b      	ldr	r3, [r7, #32]
 8003984:	2b00      	cmp	r3, #0
 8003986:	db0d      	blt.n	80039a4 <Update_Ghost_Logic+0xa0>
 8003988:	6a3b      	ldr	r3, [r7, #32]
 800398a:	2b13      	cmp	r3, #19
 800398c:	dc0a      	bgt.n	80039a4 <Update_Ghost_Logic+0xa0>
			|| game_map[next_y][next_x] == 1) {
 800398e:	4915      	ldr	r1, [pc, #84]	@ (80039e4 <Update_Ghost_Logic+0xe0>)
 8003990:	6a3a      	ldr	r2, [r7, #32]
 8003992:	4613      	mov	r3, r2
 8003994:	011b      	lsls	r3, r3, #4
 8003996:	1a9b      	subs	r3, r3, r2
 8003998:	18ca      	adds	r2, r1, r3
 800399a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399c:	4413      	add	r3, r2
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d107      	bne.n	80039b4 <Update_Ghost_Logic+0xb0>
		ghost.dir = HAL_GetTick() % 4; // 방향 전환
 80039a4:	f000 ff5c 	bl	8004860 <HAL_GetTick>
 80039a8:	4603      	mov	r3, r0
 80039aa:	f003 0303 	and.w	r3, r3, #3
 80039ae:	4a07      	ldr	r2, [pc, #28]	@ (80039cc <Update_Ghost_Logic+0xc8>)
 80039b0:	6093      	str	r3, [r2, #8]
 80039b2:	e007      	b.n	80039c4 <Update_Ghost_Logic+0xc0>
	} else {
		ghost.x = next_x;
 80039b4:	4a05      	ldr	r2, [pc, #20]	@ (80039cc <Update_Ghost_Logic+0xc8>)
 80039b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b8:	6013      	str	r3, [r2, #0]
		ghost.y = next_y;
 80039ba:	4a04      	ldr	r2, [pc, #16]	@ (80039cc <Update_Ghost_Logic+0xc8>)
 80039bc:	6a3b      	ldr	r3, [r7, #32]
 80039be:	6053      	str	r3, [r2, #4]
 80039c0:	e000      	b.n	80039c4 <Update_Ghost_Logic+0xc0>
		return; // 200ms마다 이동
 80039c2:	bf00      	nop
	}
}
 80039c4:	372c      	adds	r7, #44	@ 0x2c
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd90      	pop	{r4, r7, pc}
 80039ca:	bf00      	nop
 80039cc:	20000010 	.word	0x20000010
 80039d0:	20000028 	.word	0x20000028
 80039d4:	2000002c 	.word	0x2000002c
 80039d8:	200002b8 	.word	0x200002b8
 80039dc:	08007d90 	.word	0x08007d90
 80039e0:	08007da0 	.word	0x08007da0
 80039e4:	20000030 	.word	0x20000030

080039e8 <Update_Game_Logic>:

void Update_Game_Logic(void) {
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
	// 1. 팩맨 이동
	Update_Pacman_Logic();
 80039ee:	f7ff fef5 	bl	80037dc <Update_Pacman_Logic>

	// 2. 고스트 이동
	Update_Ghost_Logic();
 80039f2:	f7ff ff87 	bl	8003904 <Update_Ghost_Logic>

	// 3. 충돌 검사 (팩맨과 고스트가 같은 칸에 있는지)
	if (pacman.x == ghost.x && pacman.y == ghost.y) {
 80039f6:	4b30      	ldr	r3, [pc, #192]	@ (8003ab8 <Update_Game_Logic+0xd0>)
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	4b30      	ldr	r3, [pc, #192]	@ (8003abc <Update_Game_Logic+0xd4>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d118      	bne.n	8003a34 <Update_Game_Logic+0x4c>
 8003a02:	4b2d      	ldr	r3, [pc, #180]	@ (8003ab8 <Update_Game_Logic+0xd0>)
 8003a04:	685a      	ldr	r2, [r3, #4]
 8003a06:	4b2d      	ldr	r3, [pc, #180]	@ (8003abc <Update_Game_Logic+0xd4>)
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d112      	bne.n	8003a34 <Update_Game_Logic+0x4c>

		//사망 화면

		// Game Over! (사망 효과음)
		PLAY_Pacman_dead();
 8003a0e:	f7ff fd7d 	bl	800350c <PLAY_Pacman_dead>
		DeadScreen_Draw();
 8003a12:	f7fe ff05 	bl	8002820 <DeadScreen_Draw>

		// 초기 리셋
		Game_ResetMap();
 8003a16:	f7ff fe43 	bl	80036a0 <Game_ResetMap>
		pacman.x = 1;
 8003a1a:	4b27      	ldr	r3, [pc, #156]	@ (8003ab8 <Update_Game_Logic+0xd0>)
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	601a      	str	r2, [r3, #0]
		pacman.y = 1;
 8003a20:	4b25      	ldr	r3, [pc, #148]	@ (8003ab8 <Update_Game_Logic+0xd0>)
 8003a22:	2201      	movs	r2, #1
 8003a24:	605a      	str	r2, [r3, #4]
		ghost.x = 13;
 8003a26:	4b25      	ldr	r3, [pc, #148]	@ (8003abc <Update_Game_Logic+0xd4>)
 8003a28:	220d      	movs	r2, #13
 8003a2a:	601a      	str	r2, [r3, #0]
		ghost.y = 10;
 8003a2c:	4b23      	ldr	r3, [pc, #140]	@ (8003abc <Update_Game_Logic+0xd4>)
 8003a2e:	220a      	movs	r2, #10
 8003a30:	605a      	str	r2, [r3, #4]
			pacman.y = 1;
			ghost.x = 13;
			ghost.y = 10;
		}
	}
}
 8003a32:	e03c      	b.n	8003aae <Update_Game_Logic+0xc6>
		int pellets_remaining = 0;
 8003a34:	2300      	movs	r3, #0
 8003a36:	60fb      	str	r3, [r7, #12]
		for (int y = 0; y < 20; y++) {
 8003a38:	2300      	movs	r3, #0
 8003a3a:	60bb      	str	r3, [r7, #8]
 8003a3c:	e01d      	b.n	8003a7a <Update_Game_Logic+0x92>
			for (int x = 0; x < 15; x++) {
 8003a3e:	2300      	movs	r3, #0
 8003a40:	607b      	str	r3, [r7, #4]
 8003a42:	e011      	b.n	8003a68 <Update_Game_Logic+0x80>
				if (game_map[y][x] == 2) {
 8003a44:	491e      	ldr	r1, [pc, #120]	@ (8003ac0 <Update_Game_Logic+0xd8>)
 8003a46:	68ba      	ldr	r2, [r7, #8]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	011b      	lsls	r3, r3, #4
 8003a4c:	1a9b      	subs	r3, r3, r2
 8003a4e:	18ca      	adds	r2, r1, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4413      	add	r3, r2
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d103      	bne.n	8003a62 <Update_Game_Logic+0x7a>
					pellets_remaining++;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	60fb      	str	r3, [r7, #12]
					break; // 하나라도 찾으면 루프 종료 후 카운트 증가
 8003a60:	e005      	b.n	8003a6e <Update_Game_Logic+0x86>
			for (int x = 0; x < 15; x++) {
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	3301      	adds	r3, #1
 8003a66:	607b      	str	r3, [r7, #4]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b0e      	cmp	r3, #14
 8003a6c:	ddea      	ble.n	8003a44 <Update_Game_Logic+0x5c>
			if (pellets_remaining > 0)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	dc06      	bgt.n	8003a82 <Update_Game_Logic+0x9a>
		for (int y = 0; y < 20; y++) {
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	3301      	adds	r3, #1
 8003a78:	60bb      	str	r3, [r7, #8]
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	2b13      	cmp	r3, #19
 8003a7e:	ddde      	ble.n	8003a3e <Update_Game_Logic+0x56>
 8003a80:	e000      	b.n	8003a84 <Update_Game_Logic+0x9c>
				break; // 불필요한 전체 순회 방지
 8003a82:	bf00      	nop
		if (pellets_remaining == 0) {
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d111      	bne.n	8003aae <Update_Game_Logic+0xc6>
			PLAY_Pacman_clear();
 8003a8a:	f7ff fd79 	bl	8003580 <PLAY_Pacman_clear>
			ClearScreen_Draw();
 8003a8e:	f7ff f9eb 	bl	8002e68 <ClearScreen_Draw>
			Game_ResetMap();
 8003a92:	f7ff fe05 	bl	80036a0 <Game_ResetMap>
			pacman.x = 1;
 8003a96:	4b08      	ldr	r3, [pc, #32]	@ (8003ab8 <Update_Game_Logic+0xd0>)
 8003a98:	2201      	movs	r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]
			pacman.y = 1;
 8003a9c:	4b06      	ldr	r3, [pc, #24]	@ (8003ab8 <Update_Game_Logic+0xd0>)
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	605a      	str	r2, [r3, #4]
			ghost.x = 13;
 8003aa2:	4b06      	ldr	r3, [pc, #24]	@ (8003abc <Update_Game_Logic+0xd4>)
 8003aa4:	220d      	movs	r2, #13
 8003aa6:	601a      	str	r2, [r3, #0]
			ghost.y = 10;
 8003aa8:	4b04      	ldr	r3, [pc, #16]	@ (8003abc <Update_Game_Logic+0xd4>)
 8003aaa:	220a      	movs	r2, #10
 8003aac:	605a      	str	r2, [r3, #4]
}
 8003aae:	bf00      	nop
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	20000000 	.word	0x20000000
 8003abc:	20000010 	.word	0x20000010
 8003ac0:	20000030 	.word	0x20000030

08003ac4 <GameScreen_Update_Screen>:

// **화면 업데이트 함수 (지우고 그리기)**

void GameScreen_Update_Screen(void) {
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af02      	add	r7, sp, #8

// 이전 위치를 배경색(BLACK)으로 지웁니다.
// 팩맨 이전 위치 지우기

	ILI9341_FillRect(pacman_old_x * GRID_SIZE, pacman_old_y * GRID_SIZE,
 8003aca:	4b34      	ldr	r3, [pc, #208]	@ (8003b9c <GameScreen_Update_Screen+0xd8>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	011b      	lsls	r3, r3, #4
 8003ad2:	b298      	uxth	r0, r3
 8003ad4:	4b32      	ldr	r3, [pc, #200]	@ (8003ba0 <GameScreen_Update_Screen+0xdc>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	011b      	lsls	r3, r3, #4
 8003adc:	b299      	uxth	r1, r3
 8003ade:	2300      	movs	r3, #0
 8003ae0:	9300      	str	r3, [sp, #0]
 8003ae2:	2310      	movs	r3, #16
 8003ae4:	2210      	movs	r2, #16
 8003ae6:	f7fc ffa0 	bl	8000a2a <ILI9341_FillRect>
	GRID_SIZE, GRID_SIZE, COLOR_BLACK);

	// 고스트 이전 위치 지우기
	ILI9341_FillRect(ghost_old_x * GRID_SIZE, ghost_old_y * GRID_SIZE,
 8003aea:	4b2e      	ldr	r3, [pc, #184]	@ (8003ba4 <GameScreen_Update_Screen+0xe0>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	011b      	lsls	r3, r3, #4
 8003af2:	b298      	uxth	r0, r3
 8003af4:	4b2c      	ldr	r3, [pc, #176]	@ (8003ba8 <GameScreen_Update_Screen+0xe4>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	011b      	lsls	r3, r3, #4
 8003afc:	b299      	uxth	r1, r3
 8003afe:	2300      	movs	r3, #0
 8003b00:	9300      	str	r3, [sp, #0]
 8003b02:	2310      	movs	r3, #16
 8003b04:	2210      	movs	r2, #16
 8003b06:	f7fc ff90 	bl	8000a2a <ILI9341_FillRect>
	GRID_SIZE, GRID_SIZE, COLOR_BLACK);

	// 맵의 도트가 지워졌을 수도 있으므로 이전 위치의 도트를 다시 그립니다.
	// ✨ 지워진 칸에 도트가 있다면 다시 그립니다.

	if (game_map[pacman_old_y][pacman_old_x] == 2) {
 8003b0a:	4b25      	ldr	r3, [pc, #148]	@ (8003ba0 <GameScreen_Update_Screen+0xdc>)
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	4b23      	ldr	r3, [pc, #140]	@ (8003b9c <GameScreen_Update_Screen+0xd8>)
 8003b10:	6819      	ldr	r1, [r3, #0]
 8003b12:	4826      	ldr	r0, [pc, #152]	@ (8003bac <GameScreen_Update_Screen+0xe8>)
 8003b14:	4613      	mov	r3, r2
 8003b16:	011b      	lsls	r3, r3, #4
 8003b18:	1a9b      	subs	r3, r3, r2
 8003b1a:	4403      	add	r3, r0
 8003b1c:	440b      	add	r3, r1
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d114      	bne.n	8003b4e <GameScreen_Update_Screen+0x8a>
		ILI9341_FillRect(
 8003b24:	4b1d      	ldr	r3, [pc, #116]	@ (8003b9c <GameScreen_Update_Screen+0xd8>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	011b      	lsls	r3, r3, #4
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	3306      	adds	r3, #6
 8003b30:	b298      	uxth	r0, r3
 8003b32:	4b1b      	ldr	r3, [pc, #108]	@ (8003ba0 <GameScreen_Update_Screen+0xdc>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	011b      	lsls	r3, r3, #4
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	3306      	adds	r3, #6
 8003b3e:	b299      	uxth	r1, r3
 8003b40:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	2304      	movs	r3, #4
 8003b48:	2204      	movs	r2, #4
 8003b4a:	f7fc ff6e 	bl	8000a2a <ILI9341_FillRect>
				pacman_old_x * GRID_SIZE + GRID_SIZE / 2 - DOT_SIZE / 2,
				pacman_old_y * GRID_SIZE + GRID_SIZE / 2 - DOT_SIZE / 2,
				DOT_SIZE, DOT_SIZE, COLOR_WHITE);
	}

	if (game_map[ghost_old_y][ghost_old_x] == 2) {
 8003b4e:	4b16      	ldr	r3, [pc, #88]	@ (8003ba8 <GameScreen_Update_Screen+0xe4>)
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	4b14      	ldr	r3, [pc, #80]	@ (8003ba4 <GameScreen_Update_Screen+0xe0>)
 8003b54:	6819      	ldr	r1, [r3, #0]
 8003b56:	4815      	ldr	r0, [pc, #84]	@ (8003bac <GameScreen_Update_Screen+0xe8>)
 8003b58:	4613      	mov	r3, r2
 8003b5a:	011b      	lsls	r3, r3, #4
 8003b5c:	1a9b      	subs	r3, r3, r2
 8003b5e:	4403      	add	r3, r0
 8003b60:	440b      	add	r3, r1
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d114      	bne.n	8003b92 <GameScreen_Update_Screen+0xce>

		ILI9341_FillRect(ghost_old_x * GRID_SIZE + GRID_SIZE / 2 - DOT_SIZE / 2,
 8003b68:	4b0e      	ldr	r3, [pc, #56]	@ (8003ba4 <GameScreen_Update_Screen+0xe0>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	011b      	lsls	r3, r3, #4
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	3306      	adds	r3, #6
 8003b74:	b298      	uxth	r0, r3
 8003b76:	4b0c      	ldr	r3, [pc, #48]	@ (8003ba8 <GameScreen_Update_Screen+0xe4>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	011b      	lsls	r3, r3, #4
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	3306      	adds	r3, #6
 8003b82:	b299      	uxth	r1, r3
 8003b84:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b88:	9300      	str	r3, [sp, #0]
 8003b8a:	2304      	movs	r3, #4
 8003b8c:	2204      	movs	r2, #4
 8003b8e:	f7fc ff4c 	bl	8000a2a <ILI9341_FillRect>

	}

// 현재 위치를 다시 그립니다.

	GameScreen_DrawEntities();
 8003b92:	f7ff fdb1 	bl	80036f8 <GameScreen_DrawEntities>

}
 8003b96:	bf00      	nop
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	20000020 	.word	0x20000020
 8003ba0:	20000024 	.word	0x20000024
 8003ba4:	20000028 	.word	0x20000028
 8003ba8:	2000002c 	.word	0x2000002c
 8003bac:	20000030 	.word	0x20000030

08003bb0 <delay_us>:
//	}
//
//	printf("Scan complete.\r\n");
//}

void delay_us(int us) {
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
	value = 3;
 8003bb8:	4b0d      	ldr	r3, [pc, #52]	@ (8003bf0 <delay_us+0x40>)
 8003bba:	2203      	movs	r2, #3
 8003bbc:	601a      	str	r2, [r3, #0]
	delay = us * value;
 8003bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8003bf0 <delay_us+0x40>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	fb02 f303 	mul.w	r3, r2, r3
 8003bc8:	4a0a      	ldr	r2, [pc, #40]	@ (8003bf4 <delay_us+0x44>)
 8003bca:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < delay; i++)
 8003bcc:	2300      	movs	r3, #0
 8003bce:	60fb      	str	r3, [r7, #12]
 8003bd0:	e002      	b.n	8003bd8 <delay_us+0x28>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	60fb      	str	r3, [r7, #12]
 8003bd8:	4b06      	ldr	r3, [pc, #24]	@ (8003bf4 <delay_us+0x44>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	dbf7      	blt.n	8003bd2 <delay_us+0x22>
		;
}
 8003be2:	bf00      	nop
 8003be4:	bf00      	nop
 8003be6:	3714      	adds	r7, #20
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bc80      	pop	{r7}
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	200002c0 	.word	0x200002c0
 8003bf4:	200002bc 	.word	0x200002bc

08003bf8 <I2C_Start>:
/**
 * @brief  I2C Start Condition을 생성합니다.
 * SCL = High인 상태에서 SDA를 High에서 Low로 전환.
 * @retval None
 */
void I2C_Start(void) {
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
	SDA_HIGH();
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	2140      	movs	r1, #64	@ 0x40
 8003c00:	480f      	ldr	r0, [pc, #60]	@ (8003c40 <I2C_Start+0x48>)
 8003c02:	f001 f904 	bl	8004e0e <HAL_GPIO_WritePin>
	SCL_HIGH();
 8003c06:	2201      	movs	r2, #1
 8003c08:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003c0c:	480c      	ldr	r0, [pc, #48]	@ (8003c40 <I2C_Start+0x48>)
 8003c0e:	f001 f8fe 	bl	8004e0e <HAL_GPIO_WritePin>
	I2C_DELAY();
 8003c12:	2005      	movs	r0, #5
 8003c14:	f7ff ffcc 	bl	8003bb0 <delay_us>
	SDA_LOW(); // Start Condition: SCL이 High일 때 SDA High -> Low
 8003c18:	2200      	movs	r2, #0
 8003c1a:	2140      	movs	r1, #64	@ 0x40
 8003c1c:	4808      	ldr	r0, [pc, #32]	@ (8003c40 <I2C_Start+0x48>)
 8003c1e:	f001 f8f6 	bl	8004e0e <HAL_GPIO_WritePin>
	I2C_DELAY();
 8003c22:	2005      	movs	r0, #5
 8003c24:	f7ff ffc4 	bl	8003bb0 <delay_us>
	SCL_LOW();
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003c2e:	4804      	ldr	r0, [pc, #16]	@ (8003c40 <I2C_Start+0x48>)
 8003c30:	f001 f8ed 	bl	8004e0e <HAL_GPIO_WritePin>
	I2C_DELAY();
 8003c34:	2005      	movs	r0, #5
 8003c36:	f7ff ffbb 	bl	8003bb0 <delay_us>
}
 8003c3a:	bf00      	nop
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	40011000 	.word	0x40011000

08003c44 <I2C_Stop>:
/**
 * @brief  I2C Stop Condition을 생성합니다.
 * SDA = Low인 상태에서 SCL을 High로 올린 후 SDA를 Low에서 High로 전환.
 * @retval None
 */
void I2C_Stop(void) {
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0
	SDA_LOW();
 8003c48:	2200      	movs	r2, #0
 8003c4a:	2140      	movs	r1, #64	@ 0x40
 8003c4c:	480c      	ldr	r0, [pc, #48]	@ (8003c80 <I2C_Stop+0x3c>)
 8003c4e:	f001 f8de 	bl	8004e0e <HAL_GPIO_WritePin>
	I2C_DELAY();
 8003c52:	2005      	movs	r0, #5
 8003c54:	f7ff ffac 	bl	8003bb0 <delay_us>
	SCL_HIGH();
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003c5e:	4808      	ldr	r0, [pc, #32]	@ (8003c80 <I2C_Stop+0x3c>)
 8003c60:	f001 f8d5 	bl	8004e0e <HAL_GPIO_WritePin>
	I2C_DELAY();
 8003c64:	2005      	movs	r0, #5
 8003c66:	f7ff ffa3 	bl	8003bb0 <delay_us>
	SDA_HIGH(); // Stop Condition: SCL이 High일 때 SDA Low -> High
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	2140      	movs	r1, #64	@ 0x40
 8003c6e:	4804      	ldr	r0, [pc, #16]	@ (8003c80 <I2C_Stop+0x3c>)
 8003c70:	f001 f8cd 	bl	8004e0e <HAL_GPIO_WritePin>
	I2C_DELAY();
 8003c74:	2005      	movs	r0, #5
 8003c76:	f7ff ff9b 	bl	8003bb0 <delay_us>
}
 8003c7a:	bf00      	nop
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	40011000 	.word	0x40011000

08003c84 <I2C_Write_Byte>:
/**
 * @brief  I2C 버스에 1바이트 데이터를 전송합니다.
 * @param  data: 전송할 8비트 데이터.
 * @retval 0: ACK 수신, 1: NACK 수신.
 */
uint8_t I2C_Write_Byte(uint8_t data) {
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 8003c8e:	2300      	movs	r3, #0
 8003c90:	73fb      	strb	r3, [r7, #15]
 8003c92:	e029      	b.n	8003ce8 <I2C_Write_Byte+0x64>
		// 1. 데이터 비트 출력 (MSB부터)
		if (data & 0x80) {
 8003c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	da05      	bge.n	8003ca8 <I2C_Write_Byte+0x24>
			SDA_HIGH();
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	2140      	movs	r1, #64	@ 0x40
 8003ca0:	4825      	ldr	r0, [pc, #148]	@ (8003d38 <I2C_Write_Byte+0xb4>)
 8003ca2:	f001 f8b4 	bl	8004e0e <HAL_GPIO_WritePin>
 8003ca6:	e004      	b.n	8003cb2 <I2C_Write_Byte+0x2e>
		} else {
			SDA_LOW();
 8003ca8:	2200      	movs	r2, #0
 8003caa:	2140      	movs	r1, #64	@ 0x40
 8003cac:	4822      	ldr	r0, [pc, #136]	@ (8003d38 <I2C_Write_Byte+0xb4>)
 8003cae:	f001 f8ae 	bl	8004e0e <HAL_GPIO_WritePin>
		}
		I2C_DELAY();
 8003cb2:	2005      	movs	r0, #5
 8003cb4:	f7ff ff7c 	bl	8003bb0 <delay_us>

		// 2. 클럭 펄스 생성
		SCL_HIGH();
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003cbe:	481e      	ldr	r0, [pc, #120]	@ (8003d38 <I2C_Write_Byte+0xb4>)
 8003cc0:	f001 f8a5 	bl	8004e0e <HAL_GPIO_WritePin>
		I2C_DELAY();
 8003cc4:	2005      	movs	r0, #5
 8003cc6:	f7ff ff73 	bl	8003bb0 <delay_us>
		SCL_LOW();
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003cd0:	4819      	ldr	r0, [pc, #100]	@ (8003d38 <I2C_Write_Byte+0xb4>)
 8003cd2:	f001 f89c 	bl	8004e0e <HAL_GPIO_WritePin>
		I2C_DELAY();
 8003cd6:	2005      	movs	r0, #5
 8003cd8:	f7ff ff6a 	bl	8003bb0 <delay_us>

		data <<= 1;
 8003cdc:	79fb      	ldrb	r3, [r7, #7]
 8003cde:	005b      	lsls	r3, r3, #1
 8003ce0:	71fb      	strb	r3, [r7, #7]
	for (i = 0; i < 8; i++) {
 8003ce2:	7bfb      	ldrb	r3, [r7, #15]
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	73fb      	strb	r3, [r7, #15]
 8003ce8:	7bfb      	ldrb	r3, [r7, #15]
 8003cea:	2b07      	cmp	r3, #7
 8003cec:	d9d2      	bls.n	8003c94 <I2C_Write_Byte+0x10>
	}

	// 3. ACK 비트 수신
	SDA_HIGH();// 마스터는 SDA를 High-Z (Pull-up) 상태로 둡니다.
 8003cee:	2201      	movs	r2, #1
 8003cf0:	2140      	movs	r1, #64	@ 0x40
 8003cf2:	4811      	ldr	r0, [pc, #68]	@ (8003d38 <I2C_Write_Byte+0xb4>)
 8003cf4:	f001 f88b 	bl	8004e0e <HAL_GPIO_WritePin>
	I2C_DELAY();
 8003cf8:	2005      	movs	r0, #5
 8003cfa:	f7ff ff59 	bl	8003bb0 <delay_us>
	SCL_HIGH();
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003d04:	480c      	ldr	r0, [pc, #48]	@ (8003d38 <I2C_Write_Byte+0xb4>)
 8003d06:	f001 f882 	bl	8004e0e <HAL_GPIO_WritePin>
	I2C_DELAY();
 8003d0a:	2005      	movs	r0, #5
 8003d0c:	f7ff ff50 	bl	8003bb0 <delay_us>
	uint8_t ack = SDA_READ(); // SDA 라인의 상태를 읽어 ACK(0) 또는 NACK(1) 확인
 8003d10:	2140      	movs	r1, #64	@ 0x40
 8003d12:	4809      	ldr	r0, [pc, #36]	@ (8003d38 <I2C_Write_Byte+0xb4>)
 8003d14:	f001 f864 	bl	8004de0 <HAL_GPIO_ReadPin>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	73bb      	strb	r3, [r7, #14]
	SCL_LOW();
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003d22:	4805      	ldr	r0, [pc, #20]	@ (8003d38 <I2C_Write_Byte+0xb4>)
 8003d24:	f001 f873 	bl	8004e0e <HAL_GPIO_WritePin>
	I2C_DELAY();
 8003d28:	2005      	movs	r0, #5
 8003d2a:	f7ff ff41 	bl	8003bb0 <delay_us>

	return ack; // 0이면 ACK, 1이면 NACK
 8003d2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	40011000 	.word	0x40011000

08003d3c <I2C_Write>:
}

// --- LCD 통신 함수에 I2C_Write_Byte 적용 ---

// 데이터를 I2C 버스를 통해 LCD로 전송하는 하위 레벨 함수
void I2C_Write(uint8_t byte) {
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	4603      	mov	r3, r0
 8003d44:	71fb      	strb	r3, [r7, #7]
	I2C_Start();
 8003d46:	f7ff ff57 	bl	8003bf8 <I2C_Start>
	I2C_Write_Byte(ADDRESS); // LCD 어드레스 전송
 8003d4a:	204e      	movs	r0, #78	@ 0x4e
 8003d4c:	f7ff ff9a 	bl	8003c84 <I2C_Write_Byte>
	I2C_Write_Byte(byte);    // 데이터/커맨드 전송
 8003d50:	79fb      	ldrb	r3, [r7, #7]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7ff ff96 	bl	8003c84 <I2C_Write_Byte>
	I2C_Stop();
 8003d58:	f7ff ff74 	bl	8003c44 <I2C_Stop>
}
 8003d5c:	bf00      	nop
 8003d5e:	3708      	adds	r7, #8
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <LCD_CMD>:
/**
 * @brief  LCD에 커맨드를 전송합니다. (4비트 모드)
 * @param  cmd: 전송할 8비트 커맨드.
 * @retval None
 */
void LCD_CMD(uint8_t cmd) {
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	71fb      	strb	r3, [r7, #7]
	uint8_t high_nibble = (cmd & 0xF0) | BackLight;
 8003d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d72:	f023 030f 	bic.w	r3, r3, #15
 8003d76:	b25b      	sxtb	r3, r3
 8003d78:	f043 0308 	orr.w	r3, r3, #8
 8003d7c:	b25b      	sxtb	r3, r3
 8003d7e:	73fb      	strb	r3, [r7, #15]
	uint8_t low_nibble = ((cmd << 4) & 0xF0) | BackLight;
 8003d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d84:	011b      	lsls	r3, r3, #4
 8003d86:	b25b      	sxtb	r3, r3
 8003d88:	f043 0308 	orr.w	r3, r3, #8
 8003d8c:	b25b      	sxtb	r3, r3
 8003d8e:	73bb      	strb	r3, [r7, #14]

	// 1. High Nibble 전송 (RS=0, EN=1)
	I2C_Write(high_nibble | RS0_EN1);
 8003d90:	7bfb      	ldrb	r3, [r7, #15]
 8003d92:	f043 0304 	orr.w	r3, r3, #4
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7ff ffcf 	bl	8003d3c <I2C_Write>
	delay_us(4); // E 펄스 유지 시간
 8003d9e:	2004      	movs	r0, #4
 8003da0:	f7ff ff06 	bl	8003bb0 <delay_us>

	// 2. E=0으로 설정 (E 펄스 종료)
	I2C_Write(high_nibble | RS0_EN0);
 8003da4:	7bfb      	ldrb	r3, [r7, #15]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7ff ffc8 	bl	8003d3c <I2C_Write>
	delay_us(50); // 커맨드 처리 시간 확보
 8003dac:	2032      	movs	r0, #50	@ 0x32
 8003dae:	f7ff feff 	bl	8003bb0 <delay_us>

	// 3. Low Nibble 전송 (RS=0, EN=1)
	I2C_Write(low_nibble | RS0_EN1);
 8003db2:	7bbb      	ldrb	r3, [r7, #14]
 8003db4:	f043 0304 	orr.w	r3, r3, #4
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7ff ffbe 	bl	8003d3c <I2C_Write>
	delay_us(4); // E 펄스 유지 시간
 8003dc0:	2004      	movs	r0, #4
 8003dc2:	f7ff fef5 	bl	8003bb0 <delay_us>

	// 4. E=0으로 설정 (E 펄스 종료)
	I2C_Write(low_nibble | RS0_EN0);
 8003dc6:	7bbb      	ldrb	r3, [r7, #14]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7ff ffb7 	bl	8003d3c <I2C_Write>
	delay_us(50); // 커맨드 처리 시간 확보 (0x01, 0x02 커맨드는 더 긴 딜레이 필요)
 8003dce:	2032      	movs	r0, #50	@ 0x32
 8003dd0:	f7ff feee 	bl	8003bb0 <delay_us>
}
 8003dd4:	bf00      	nop
 8003dd6:	3710      	adds	r7, #16
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <LCD_DATA>:
/**
 * @brief  LCD에 데이터(문자)를 전송합니다. (4비트 모드)
 * @param  data: 전송할 8비트 데이터.
 * @retval None
 */
void LCD_DATA(uint8_t data) {
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	4603      	mov	r3, r0
 8003de4:	71fb      	strb	r3, [r7, #7]
	uint8_t high_nibble = (data & 0xF0) | BackLight;
 8003de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dea:	f023 030f 	bic.w	r3, r3, #15
 8003dee:	b25b      	sxtb	r3, r3
 8003df0:	f043 0308 	orr.w	r3, r3, #8
 8003df4:	b25b      	sxtb	r3, r3
 8003df6:	73fb      	strb	r3, [r7, #15]
	uint8_t low_nibble = ((data << 4) & 0xF0) | BackLight;
 8003df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dfc:	011b      	lsls	r3, r3, #4
 8003dfe:	b25b      	sxtb	r3, r3
 8003e00:	f043 0308 	orr.w	r3, r3, #8
 8003e04:	b25b      	sxtb	r3, r3
 8003e06:	73bb      	strb	r3, [r7, #14]

	// 1. High Nibble 전송 (RS=1, EN=1)
	I2C_Write(high_nibble | RS1_EN1);
 8003e08:	7bfb      	ldrb	r3, [r7, #15]
 8003e0a:	f043 0305 	orr.w	r3, r3, #5
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7ff ff93 	bl	8003d3c <I2C_Write>
	delay_us(4);
 8003e16:	2004      	movs	r0, #4
 8003e18:	f7ff feca 	bl	8003bb0 <delay_us>

	// 2. E=0으로 설정
	I2C_Write(high_nibble | RS1_EN0);
 8003e1c:	7bfb      	ldrb	r3, [r7, #15]
 8003e1e:	f043 0301 	orr.w	r3, r3, #1
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7ff ff89 	bl	8003d3c <I2C_Write>
	delay_us(50);
 8003e2a:	2032      	movs	r0, #50	@ 0x32
 8003e2c:	f7ff fec0 	bl	8003bb0 <delay_us>

	// 3. Low Nibble 전송 (RS=1, EN=1)
	I2C_Write(low_nibble | RS1_EN1);
 8003e30:	7bbb      	ldrb	r3, [r7, #14]
 8003e32:	f043 0305 	orr.w	r3, r3, #5
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f7ff ff7f 	bl	8003d3c <I2C_Write>
	delay_us(4);
 8003e3e:	2004      	movs	r0, #4
 8003e40:	f7ff feb6 	bl	8003bb0 <delay_us>

	// 4. E=0으로 설정
	I2C_Write(low_nibble | RS1_EN0);
 8003e44:	7bbb      	ldrb	r3, [r7, #14]
 8003e46:	f043 0301 	orr.w	r3, r3, #1
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7ff ff75 	bl	8003d3c <I2C_Write>
	delay_us(50);
 8003e52:	2032      	movs	r0, #50	@ 0x32
 8003e54:	f7ff feac 	bl	8003bb0 <delay_us>
}
 8003e58:	bf00      	nop
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <LCD_CMD_4bit>:

// 4비트 초기화 시 사용되는 특수 함수 (RS 비트 무시하고 4비트만 전송)
void LCD_CMD_4bit(uint8_t cmd) {
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	4603      	mov	r3, r0
 8003e68:	71fb      	strb	r3, [r7, #7]
	uint8_t high_nibble = (cmd & 0xF0) | BackLight;
 8003e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e6e:	f023 030f 	bic.w	r3, r3, #15
 8003e72:	b25b      	sxtb	r3, r3
 8003e74:	f043 0308 	orr.w	r3, r3, #8
 8003e78:	b25b      	sxtb	r3, r3
 8003e7a:	73fb      	strb	r3, [r7, #15]

	// High Nibble 전송 (RS=0, EN=1)
	I2C_Write(high_nibble | RS0_EN1);
 8003e7c:	7bfb      	ldrb	r3, [r7, #15]
 8003e7e:	f043 0304 	orr.w	r3, r3, #4
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7ff ff59 	bl	8003d3c <I2C_Write>
	delay_us(4);
 8003e8a:	2004      	movs	r0, #4
 8003e8c:	f7ff fe90 	bl	8003bb0 <delay_us>

	// E=0으로 설정
	I2C_Write(high_nibble | RS0_EN0);
 8003e90:	7bfb      	ldrb	r3, [r7, #15]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7ff ff52 	bl	8003d3c <I2C_Write>
	delay_us(50);
 8003e98:	2032      	movs	r0, #50	@ 0x32
 8003e9a:	f7ff fe89 	bl	8003bb0 <delay_us>
}
 8003e9e:	bf00      	nop
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <LCD_INIT>:

void LCD_INIT(void) {
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	af00      	add	r7, sp, #0

	delay_ms(100);
 8003eaa:	2064      	movs	r0, #100	@ 0x64
 8003eac:	f000 fce2 	bl	8004874 <HAL_Delay>

	// 1. 4비트 초기화 시퀀스 (0x03 3번, 0x02 1번)
	LCD_CMD_4bit(0x03);
 8003eb0:	2003      	movs	r0, #3
 8003eb2:	f7ff ffd5 	bl	8003e60 <LCD_CMD_4bit>
	delay_ms(5);
 8003eb6:	2005      	movs	r0, #5
 8003eb8:	f000 fcdc 	bl	8004874 <HAL_Delay>
	LCD_CMD_4bit(0x03);
 8003ebc:	2003      	movs	r0, #3
 8003ebe:	f7ff ffcf 	bl	8003e60 <LCD_CMD_4bit>
	delay_us(100);
 8003ec2:	2064      	movs	r0, #100	@ 0x64
 8003ec4:	f7ff fe74 	bl	8003bb0 <delay_us>
	LCD_CMD_4bit(0x03);
 8003ec8:	2003      	movs	r0, #3
 8003eca:	f7ff ffc9 	bl	8003e60 <LCD_CMD_4bit>
	delay_us(100);
 8003ece:	2064      	movs	r0, #100	@ 0x64
 8003ed0:	f7ff fe6e 	bl	8003bb0 <delay_us>
	LCD_CMD_4bit(0x02);
 8003ed4:	2002      	movs	r0, #2
 8003ed6:	f7ff ffc3 	bl	8003e60 <LCD_CMD_4bit>
	delay_us(100);
 8003eda:	2064      	movs	r0, #100	@ 0x64
 8003edc:	f7ff fe68 	bl	8003bb0 <delay_us>

	// 2. 기능 설정 (Function Set: 4비트, 2줄, 5x8 폰트)
	LCD_CMD(0x28);
 8003ee0:	2028      	movs	r0, #40	@ 0x28
 8003ee2:	f7ff ff3f 	bl	8003d64 <LCD_CMD>

	// 3. 디스플레이 끄기 (Display Off)
	LCD_CMD(0x08);
 8003ee6:	2008      	movs	r0, #8
 8003ee8:	f7ff ff3c 	bl	8003d64 <LCD_CMD>

	// 4. 화면 클리어 (Clear Display)
	LCD_CMD(0x01);
 8003eec:	2001      	movs	r0, #1
 8003eee:	f7ff ff39 	bl	8003d64 <LCD_CMD>
	delay_ms(3); // Clear Display는 긴 딜레이 필요
 8003ef2:	2003      	movs	r0, #3
 8003ef4:	f000 fcbe 	bl	8004874 <HAL_Delay>

	// 5. 엔트리 모드 설정 (Entry Mode Set)
	LCD_CMD(0x06);
 8003ef8:	2006      	movs	r0, #6
 8003efa:	f7ff ff33 	bl	8003d64 <LCD_CMD>

	// 6. 디스플레이 켜기 (Display On)
	LCD_CMD(0x0C);
 8003efe:	200c      	movs	r0, #12
 8003f00:	f7ff ff30 	bl	8003d64 <LCD_CMD>
}
 8003f04:	bf00      	nop
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <LCD_XY>:

void LCD_XY(char x, char y) {
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	4603      	mov	r3, r0
 8003f10:	460a      	mov	r2, r1
 8003f12:	71fb      	strb	r3, [r7, #7]
 8003f14:	4613      	mov	r3, r2
 8003f16:	71bb      	strb	r3, [r7, #6]
	if (y == 0)
 8003f18:	79bb      	ldrb	r3, [r7, #6]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d106      	bne.n	8003f2c <LCD_XY+0x24>
		LCD_CMD(0x80 + x);
 8003f1e:	79fb      	ldrb	r3, [r7, #7]
 8003f20:	3b80      	subs	r3, #128	@ 0x80
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7ff ff1d 	bl	8003d64 <LCD_CMD>
		LCD_CMD(0xC0 + x);
	else if (y == 2)
		LCD_CMD(0x94 + x);
	else if (y == 3)
		LCD_CMD(0xD4 + x);
}
 8003f2a:	e01c      	b.n	8003f66 <LCD_XY+0x5e>
	else if (y == 1)
 8003f2c:	79bb      	ldrb	r3, [r7, #6]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d106      	bne.n	8003f40 <LCD_XY+0x38>
		LCD_CMD(0xC0 + x);
 8003f32:	79fb      	ldrb	r3, [r7, #7]
 8003f34:	3b40      	subs	r3, #64	@ 0x40
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7ff ff13 	bl	8003d64 <LCD_CMD>
}
 8003f3e:	e012      	b.n	8003f66 <LCD_XY+0x5e>
	else if (y == 2)
 8003f40:	79bb      	ldrb	r3, [r7, #6]
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d106      	bne.n	8003f54 <LCD_XY+0x4c>
		LCD_CMD(0x94 + x);
 8003f46:	79fb      	ldrb	r3, [r7, #7]
 8003f48:	3b6c      	subs	r3, #108	@ 0x6c
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7ff ff09 	bl	8003d64 <LCD_CMD>
}
 8003f52:	e008      	b.n	8003f66 <LCD_XY+0x5e>
	else if (y == 3)
 8003f54:	79bb      	ldrb	r3, [r7, #6]
 8003f56:	2b03      	cmp	r3, #3
 8003f58:	d105      	bne.n	8003f66 <LCD_XY+0x5e>
		LCD_CMD(0xD4 + x);
 8003f5a:	79fb      	ldrb	r3, [r7, #7]
 8003f5c:	3b2c      	subs	r3, #44	@ 0x2c
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7ff feff 	bl	8003d64 <LCD_CMD>
}
 8003f66:	bf00      	nop
 8003f68:	3708      	adds	r7, #8
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <LCD_PUTS>:
void LCD_CLEAR(void) {
	LCD_CMD(0x01);
	delay_ms(3); // Clear Display 커맨드는 약 1.52ms가 필요하므로 3ms로 여유있게 설정
}

void LCD_PUTS(char *str) {
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b082      	sub	sp, #8
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
	while (*str)
 8003f76:	e006      	b.n	8003f86 <LCD_PUTS+0x18>
		LCD_DATA(*str++);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	1c5a      	adds	r2, r3, #1
 8003f7c:	607a      	str	r2, [r7, #4]
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7ff ff2b 	bl	8003ddc <LCD_DATA>
	while (*str)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1f4      	bne.n	8003f78 <LCD_PUTS+0xa>
}
 8003f8e:	bf00      	nop
 8003f90:	bf00      	nop
 8003f92:	3708      	adds	r7, #8
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003f9c:	f000 fc08 	bl	80047b0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003fa0:	f000 f82a 	bl	8003ff8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003fa4:	f000 f9ac 	bl	8004300 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8003fa8:	f000 f980 	bl	80042ac <MX_USART2_UART_Init>
	MX_TIM1_Init();
 8003fac:	f000 f866 	bl	800407c <MX_TIM1_Init>
	MX_TIM3_Init();
 8003fb0:	f000 f904 	bl	80041bc <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
//
	LCD_INIT();
 8003fb4:	f7ff ff77 	bl	8003ea6 <LCD_INIT>
//	I2C_ScanAddresses();
	LCD_XY(0, 0); LCD_PUTS((char*) "--PACMAN GAME--");
 8003fb8:	2100      	movs	r1, #0
 8003fba:	2000      	movs	r0, #0
 8003fbc:	f7ff ffa4 	bl	8003f08 <LCD_XY>
 8003fc0:	480c      	ldr	r0, [pc, #48]	@ (8003ff4 <main+0x5c>)
 8003fc2:	f7ff ffd4 	bl	8003f6e <LCD_PUTS>
	ILI9341_Init();
 8003fc6:	f7ff f88d 	bl	80030e4 <ILI9341_Init>

	StartScreen_Draw();
 8003fca:	f7fd fdf5 	bl	8001bb8 <StartScreen_Draw>
	/* 재생: 시작 화면이 뜨자마자 2성부 인트로 */
	PLAY_PacmanIntro_Blocking();
 8003fce:	f7ff fa29 	bl	8003424 <PLAY_PacmanIntro_Blocking>
	wait_for_any_button_press();
 8003fd2:	f7ff f85f 	bl	8003094 <wait_for_any_button_press>

	//맵 체크
	GameScreen_DrawMap();
 8003fd6:	f7ff fb0d 	bl	80035f4 <GameScreen_DrawMap>
	GameScreen_DrawEntities();
 8003fda:	f7ff fb8d 	bl	80036f8 <GameScreen_DrawEntities>
	PLAY_Pacman_map();
 8003fde:	f7ff fa5b 	bl	8003498 <PLAY_Pacman_map>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* 아무 방향 버튼을 누르면 다음 화면 */
		Update_Game_Logic();
 8003fe2:	f7ff fd01 	bl	80039e8 <Update_Game_Logic>
		GameScreen_Update_Screen();
 8003fe6:	f7ff fd6d 	bl	8003ac4 <GameScreen_Update_Screen>

		HAL_Delay(100);
 8003fea:	2064      	movs	r0, #100	@ 0x64
 8003fec:	f000 fc42 	bl	8004874 <HAL_Delay>
		Update_Game_Logic();
 8003ff0:	bf00      	nop
 8003ff2:	e7f6      	b.n	8003fe2 <main+0x4a>
 8003ff4:	08007e14 	.word	0x08007e14

08003ff8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b090      	sub	sp, #64	@ 0x40
 8003ffc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003ffe:	f107 0318 	add.w	r3, r7, #24
 8004002:	2228      	movs	r2, #40	@ 0x28
 8004004:	2100      	movs	r1, #0
 8004006:	4618      	mov	r0, r3
 8004008:	f002 fafc 	bl	8006604 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800400c:	1d3b      	adds	r3, r7, #4
 800400e:	2200      	movs	r2, #0
 8004010:	601a      	str	r2, [r3, #0]
 8004012:	605a      	str	r2, [r3, #4]
 8004014:	609a      	str	r2, [r3, #8]
 8004016:	60da      	str	r2, [r3, #12]
 8004018:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800401a:	2302      	movs	r3, #2
 800401c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800401e:	2301      	movs	r3, #1
 8004020:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004022:	2310      	movs	r3, #16
 8004024:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004026:	2302      	movs	r3, #2
 8004028:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800402a:	2300      	movs	r3, #0
 800402c:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800402e:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8004032:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8004034:	f107 0318 	add.w	r3, r7, #24
 8004038:	4618      	mov	r0, r3
 800403a:	f000 ff3b 	bl	8004eb4 <HAL_RCC_OscConfig>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d001      	beq.n	8004048 <SystemClock_Config+0x50>
		Error_Handler();
 8004044:	f000 fa20 	bl	8004488 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8004048:	230f      	movs	r3, #15
 800404a:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800404c:	2302      	movs	r3, #2
 800404e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004050:	2300      	movs	r3, #0
 8004052:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004054:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004058:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800405a:	2300      	movs	r3, #0
 800405c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800405e:	1d3b      	adds	r3, r7, #4
 8004060:	2102      	movs	r1, #2
 8004062:	4618      	mov	r0, r3
 8004064:	f001 f9a8 	bl	80053b8 <HAL_RCC_ClockConfig>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d001      	beq.n	8004072 <SystemClock_Config+0x7a>
		Error_Handler();
 800406e:	f000 fa0b 	bl	8004488 <Error_Handler>
	}
}
 8004072:	bf00      	nop
 8004074:	3740      	adds	r7, #64	@ 0x40
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
	...

0800407c <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 800407c:	b580      	push	{r7, lr}
 800407e:	b096      	sub	sp, #88	@ 0x58
 8004080:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004082:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8004086:	2200      	movs	r2, #0
 8004088:	601a      	str	r2, [r3, #0]
 800408a:	605a      	str	r2, [r3, #4]
 800408c:	609a      	str	r2, [r3, #8]
 800408e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004090:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004094:	2200      	movs	r2, #0
 8004096:	601a      	str	r2, [r3, #0]
 8004098:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800409a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800409e:	2200      	movs	r2, #0
 80040a0:	601a      	str	r2, [r3, #0]
 80040a2:	605a      	str	r2, [r3, #4]
 80040a4:	609a      	str	r2, [r3, #8]
 80040a6:	60da      	str	r2, [r3, #12]
 80040a8:	611a      	str	r2, [r3, #16]
 80040aa:	615a      	str	r2, [r3, #20]
 80040ac:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80040ae:	1d3b      	adds	r3, r7, #4
 80040b0:	2220      	movs	r2, #32
 80040b2:	2100      	movs	r1, #0
 80040b4:	4618      	mov	r0, r3
 80040b6:	f002 faa5 	bl	8006604 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80040ba:	4b3e      	ldr	r3, [pc, #248]	@ (80041b4 <MX_TIM1_Init+0x138>)
 80040bc:	4a3e      	ldr	r2, [pc, #248]	@ (80041b8 <MX_TIM1_Init+0x13c>)
 80040be:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 64 - 1;
 80040c0:	4b3c      	ldr	r3, [pc, #240]	@ (80041b4 <MX_TIM1_Init+0x138>)
 80040c2:	223f      	movs	r2, #63	@ 0x3f
 80040c4:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040c6:	4b3b      	ldr	r3, [pc, #236]	@ (80041b4 <MX_TIM1_Init+0x138>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 80040cc:	4b39      	ldr	r3, [pc, #228]	@ (80041b4 <MX_TIM1_Init+0x138>)
 80040ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80040d2:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040d4:	4b37      	ldr	r3, [pc, #220]	@ (80041b4 <MX_TIM1_Init+0x138>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80040da:	4b36      	ldr	r3, [pc, #216]	@ (80041b4 <MX_TIM1_Init+0x138>)
 80040dc:	2200      	movs	r2, #0
 80040de:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040e0:	4b34      	ldr	r3, [pc, #208]	@ (80041b4 <MX_TIM1_Init+0x138>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80040e6:	4833      	ldr	r0, [pc, #204]	@ (80041b4 <MX_TIM1_Init+0x138>)
 80040e8:	f001 faf4 	bl	80056d4 <HAL_TIM_Base_Init>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <MX_TIM1_Init+0x7a>
		Error_Handler();
 80040f2:	f000 f9c9 	bl	8004488 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80040f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80040fa:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80040fc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8004100:	4619      	mov	r1, r3
 8004102:	482c      	ldr	r0, [pc, #176]	@ (80041b4 <MX_TIM1_Init+0x138>)
 8004104:	f001 fd56 	bl	8005bb4 <HAL_TIM_ConfigClockSource>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d001      	beq.n	8004112 <MX_TIM1_Init+0x96>
		Error_Handler();
 800410e:	f000 f9bb 	bl	8004488 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8004112:	4828      	ldr	r0, [pc, #160]	@ (80041b4 <MX_TIM1_Init+0x138>)
 8004114:	f001 fb2d 	bl	8005772 <HAL_TIM_PWM_Init>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d001      	beq.n	8004122 <MX_TIM1_Init+0xa6>
		Error_Handler();
 800411e:	f000 f9b3 	bl	8004488 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004122:	2300      	movs	r3, #0
 8004124:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004126:	2300      	movs	r3, #0
 8004128:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800412a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800412e:	4619      	mov	r1, r3
 8004130:	4820      	ldr	r0, [pc, #128]	@ (80041b4 <MX_TIM1_Init+0x138>)
 8004132:	f002 f8b7 	bl	80062a4 <HAL_TIMEx_MasterConfigSynchronization>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d001      	beq.n	8004140 <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 800413c:	f000 f9a4 	bl	8004488 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004140:	2360      	movs	r3, #96	@ 0x60
 8004142:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 500;
 8004144:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8004148:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800414a:	2300      	movs	r3, #0
 800414c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800414e:	2300      	movs	r3, #0
 8004150:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004152:	2300      	movs	r3, #0
 8004154:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004156:	2300      	movs	r3, #0
 8004158:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4)
 800415a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800415e:	220c      	movs	r2, #12
 8004160:	4619      	mov	r1, r3
 8004162:	4814      	ldr	r0, [pc, #80]	@ (80041b4 <MX_TIM1_Init+0x138>)
 8004164:	f001 fc64 	bl	8005a30 <HAL_TIM_PWM_ConfigChannel>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d001      	beq.n	8004172 <MX_TIM1_Init+0xf6>
			!= HAL_OK) {
		Error_Handler();
 800416e:	f000 f98b 	bl	8004488 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004172:	2300      	movs	r3, #0
 8004174:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004176:	2300      	movs	r3, #0
 8004178:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800417a:	2300      	movs	r3, #0
 800417c:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800417e:	2300      	movs	r3, #0
 8004180:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004182:	2300      	movs	r3, #0
 8004184:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004186:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800418a:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800418c:	2300      	movs	r3, #0
 800418e:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8004190:	1d3b      	adds	r3, r7, #4
 8004192:	4619      	mov	r1, r3
 8004194:	4807      	ldr	r0, [pc, #28]	@ (80041b4 <MX_TIM1_Init+0x138>)
 8004196:	f002 f8e3 	bl	8006360 <HAL_TIMEx_ConfigBreakDeadTime>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d001      	beq.n	80041a4 <MX_TIM1_Init+0x128>
			!= HAL_OK) {
		Error_Handler();
 80041a0:	f000 f972 	bl	8004488 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80041a4:	4803      	ldr	r0, [pc, #12]	@ (80041b4 <MX_TIM1_Init+0x138>)
 80041a6:	f000 f9d9 	bl	800455c <HAL_TIM_MspPostInit>

}
 80041aa:	bf00      	nop
 80041ac:	3758      	adds	r7, #88	@ 0x58
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	200001dc 	.word	0x200001dc
 80041b8:	40012c00 	.word	0x40012c00

080041bc <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80041bc:	b580      	push	{r7, lr}
 80041be:	b08e      	sub	sp, #56	@ 0x38
 80041c0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80041c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80041c6:	2200      	movs	r2, #0
 80041c8:	601a      	str	r2, [r3, #0]
 80041ca:	605a      	str	r2, [r3, #4]
 80041cc:	609a      	str	r2, [r3, #8]
 80041ce:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80041d0:	f107 0320 	add.w	r3, r7, #32
 80041d4:	2200      	movs	r2, #0
 80041d6:	601a      	str	r2, [r3, #0]
 80041d8:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80041da:	1d3b      	adds	r3, r7, #4
 80041dc:	2200      	movs	r2, #0
 80041de:	601a      	str	r2, [r3, #0]
 80041e0:	605a      	str	r2, [r3, #4]
 80041e2:	609a      	str	r2, [r3, #8]
 80041e4:	60da      	str	r2, [r3, #12]
 80041e6:	611a      	str	r2, [r3, #16]
 80041e8:	615a      	str	r2, [r3, #20]
 80041ea:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80041ec:	4b2d      	ldr	r3, [pc, #180]	@ (80042a4 <MX_TIM3_Init+0xe8>)
 80041ee:	4a2e      	ldr	r2, [pc, #184]	@ (80042a8 <MX_TIM3_Init+0xec>)
 80041f0:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 64 - 1;
 80041f2:	4b2c      	ldr	r3, [pc, #176]	@ (80042a4 <MX_TIM3_Init+0xe8>)
 80041f4:	223f      	movs	r2, #63	@ 0x3f
 80041f6:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041f8:	4b2a      	ldr	r3, [pc, #168]	@ (80042a4 <MX_TIM3_Init+0xe8>)
 80041fa:	2200      	movs	r2, #0
 80041fc:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 80041fe:	4b29      	ldr	r3, [pc, #164]	@ (80042a4 <MX_TIM3_Init+0xe8>)
 8004200:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004204:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004206:	4b27      	ldr	r3, [pc, #156]	@ (80042a4 <MX_TIM3_Init+0xe8>)
 8004208:	2200      	movs	r2, #0
 800420a:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800420c:	4b25      	ldr	r3, [pc, #148]	@ (80042a4 <MX_TIM3_Init+0xe8>)
 800420e:	2200      	movs	r2, #0
 8004210:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8004212:	4824      	ldr	r0, [pc, #144]	@ (80042a4 <MX_TIM3_Init+0xe8>)
 8004214:	f001 fa5e 	bl	80056d4 <HAL_TIM_Base_Init>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <MX_TIM3_Init+0x66>
		Error_Handler();
 800421e:	f000 f933 	bl	8004488 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004222:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004226:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8004228:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800422c:	4619      	mov	r1, r3
 800422e:	481d      	ldr	r0, [pc, #116]	@ (80042a4 <MX_TIM3_Init+0xe8>)
 8004230:	f001 fcc0 	bl	8005bb4 <HAL_TIM_ConfigClockSource>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d001      	beq.n	800423e <MX_TIM3_Init+0x82>
		Error_Handler();
 800423a:	f000 f925 	bl	8004488 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 800423e:	4819      	ldr	r0, [pc, #100]	@ (80042a4 <MX_TIM3_Init+0xe8>)
 8004240:	f001 fa97 	bl	8005772 <HAL_TIM_PWM_Init>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d001      	beq.n	800424e <MX_TIM3_Init+0x92>
		Error_Handler();
 800424a:	f000 f91d 	bl	8004488 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800424e:	2300      	movs	r3, #0
 8004250:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004252:	2300      	movs	r3, #0
 8004254:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8004256:	f107 0320 	add.w	r3, r7, #32
 800425a:	4619      	mov	r1, r3
 800425c:	4811      	ldr	r0, [pc, #68]	@ (80042a4 <MX_TIM3_Init+0xe8>)
 800425e:	f002 f821 	bl	80062a4 <HAL_TIMEx_MasterConfigSynchronization>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d001      	beq.n	800426c <MX_TIM3_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 8004268:	f000 f90e 	bl	8004488 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800426c:	2360      	movs	r3, #96	@ 0x60
 800426e:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 500;
 8004270:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8004274:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004276:	2300      	movs	r3, #0
 8004278:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800427a:	2300      	movs	r3, #0
 800427c:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4)
 800427e:	1d3b      	adds	r3, r7, #4
 8004280:	220c      	movs	r2, #12
 8004282:	4619      	mov	r1, r3
 8004284:	4807      	ldr	r0, [pc, #28]	@ (80042a4 <MX_TIM3_Init+0xe8>)
 8004286:	f001 fbd3 	bl	8005a30 <HAL_TIM_PWM_ConfigChannel>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d001      	beq.n	8004294 <MX_TIM3_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 8004290:	f000 f8fa 	bl	8004488 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8004294:	4803      	ldr	r0, [pc, #12]	@ (80042a4 <MX_TIM3_Init+0xe8>)
 8004296:	f000 f961 	bl	800455c <HAL_TIM_MspPostInit>

}
 800429a:	bf00      	nop
 800429c:	3738      	adds	r7, #56	@ 0x38
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	20000224 	.word	0x20000224
 80042a8:	40000400 	.word	0x40000400

080042ac <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80042ac:	b580      	push	{r7, lr}
 80042ae:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80042b0:	4b11      	ldr	r3, [pc, #68]	@ (80042f8 <MX_USART2_UART_Init+0x4c>)
 80042b2:	4a12      	ldr	r2, [pc, #72]	@ (80042fc <MX_USART2_UART_Init+0x50>)
 80042b4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80042b6:	4b10      	ldr	r3, [pc, #64]	@ (80042f8 <MX_USART2_UART_Init+0x4c>)
 80042b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80042bc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80042be:	4b0e      	ldr	r3, [pc, #56]	@ (80042f8 <MX_USART2_UART_Init+0x4c>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80042c4:	4b0c      	ldr	r3, [pc, #48]	@ (80042f8 <MX_USART2_UART_Init+0x4c>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80042ca:	4b0b      	ldr	r3, [pc, #44]	@ (80042f8 <MX_USART2_UART_Init+0x4c>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80042d0:	4b09      	ldr	r3, [pc, #36]	@ (80042f8 <MX_USART2_UART_Init+0x4c>)
 80042d2:	220c      	movs	r2, #12
 80042d4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042d6:	4b08      	ldr	r3, [pc, #32]	@ (80042f8 <MX_USART2_UART_Init+0x4c>)
 80042d8:	2200      	movs	r2, #0
 80042da:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80042dc:	4b06      	ldr	r3, [pc, #24]	@ (80042f8 <MX_USART2_UART_Init+0x4c>)
 80042de:	2200      	movs	r2, #0
 80042e0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80042e2:	4805      	ldr	r0, [pc, #20]	@ (80042f8 <MX_USART2_UART_Init+0x4c>)
 80042e4:	f002 f88d 	bl	8006402 <HAL_UART_Init>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d001      	beq.n	80042f2 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80042ee:	f000 f8cb 	bl	8004488 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80042f2:	bf00      	nop
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	2000026c 	.word	0x2000026c
 80042fc:	40004400 	.word	0x40004400

08004300 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8004300:	b580      	push	{r7, lr}
 8004302:	b088      	sub	sp, #32
 8004304:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8004306:	f107 0310 	add.w	r3, r7, #16
 800430a:	2200      	movs	r2, #0
 800430c:	601a      	str	r2, [r3, #0]
 800430e:	605a      	str	r2, [r3, #4]
 8004310:	609a      	str	r2, [r3, #8]
 8004312:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8004314:	4b57      	ldr	r3, [pc, #348]	@ (8004474 <MX_GPIO_Init+0x174>)
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	4a56      	ldr	r2, [pc, #344]	@ (8004474 <MX_GPIO_Init+0x174>)
 800431a:	f043 0310 	orr.w	r3, r3, #16
 800431e:	6193      	str	r3, [r2, #24]
 8004320:	4b54      	ldr	r3, [pc, #336]	@ (8004474 <MX_GPIO_Init+0x174>)
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	f003 0310 	and.w	r3, r3, #16
 8004328:	60fb      	str	r3, [r7, #12]
 800432a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800432c:	4b51      	ldr	r3, [pc, #324]	@ (8004474 <MX_GPIO_Init+0x174>)
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	4a50      	ldr	r2, [pc, #320]	@ (8004474 <MX_GPIO_Init+0x174>)
 8004332:	f043 0320 	orr.w	r3, r3, #32
 8004336:	6193      	str	r3, [r2, #24]
 8004338:	4b4e      	ldr	r3, [pc, #312]	@ (8004474 <MX_GPIO_Init+0x174>)
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	f003 0320 	and.w	r3, r3, #32
 8004340:	60bb      	str	r3, [r7, #8]
 8004342:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004344:	4b4b      	ldr	r3, [pc, #300]	@ (8004474 <MX_GPIO_Init+0x174>)
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	4a4a      	ldr	r2, [pc, #296]	@ (8004474 <MX_GPIO_Init+0x174>)
 800434a:	f043 0304 	orr.w	r3, r3, #4
 800434e:	6193      	str	r3, [r2, #24]
 8004350:	4b48      	ldr	r3, [pc, #288]	@ (8004474 <MX_GPIO_Init+0x174>)
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	f003 0304 	and.w	r3, r3, #4
 8004358:	607b      	str	r3, [r7, #4]
 800435a:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800435c:	4b45      	ldr	r3, [pc, #276]	@ (8004474 <MX_GPIO_Init+0x174>)
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	4a44      	ldr	r2, [pc, #272]	@ (8004474 <MX_GPIO_Init+0x174>)
 8004362:	f043 0308 	orr.w	r3, r3, #8
 8004366:	6193      	str	r3, [r2, #24]
 8004368:	4b42      	ldr	r3, [pc, #264]	@ (8004474 <MX_GPIO_Init+0x174>)
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	f003 0308 	and.w	r3, r3, #8
 8004370:	603b      	str	r3, [r7, #0]
 8004372:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC,
 8004374:	2200      	movs	r2, #0
 8004376:	f44f 71e1 	mov.w	r1, #450	@ 0x1c2
 800437a:	483f      	ldr	r0, [pc, #252]	@ (8004478 <MX_GPIO_Init+0x178>)
 800437c:	f000 fd47 	bl	8004e0e <HAL_GPIO_WritePin>
			LCD_RST_Pin | I2C1_SDA_Pin | LCD_D1_Pin | I2C1_SCL_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8004380:	2200      	movs	r2, #0
 8004382:	f240 7133 	movw	r1, #1843	@ 0x733
 8004386:	483d      	ldr	r0, [pc, #244]	@ (800447c <MX_GPIO_Init+0x17c>)
 8004388:	f000 fd41 	bl	8004e0e <HAL_GPIO_WritePin>
			LCD_RD_Pin | LCD_WR_Pin | LCD_RS_Pin | LD2_Pin | LCD_D7_Pin
					| LCD_D0_Pin | LCD_D2_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 800438c:	2200      	movs	r2, #0
 800438e:	f240 4139 	movw	r1, #1081	@ 0x439
 8004392:	483b      	ldr	r0, [pc, #236]	@ (8004480 <MX_GPIO_Init+0x180>)
 8004394:	f000 fd3b 	bl	8004e0e <HAL_GPIO_WritePin>
			LCD_CS_Pin | LCD_D6_Pin | LCD_D3_Pin | LCD_D5_Pin | LCD_D4_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8004398:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800439c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800439e:	4b39      	ldr	r3, [pc, #228]	@ (8004484 <MX_GPIO_Init+0x184>)
 80043a0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043a2:	2300      	movs	r3, #0
 80043a4:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80043a6:	f107 0310 	add.w	r3, r7, #16
 80043aa:	4619      	mov	r1, r3
 80043ac:	4832      	ldr	r0, [pc, #200]	@ (8004478 <MX_GPIO_Init+0x178>)
 80043ae:	f000 fb93 	bl	8004ad8 <HAL_GPIO_Init>

	/*Configure GPIO pins : LCD_RST_Pin LCD_D1_Pin */
	GPIO_InitStruct.Pin = LCD_RST_Pin | LCD_D1_Pin;
 80043b2:	2382      	movs	r3, #130	@ 0x82
 80043b4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043b6:	2301      	movs	r3, #1
 80043b8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ba:	2300      	movs	r3, #0
 80043bc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043be:	2302      	movs	r3, #2
 80043c0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043c2:	f107 0310 	add.w	r3, r7, #16
 80043c6:	4619      	mov	r1, r3
 80043c8:	482b      	ldr	r0, [pc, #172]	@ (8004478 <MX_GPIO_Init+0x178>)
 80043ca:	f000 fb85 	bl	8004ad8 <HAL_GPIO_Init>

	/*Configure GPIO pins : UP_Pin LEFT_Pin */
	GPIO_InitStruct.Pin = UP_Pin | LEFT_Pin;
 80043ce:	230c      	movs	r3, #12
 80043d0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80043d2:	2300      	movs	r3, #0
 80043d4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80043d6:	2301      	movs	r3, #1
 80043d8:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043da:	f107 0310 	add.w	r3, r7, #16
 80043de:	4619      	mov	r1, r3
 80043e0:	4825      	ldr	r0, [pc, #148]	@ (8004478 <MX_GPIO_Init+0x178>)
 80043e2:	f000 fb79 	bl	8004ad8 <HAL_GPIO_Init>

	/*Configure GPIO pins : LCD_RD_Pin LCD_WR_Pin LCD_RS_Pin LD2_Pin
	 LCD_D7_Pin LCD_D0_Pin LCD_D2_Pin */
	GPIO_InitStruct.Pin = LCD_RD_Pin | LCD_WR_Pin | LCD_RS_Pin | LD2_Pin
 80043e6:	f240 7333 	movw	r3, #1843	@ 0x733
 80043ea:	613b      	str	r3, [r7, #16]
			| LCD_D7_Pin | LCD_D0_Pin | LCD_D2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043ec:	2301      	movs	r3, #1
 80043ee:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043f0:	2300      	movs	r3, #0
 80043f2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043f4:	2302      	movs	r3, #2
 80043f6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043f8:	f107 0310 	add.w	r3, r7, #16
 80043fc:	4619      	mov	r1, r3
 80043fe:	481f      	ldr	r0, [pc, #124]	@ (800447c <MX_GPIO_Init+0x17c>)
 8004400:	f000 fb6a 	bl	8004ad8 <HAL_GPIO_Init>

	/*Configure GPIO pins : LCD_CS_Pin LCD_D6_Pin LCD_D3_Pin LCD_D5_Pin
	 LCD_D4_Pin */
	GPIO_InitStruct.Pin = LCD_CS_Pin | LCD_D6_Pin | LCD_D3_Pin | LCD_D5_Pin
 8004404:	f240 4339 	movw	r3, #1081	@ 0x439
 8004408:	613b      	str	r3, [r7, #16]
			| LCD_D4_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800440a:	2301      	movs	r3, #1
 800440c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800440e:	2300      	movs	r3, #0
 8004410:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004412:	2302      	movs	r3, #2
 8004414:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004416:	f107 0310 	add.w	r3, r7, #16
 800441a:	4619      	mov	r1, r3
 800441c:	4818      	ldr	r0, [pc, #96]	@ (8004480 <MX_GPIO_Init+0x180>)
 800441e:	f000 fb5b 	bl	8004ad8 <HAL_GPIO_Init>

	/*Configure GPIO pins : DOWN_Pin RIGHT_Pin */
	GPIO_InitStruct.Pin = DOWN_Pin | RIGHT_Pin;
 8004422:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8004426:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004428:	2300      	movs	r3, #0
 800442a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800442c:	2301      	movs	r3, #1
 800442e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004430:	f107 0310 	add.w	r3, r7, #16
 8004434:	4619      	mov	r1, r3
 8004436:	4812      	ldr	r0, [pc, #72]	@ (8004480 <MX_GPIO_Init+0x180>)
 8004438:	f000 fb4e 	bl	8004ad8 <HAL_GPIO_Init>

	/*Configure GPIO pins : I2C1_SDA_Pin I2C1_SCL_Pin */
	GPIO_InitStruct.Pin = I2C1_SDA_Pin | I2C1_SCL_Pin;
 800443c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8004440:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8004442:	2311      	movs	r3, #17
 8004444:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004446:	2301      	movs	r3, #1
 8004448:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800444a:	2302      	movs	r3, #2
 800444c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800444e:	f107 0310 	add.w	r3, r7, #16
 8004452:	4619      	mov	r1, r3
 8004454:	4808      	ldr	r0, [pc, #32]	@ (8004478 <MX_GPIO_Init+0x178>)
 8004456:	f000 fb3f 	bl	8004ad8 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800445a:	2200      	movs	r2, #0
 800445c:	2100      	movs	r1, #0
 800445e:	2028      	movs	r0, #40	@ 0x28
 8004460:	f000 fb03 	bl	8004a6a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004464:	2028      	movs	r0, #40	@ 0x28
 8004466:	f000 fb1c 	bl	8004aa2 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 800446a:	bf00      	nop
 800446c:	3720      	adds	r7, #32
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	40021000 	.word	0x40021000
 8004478:	40011000 	.word	0x40011000
 800447c:	40010800 	.word	0x40010800
 8004480:	40010c00 	.word	0x40010c00
 8004484:	10110000 	.word	0x10110000

08004488 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8004488:	b480      	push	{r7}
 800448a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800448c:	b672      	cpsid	i
}
 800448e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004490:	bf00      	nop
 8004492:	e7fd      	b.n	8004490 <Error_Handler+0x8>

08004494 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800449a:	4b15      	ldr	r3, [pc, #84]	@ (80044f0 <HAL_MspInit+0x5c>)
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	4a14      	ldr	r2, [pc, #80]	@ (80044f0 <HAL_MspInit+0x5c>)
 80044a0:	f043 0301 	orr.w	r3, r3, #1
 80044a4:	6193      	str	r3, [r2, #24]
 80044a6:	4b12      	ldr	r3, [pc, #72]	@ (80044f0 <HAL_MspInit+0x5c>)
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	60bb      	str	r3, [r7, #8]
 80044b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80044b2:	4b0f      	ldr	r3, [pc, #60]	@ (80044f0 <HAL_MspInit+0x5c>)
 80044b4:	69db      	ldr	r3, [r3, #28]
 80044b6:	4a0e      	ldr	r2, [pc, #56]	@ (80044f0 <HAL_MspInit+0x5c>)
 80044b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044bc:	61d3      	str	r3, [r2, #28]
 80044be:	4b0c      	ldr	r3, [pc, #48]	@ (80044f0 <HAL_MspInit+0x5c>)
 80044c0:	69db      	ldr	r3, [r3, #28]
 80044c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044c6:	607b      	str	r3, [r7, #4]
 80044c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80044ca:	4b0a      	ldr	r3, [pc, #40]	@ (80044f4 <HAL_MspInit+0x60>)
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	60fb      	str	r3, [r7, #12]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80044d6:	60fb      	str	r3, [r7, #12]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80044de:	60fb      	str	r3, [r7, #12]
 80044e0:	4a04      	ldr	r2, [pc, #16]	@ (80044f4 <HAL_MspInit+0x60>)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80044e6:	bf00      	nop
 80044e8:	3714      	adds	r7, #20
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bc80      	pop	{r7}
 80044ee:	4770      	bx	lr
 80044f0:	40021000 	.word	0x40021000
 80044f4:	40010000 	.word	0x40010000

080044f8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a12      	ldr	r2, [pc, #72]	@ (8004550 <HAL_TIM_Base_MspInit+0x58>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d10c      	bne.n	8004524 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800450a:	4b12      	ldr	r3, [pc, #72]	@ (8004554 <HAL_TIM_Base_MspInit+0x5c>)
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	4a11      	ldr	r2, [pc, #68]	@ (8004554 <HAL_TIM_Base_MspInit+0x5c>)
 8004510:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004514:	6193      	str	r3, [r2, #24]
 8004516:	4b0f      	ldr	r3, [pc, #60]	@ (8004554 <HAL_TIM_Base_MspInit+0x5c>)
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800451e:	60fb      	str	r3, [r7, #12]
 8004520:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004522:	e010      	b.n	8004546 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a0b      	ldr	r2, [pc, #44]	@ (8004558 <HAL_TIM_Base_MspInit+0x60>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d10b      	bne.n	8004546 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800452e:	4b09      	ldr	r3, [pc, #36]	@ (8004554 <HAL_TIM_Base_MspInit+0x5c>)
 8004530:	69db      	ldr	r3, [r3, #28]
 8004532:	4a08      	ldr	r2, [pc, #32]	@ (8004554 <HAL_TIM_Base_MspInit+0x5c>)
 8004534:	f043 0302 	orr.w	r3, r3, #2
 8004538:	61d3      	str	r3, [r2, #28]
 800453a:	4b06      	ldr	r3, [pc, #24]	@ (8004554 <HAL_TIM_Base_MspInit+0x5c>)
 800453c:	69db      	ldr	r3, [r3, #28]
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	60bb      	str	r3, [r7, #8]
 8004544:	68bb      	ldr	r3, [r7, #8]
}
 8004546:	bf00      	nop
 8004548:	3714      	adds	r7, #20
 800454a:	46bd      	mov	sp, r7
 800454c:	bc80      	pop	{r7}
 800454e:	4770      	bx	lr
 8004550:	40012c00 	.word	0x40012c00
 8004554:	40021000 	.word	0x40021000
 8004558:	40000400 	.word	0x40000400

0800455c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b088      	sub	sp, #32
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004564:	f107 0310 	add.w	r3, r7, #16
 8004568:	2200      	movs	r2, #0
 800456a:	601a      	str	r2, [r3, #0]
 800456c:	605a      	str	r2, [r3, #4]
 800456e:	609a      	str	r2, [r3, #8]
 8004570:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a1f      	ldr	r2, [pc, #124]	@ (80045f4 <HAL_TIM_MspPostInit+0x98>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d119      	bne.n	80045b0 <HAL_TIM_MspPostInit+0x54>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800457c:	4b1e      	ldr	r3, [pc, #120]	@ (80045f8 <HAL_TIM_MspPostInit+0x9c>)
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	4a1d      	ldr	r2, [pc, #116]	@ (80045f8 <HAL_TIM_MspPostInit+0x9c>)
 8004582:	f043 0304 	orr.w	r3, r3, #4
 8004586:	6193      	str	r3, [r2, #24]
 8004588:	4b1b      	ldr	r3, [pc, #108]	@ (80045f8 <HAL_TIM_MspPostInit+0x9c>)
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	f003 0304 	and.w	r3, r3, #4
 8004590:	60fb      	str	r3, [r7, #12]
 8004592:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004594:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004598:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800459a:	2302      	movs	r3, #2
 800459c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800459e:	2302      	movs	r3, #2
 80045a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045a2:	f107 0310 	add.w	r3, r7, #16
 80045a6:	4619      	mov	r1, r3
 80045a8:	4814      	ldr	r0, [pc, #80]	@ (80045fc <HAL_TIM_MspPostInit+0xa0>)
 80045aa:	f000 fa95 	bl	8004ad8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80045ae:	e01c      	b.n	80045ea <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM3)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a12      	ldr	r2, [pc, #72]	@ (8004600 <HAL_TIM_MspPostInit+0xa4>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d117      	bne.n	80045ea <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045ba:	4b0f      	ldr	r3, [pc, #60]	@ (80045f8 <HAL_TIM_MspPostInit+0x9c>)
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	4a0e      	ldr	r2, [pc, #56]	@ (80045f8 <HAL_TIM_MspPostInit+0x9c>)
 80045c0:	f043 0308 	orr.w	r3, r3, #8
 80045c4:	6193      	str	r3, [r2, #24]
 80045c6:	4b0c      	ldr	r3, [pc, #48]	@ (80045f8 <HAL_TIM_MspPostInit+0x9c>)
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	f003 0308 	and.w	r3, r3, #8
 80045ce:	60bb      	str	r3, [r7, #8]
 80045d0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80045d2:	2302      	movs	r3, #2
 80045d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045d6:	2302      	movs	r3, #2
 80045d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045da:	2302      	movs	r3, #2
 80045dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045de:	f107 0310 	add.w	r3, r7, #16
 80045e2:	4619      	mov	r1, r3
 80045e4:	4807      	ldr	r0, [pc, #28]	@ (8004604 <HAL_TIM_MspPostInit+0xa8>)
 80045e6:	f000 fa77 	bl	8004ad8 <HAL_GPIO_Init>
}
 80045ea:	bf00      	nop
 80045ec:	3720      	adds	r7, #32
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	40012c00 	.word	0x40012c00
 80045f8:	40021000 	.word	0x40021000
 80045fc:	40010800 	.word	0x40010800
 8004600:	40000400 	.word	0x40000400
 8004604:	40010c00 	.word	0x40010c00

08004608 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b088      	sub	sp, #32
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004610:	f107 0310 	add.w	r3, r7, #16
 8004614:	2200      	movs	r2, #0
 8004616:	601a      	str	r2, [r3, #0]
 8004618:	605a      	str	r2, [r3, #4]
 800461a:	609a      	str	r2, [r3, #8]
 800461c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a15      	ldr	r2, [pc, #84]	@ (8004678 <HAL_UART_MspInit+0x70>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d123      	bne.n	8004670 <HAL_UART_MspInit+0x68>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004628:	4b14      	ldr	r3, [pc, #80]	@ (800467c <HAL_UART_MspInit+0x74>)
 800462a:	69db      	ldr	r3, [r3, #28]
 800462c:	4a13      	ldr	r2, [pc, #76]	@ (800467c <HAL_UART_MspInit+0x74>)
 800462e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004632:	61d3      	str	r3, [r2, #28]
 8004634:	4b11      	ldr	r3, [pc, #68]	@ (800467c <HAL_UART_MspInit+0x74>)
 8004636:	69db      	ldr	r3, [r3, #28]
 8004638:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800463c:	60fb      	str	r3, [r7, #12]
 800463e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004640:	4b0e      	ldr	r3, [pc, #56]	@ (800467c <HAL_UART_MspInit+0x74>)
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	4a0d      	ldr	r2, [pc, #52]	@ (800467c <HAL_UART_MspInit+0x74>)
 8004646:	f043 0304 	orr.w	r3, r3, #4
 800464a:	6193      	str	r3, [r2, #24]
 800464c:	4b0b      	ldr	r3, [pc, #44]	@ (800467c <HAL_UART_MspInit+0x74>)
 800464e:	699b      	ldr	r3, [r3, #24]
 8004650:	f003 0304 	and.w	r3, r3, #4
 8004654:	60bb      	str	r3, [r7, #8]
 8004656:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004658:	230c      	movs	r3, #12
 800465a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800465c:	2302      	movs	r3, #2
 800465e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004660:	2302      	movs	r3, #2
 8004662:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004664:	f107 0310 	add.w	r3, r7, #16
 8004668:	4619      	mov	r1, r3
 800466a:	4805      	ldr	r0, [pc, #20]	@ (8004680 <HAL_UART_MspInit+0x78>)
 800466c:	f000 fa34 	bl	8004ad8 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8004670:	bf00      	nop
 8004672:	3720      	adds	r7, #32
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	40004400 	.word	0x40004400
 800467c:	40021000 	.word	0x40021000
 8004680:	40010800 	.word	0x40010800

08004684 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004684:	b480      	push	{r7}
 8004686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004688:	bf00      	nop
 800468a:	e7fd      	b.n	8004688 <NMI_Handler+0x4>

0800468c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800468c:	b480      	push	{r7}
 800468e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004690:	bf00      	nop
 8004692:	e7fd      	b.n	8004690 <HardFault_Handler+0x4>

08004694 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004694:	b480      	push	{r7}
 8004696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004698:	bf00      	nop
 800469a:	e7fd      	b.n	8004698 <MemManage_Handler+0x4>

0800469c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800469c:	b480      	push	{r7}
 800469e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80046a0:	bf00      	nop
 80046a2:	e7fd      	b.n	80046a0 <BusFault_Handler+0x4>

080046a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80046a4:	b480      	push	{r7}
 80046a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80046a8:	bf00      	nop
 80046aa:	e7fd      	b.n	80046a8 <UsageFault_Handler+0x4>

080046ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80046ac:	b480      	push	{r7}
 80046ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80046b0:	bf00      	nop
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bc80      	pop	{r7}
 80046b6:	4770      	bx	lr

080046b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80046b8:	b480      	push	{r7}
 80046ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80046bc:	bf00      	nop
 80046be:	46bd      	mov	sp, r7
 80046c0:	bc80      	pop	{r7}
 80046c2:	4770      	bx	lr

080046c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80046c4:	b480      	push	{r7}
 80046c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80046c8:	bf00      	nop
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bc80      	pop	{r7}
 80046ce:	4770      	bx	lr

080046d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80046d4:	f000 f8b2 	bl	800483c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80046d8:	bf00      	nop
 80046da:	bd80      	pop	{r7, pc}

080046dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80046e0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80046e4:	f000 fbc4 	bl	8004e70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80046e8:	bf00      	nop
 80046ea:	bd80      	pop	{r7, pc}

080046ec <_sbrk>:
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b086      	sub	sp, #24
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	4a14      	ldr	r2, [pc, #80]	@ (8004748 <_sbrk+0x5c>)
 80046f6:	4b15      	ldr	r3, [pc, #84]	@ (800474c <_sbrk+0x60>)
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	617b      	str	r3, [r7, #20]
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	613b      	str	r3, [r7, #16]
 8004700:	4b13      	ldr	r3, [pc, #76]	@ (8004750 <_sbrk+0x64>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d102      	bne.n	800470e <_sbrk+0x22>
 8004708:	4b11      	ldr	r3, [pc, #68]	@ (8004750 <_sbrk+0x64>)
 800470a:	4a12      	ldr	r2, [pc, #72]	@ (8004754 <_sbrk+0x68>)
 800470c:	601a      	str	r2, [r3, #0]
 800470e:	4b10      	ldr	r3, [pc, #64]	@ (8004750 <_sbrk+0x64>)
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4413      	add	r3, r2
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	429a      	cmp	r2, r3
 800471a:	d207      	bcs.n	800472c <_sbrk+0x40>
 800471c:	f001 ff7a 	bl	8006614 <__errno>
 8004720:	4603      	mov	r3, r0
 8004722:	220c      	movs	r2, #12
 8004724:	601a      	str	r2, [r3, #0]
 8004726:	f04f 33ff 	mov.w	r3, #4294967295
 800472a:	e009      	b.n	8004740 <_sbrk+0x54>
 800472c:	4b08      	ldr	r3, [pc, #32]	@ (8004750 <_sbrk+0x64>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	60fb      	str	r3, [r7, #12]
 8004732:	4b07      	ldr	r3, [pc, #28]	@ (8004750 <_sbrk+0x64>)
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4413      	add	r3, r2
 800473a:	4a05      	ldr	r2, [pc, #20]	@ (8004750 <_sbrk+0x64>)
 800473c:	6013      	str	r3, [r2, #0]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	4618      	mov	r0, r3
 8004742:	3718      	adds	r7, #24
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	20005000 	.word	0x20005000
 800474c:	00000400 	.word	0x00000400
 8004750:	200002c8 	.word	0x200002c8
 8004754:	20000418 	.word	0x20000418

08004758 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004758:	b480      	push	{r7}
 800475a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800475c:	bf00      	nop
 800475e:	46bd      	mov	sp, r7
 8004760:	bc80      	pop	{r7}
 8004762:	4770      	bx	lr

08004764 <Reset_Handler>:
 8004764:	f7ff fff8 	bl	8004758 <SystemInit>
 8004768:	480b      	ldr	r0, [pc, #44]	@ (8004798 <LoopFillZerobss+0xe>)
 800476a:	490c      	ldr	r1, [pc, #48]	@ (800479c <LoopFillZerobss+0x12>)
 800476c:	4a0c      	ldr	r2, [pc, #48]	@ (80047a0 <LoopFillZerobss+0x16>)
 800476e:	2300      	movs	r3, #0
 8004770:	e002      	b.n	8004778 <LoopCopyDataInit>

08004772 <CopyDataInit>:
 8004772:	58d4      	ldr	r4, [r2, r3]
 8004774:	50c4      	str	r4, [r0, r3]
 8004776:	3304      	adds	r3, #4

08004778 <LoopCopyDataInit>:
 8004778:	18c4      	adds	r4, r0, r3
 800477a:	428c      	cmp	r4, r1
 800477c:	d3f9      	bcc.n	8004772 <CopyDataInit>
 800477e:	4a09      	ldr	r2, [pc, #36]	@ (80047a4 <LoopFillZerobss+0x1a>)
 8004780:	4c09      	ldr	r4, [pc, #36]	@ (80047a8 <LoopFillZerobss+0x1e>)
 8004782:	2300      	movs	r3, #0
 8004784:	e001      	b.n	800478a <LoopFillZerobss>

08004786 <FillZerobss>:
 8004786:	6013      	str	r3, [r2, #0]
 8004788:	3204      	adds	r2, #4

0800478a <LoopFillZerobss>:
 800478a:	42a2      	cmp	r2, r4
 800478c:	d3fb      	bcc.n	8004786 <FillZerobss>
 800478e:	f001 ff47 	bl	8006620 <__libc_init_array>
 8004792:	f7ff fc01 	bl	8003f98 <main>
 8004796:	4770      	bx	lr
 8004798:	20000000 	.word	0x20000000
 800479c:	200001c0 	.word	0x200001c0
 80047a0:	080083bc 	.word	0x080083bc
 80047a4:	200001c0 	.word	0x200001c0
 80047a8:	20000418 	.word	0x20000418

080047ac <ADC1_2_IRQHandler>:
 80047ac:	e7fe      	b.n	80047ac <ADC1_2_IRQHandler>
	...

080047b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80047b4:	4b08      	ldr	r3, [pc, #32]	@ (80047d8 <HAL_Init+0x28>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a07      	ldr	r2, [pc, #28]	@ (80047d8 <HAL_Init+0x28>)
 80047ba:	f043 0310 	orr.w	r3, r3, #16
 80047be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80047c0:	2003      	movs	r0, #3
 80047c2:	f000 f947 	bl	8004a54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80047c6:	2000      	movs	r0, #0
 80047c8:	f000 f808 	bl	80047dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80047cc:	f7ff fe62 	bl	8004494 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	40022000 	.word	0x40022000

080047dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80047e4:	4b12      	ldr	r3, [pc, #72]	@ (8004830 <HAL_InitTick+0x54>)
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	4b12      	ldr	r3, [pc, #72]	@ (8004834 <HAL_InitTick+0x58>)
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	4619      	mov	r1, r3
 80047ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80047f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80047f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047fa:	4618      	mov	r0, r3
 80047fc:	f000 f95f 	bl	8004abe <HAL_SYSTICK_Config>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d001      	beq.n	800480a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e00e      	b.n	8004828 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2b0f      	cmp	r3, #15
 800480e:	d80a      	bhi.n	8004826 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004810:	2200      	movs	r2, #0
 8004812:	6879      	ldr	r1, [r7, #4]
 8004814:	f04f 30ff 	mov.w	r0, #4294967295
 8004818:	f000 f927 	bl	8004a6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800481c:	4a06      	ldr	r2, [pc, #24]	@ (8004838 <HAL_InitTick+0x5c>)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004822:	2300      	movs	r3, #0
 8004824:	e000      	b.n	8004828 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
}
 8004828:	4618      	mov	r0, r3
 800482a:	3708      	adds	r7, #8
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}
 8004830:	20000164 	.word	0x20000164
 8004834:	2000016c 	.word	0x2000016c
 8004838:	20000168 	.word	0x20000168

0800483c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800483c:	b480      	push	{r7}
 800483e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004840:	4b05      	ldr	r3, [pc, #20]	@ (8004858 <HAL_IncTick+0x1c>)
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	461a      	mov	r2, r3
 8004846:	4b05      	ldr	r3, [pc, #20]	@ (800485c <HAL_IncTick+0x20>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4413      	add	r3, r2
 800484c:	4a03      	ldr	r2, [pc, #12]	@ (800485c <HAL_IncTick+0x20>)
 800484e:	6013      	str	r3, [r2, #0]
}
 8004850:	bf00      	nop
 8004852:	46bd      	mov	sp, r7
 8004854:	bc80      	pop	{r7}
 8004856:	4770      	bx	lr
 8004858:	2000016c 	.word	0x2000016c
 800485c:	200002cc 	.word	0x200002cc

08004860 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004860:	b480      	push	{r7}
 8004862:	af00      	add	r7, sp, #0
  return uwTick;
 8004864:	4b02      	ldr	r3, [pc, #8]	@ (8004870 <HAL_GetTick+0x10>)
 8004866:	681b      	ldr	r3, [r3, #0]
}
 8004868:	4618      	mov	r0, r3
 800486a:	46bd      	mov	sp, r7
 800486c:	bc80      	pop	{r7}
 800486e:	4770      	bx	lr
 8004870:	200002cc 	.word	0x200002cc

08004874 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800487c:	f7ff fff0 	bl	8004860 <HAL_GetTick>
 8004880:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800488c:	d005      	beq.n	800489a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800488e:	4b0a      	ldr	r3, [pc, #40]	@ (80048b8 <HAL_Delay+0x44>)
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	461a      	mov	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	4413      	add	r3, r2
 8004898:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800489a:	bf00      	nop
 800489c:	f7ff ffe0 	bl	8004860 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d8f7      	bhi.n	800489c <HAL_Delay+0x28>
  {
  }
}
 80048ac:	bf00      	nop
 80048ae:	bf00      	nop
 80048b0:	3710      	adds	r7, #16
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	2000016c 	.word	0x2000016c

080048bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f003 0307 	and.w	r3, r3, #7
 80048ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004900 <__NVIC_SetPriorityGrouping+0x44>)
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80048d8:	4013      	ands	r3, r2
 80048da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80048e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048ee:	4a04      	ldr	r2, [pc, #16]	@ (8004900 <__NVIC_SetPriorityGrouping+0x44>)
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	60d3      	str	r3, [r2, #12]
}
 80048f4:	bf00      	nop
 80048f6:	3714      	adds	r7, #20
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bc80      	pop	{r7}
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	e000ed00 	.word	0xe000ed00

08004904 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004904:	b480      	push	{r7}
 8004906:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004908:	4b04      	ldr	r3, [pc, #16]	@ (800491c <__NVIC_GetPriorityGrouping+0x18>)
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	0a1b      	lsrs	r3, r3, #8
 800490e:	f003 0307 	and.w	r3, r3, #7
}
 8004912:	4618      	mov	r0, r3
 8004914:	46bd      	mov	sp, r7
 8004916:	bc80      	pop	{r7}
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	e000ed00 	.word	0xe000ed00

08004920 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	4603      	mov	r3, r0
 8004928:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800492a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800492e:	2b00      	cmp	r3, #0
 8004930:	db0b      	blt.n	800494a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004932:	79fb      	ldrb	r3, [r7, #7]
 8004934:	f003 021f 	and.w	r2, r3, #31
 8004938:	4906      	ldr	r1, [pc, #24]	@ (8004954 <__NVIC_EnableIRQ+0x34>)
 800493a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800493e:	095b      	lsrs	r3, r3, #5
 8004940:	2001      	movs	r0, #1
 8004942:	fa00 f202 	lsl.w	r2, r0, r2
 8004946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800494a:	bf00      	nop
 800494c:	370c      	adds	r7, #12
 800494e:	46bd      	mov	sp, r7
 8004950:	bc80      	pop	{r7}
 8004952:	4770      	bx	lr
 8004954:	e000e100 	.word	0xe000e100

08004958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	4603      	mov	r3, r0
 8004960:	6039      	str	r1, [r7, #0]
 8004962:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004968:	2b00      	cmp	r3, #0
 800496a:	db0a      	blt.n	8004982 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	b2da      	uxtb	r2, r3
 8004970:	490c      	ldr	r1, [pc, #48]	@ (80049a4 <__NVIC_SetPriority+0x4c>)
 8004972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004976:	0112      	lsls	r2, r2, #4
 8004978:	b2d2      	uxtb	r2, r2
 800497a:	440b      	add	r3, r1
 800497c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004980:	e00a      	b.n	8004998 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	b2da      	uxtb	r2, r3
 8004986:	4908      	ldr	r1, [pc, #32]	@ (80049a8 <__NVIC_SetPriority+0x50>)
 8004988:	79fb      	ldrb	r3, [r7, #7]
 800498a:	f003 030f 	and.w	r3, r3, #15
 800498e:	3b04      	subs	r3, #4
 8004990:	0112      	lsls	r2, r2, #4
 8004992:	b2d2      	uxtb	r2, r2
 8004994:	440b      	add	r3, r1
 8004996:	761a      	strb	r2, [r3, #24]
}
 8004998:	bf00      	nop
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	bc80      	pop	{r7}
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	e000e100 	.word	0xe000e100
 80049a8:	e000ed00 	.word	0xe000ed00

080049ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b089      	sub	sp, #36	@ 0x24
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f003 0307 	and.w	r3, r3, #7
 80049be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	f1c3 0307 	rsb	r3, r3, #7
 80049c6:	2b04      	cmp	r3, #4
 80049c8:	bf28      	it	cs
 80049ca:	2304      	movcs	r3, #4
 80049cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	3304      	adds	r3, #4
 80049d2:	2b06      	cmp	r3, #6
 80049d4:	d902      	bls.n	80049dc <NVIC_EncodePriority+0x30>
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	3b03      	subs	r3, #3
 80049da:	e000      	b.n	80049de <NVIC_EncodePriority+0x32>
 80049dc:	2300      	movs	r3, #0
 80049de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049e0:	f04f 32ff 	mov.w	r2, #4294967295
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ea:	43da      	mvns	r2, r3
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	401a      	ands	r2, r3
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049f4:	f04f 31ff 	mov.w	r1, #4294967295
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	fa01 f303 	lsl.w	r3, r1, r3
 80049fe:	43d9      	mvns	r1, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a04:	4313      	orrs	r3, r2
         );
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3724      	adds	r7, #36	@ 0x24
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bc80      	pop	{r7}
 8004a0e:	4770      	bx	lr

08004a10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a20:	d301      	bcc.n	8004a26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a22:	2301      	movs	r3, #1
 8004a24:	e00f      	b.n	8004a46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a26:	4a0a      	ldr	r2, [pc, #40]	@ (8004a50 <SysTick_Config+0x40>)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a2e:	210f      	movs	r1, #15
 8004a30:	f04f 30ff 	mov.w	r0, #4294967295
 8004a34:	f7ff ff90 	bl	8004958 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a38:	4b05      	ldr	r3, [pc, #20]	@ (8004a50 <SysTick_Config+0x40>)
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a3e:	4b04      	ldr	r3, [pc, #16]	@ (8004a50 <SysTick_Config+0x40>)
 8004a40:	2207      	movs	r2, #7
 8004a42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3708      	adds	r7, #8
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	e000e010 	.word	0xe000e010

08004a54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f7ff ff2d 	bl	80048bc <__NVIC_SetPriorityGrouping>
}
 8004a62:	bf00      	nop
 8004a64:	3708      	adds	r7, #8
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b086      	sub	sp, #24
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	4603      	mov	r3, r0
 8004a72:	60b9      	str	r1, [r7, #8]
 8004a74:	607a      	str	r2, [r7, #4]
 8004a76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004a7c:	f7ff ff42 	bl	8004904 <__NVIC_GetPriorityGrouping>
 8004a80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	68b9      	ldr	r1, [r7, #8]
 8004a86:	6978      	ldr	r0, [r7, #20]
 8004a88:	f7ff ff90 	bl	80049ac <NVIC_EncodePriority>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a92:	4611      	mov	r1, r2
 8004a94:	4618      	mov	r0, r3
 8004a96:	f7ff ff5f 	bl	8004958 <__NVIC_SetPriority>
}
 8004a9a:	bf00      	nop
 8004a9c:	3718      	adds	r7, #24
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}

08004aa2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004aa2:	b580      	push	{r7, lr}
 8004aa4:	b082      	sub	sp, #8
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7ff ff35 	bl	8004920 <__NVIC_EnableIRQ>
}
 8004ab6:	bf00      	nop
 8004ab8:	3708      	adds	r7, #8
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b082      	sub	sp, #8
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f7ff ffa2 	bl	8004a10 <SysTick_Config>
 8004acc:	4603      	mov	r3, r0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3708      	adds	r7, #8
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
	...

08004ad8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b08b      	sub	sp, #44	@ 0x2c
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004aea:	e169      	b.n	8004dc0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004aec:	2201      	movs	r2, #1
 8004aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af0:	fa02 f303 	lsl.w	r3, r2, r3
 8004af4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	69fa      	ldr	r2, [r7, #28]
 8004afc:	4013      	ands	r3, r2
 8004afe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004b00:	69ba      	ldr	r2, [r7, #24]
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	f040 8158 	bne.w	8004dba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	4a9a      	ldr	r2, [pc, #616]	@ (8004d78 <HAL_GPIO_Init+0x2a0>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d05e      	beq.n	8004bd2 <HAL_GPIO_Init+0xfa>
 8004b14:	4a98      	ldr	r2, [pc, #608]	@ (8004d78 <HAL_GPIO_Init+0x2a0>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d875      	bhi.n	8004c06 <HAL_GPIO_Init+0x12e>
 8004b1a:	4a98      	ldr	r2, [pc, #608]	@ (8004d7c <HAL_GPIO_Init+0x2a4>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d058      	beq.n	8004bd2 <HAL_GPIO_Init+0xfa>
 8004b20:	4a96      	ldr	r2, [pc, #600]	@ (8004d7c <HAL_GPIO_Init+0x2a4>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d86f      	bhi.n	8004c06 <HAL_GPIO_Init+0x12e>
 8004b26:	4a96      	ldr	r2, [pc, #600]	@ (8004d80 <HAL_GPIO_Init+0x2a8>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d052      	beq.n	8004bd2 <HAL_GPIO_Init+0xfa>
 8004b2c:	4a94      	ldr	r2, [pc, #592]	@ (8004d80 <HAL_GPIO_Init+0x2a8>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d869      	bhi.n	8004c06 <HAL_GPIO_Init+0x12e>
 8004b32:	4a94      	ldr	r2, [pc, #592]	@ (8004d84 <HAL_GPIO_Init+0x2ac>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d04c      	beq.n	8004bd2 <HAL_GPIO_Init+0xfa>
 8004b38:	4a92      	ldr	r2, [pc, #584]	@ (8004d84 <HAL_GPIO_Init+0x2ac>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d863      	bhi.n	8004c06 <HAL_GPIO_Init+0x12e>
 8004b3e:	4a92      	ldr	r2, [pc, #584]	@ (8004d88 <HAL_GPIO_Init+0x2b0>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d046      	beq.n	8004bd2 <HAL_GPIO_Init+0xfa>
 8004b44:	4a90      	ldr	r2, [pc, #576]	@ (8004d88 <HAL_GPIO_Init+0x2b0>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d85d      	bhi.n	8004c06 <HAL_GPIO_Init+0x12e>
 8004b4a:	2b12      	cmp	r3, #18
 8004b4c:	d82a      	bhi.n	8004ba4 <HAL_GPIO_Init+0xcc>
 8004b4e:	2b12      	cmp	r3, #18
 8004b50:	d859      	bhi.n	8004c06 <HAL_GPIO_Init+0x12e>
 8004b52:	a201      	add	r2, pc, #4	@ (adr r2, 8004b58 <HAL_GPIO_Init+0x80>)
 8004b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b58:	08004bd3 	.word	0x08004bd3
 8004b5c:	08004bad 	.word	0x08004bad
 8004b60:	08004bbf 	.word	0x08004bbf
 8004b64:	08004c01 	.word	0x08004c01
 8004b68:	08004c07 	.word	0x08004c07
 8004b6c:	08004c07 	.word	0x08004c07
 8004b70:	08004c07 	.word	0x08004c07
 8004b74:	08004c07 	.word	0x08004c07
 8004b78:	08004c07 	.word	0x08004c07
 8004b7c:	08004c07 	.word	0x08004c07
 8004b80:	08004c07 	.word	0x08004c07
 8004b84:	08004c07 	.word	0x08004c07
 8004b88:	08004c07 	.word	0x08004c07
 8004b8c:	08004c07 	.word	0x08004c07
 8004b90:	08004c07 	.word	0x08004c07
 8004b94:	08004c07 	.word	0x08004c07
 8004b98:	08004c07 	.word	0x08004c07
 8004b9c:	08004bb5 	.word	0x08004bb5
 8004ba0:	08004bc9 	.word	0x08004bc9
 8004ba4:	4a79      	ldr	r2, [pc, #484]	@ (8004d8c <HAL_GPIO_Init+0x2b4>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d013      	beq.n	8004bd2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004baa:	e02c      	b.n	8004c06 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	623b      	str	r3, [r7, #32]
          break;
 8004bb2:	e029      	b.n	8004c08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	3304      	adds	r3, #4
 8004bba:	623b      	str	r3, [r7, #32]
          break;
 8004bbc:	e024      	b.n	8004c08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	3308      	adds	r3, #8
 8004bc4:	623b      	str	r3, [r7, #32]
          break;
 8004bc6:	e01f      	b.n	8004c08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	330c      	adds	r3, #12
 8004bce:	623b      	str	r3, [r7, #32]
          break;
 8004bd0:	e01a      	b.n	8004c08 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d102      	bne.n	8004be0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004bda:	2304      	movs	r3, #4
 8004bdc:	623b      	str	r3, [r7, #32]
          break;
 8004bde:	e013      	b.n	8004c08 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d105      	bne.n	8004bf4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004be8:	2308      	movs	r3, #8
 8004bea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	69fa      	ldr	r2, [r7, #28]
 8004bf0:	611a      	str	r2, [r3, #16]
          break;
 8004bf2:	e009      	b.n	8004c08 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004bf4:	2308      	movs	r3, #8
 8004bf6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	69fa      	ldr	r2, [r7, #28]
 8004bfc:	615a      	str	r2, [r3, #20]
          break;
 8004bfe:	e003      	b.n	8004c08 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004c00:	2300      	movs	r3, #0
 8004c02:	623b      	str	r3, [r7, #32]
          break;
 8004c04:	e000      	b.n	8004c08 <HAL_GPIO_Init+0x130>
          break;
 8004c06:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	2bff      	cmp	r3, #255	@ 0xff
 8004c0c:	d801      	bhi.n	8004c12 <HAL_GPIO_Init+0x13a>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	e001      	b.n	8004c16 <HAL_GPIO_Init+0x13e>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	3304      	adds	r3, #4
 8004c16:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	2bff      	cmp	r3, #255	@ 0xff
 8004c1c:	d802      	bhi.n	8004c24 <HAL_GPIO_Init+0x14c>
 8004c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	e002      	b.n	8004c2a <HAL_GPIO_Init+0x152>
 8004c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c26:	3b08      	subs	r3, #8
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	210f      	movs	r1, #15
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	fa01 f303 	lsl.w	r3, r1, r3
 8004c38:	43db      	mvns	r3, r3
 8004c3a:	401a      	ands	r2, r3
 8004c3c:	6a39      	ldr	r1, [r7, #32]
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	fa01 f303 	lsl.w	r3, r1, r3
 8004c44:	431a      	orrs	r2, r3
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	f000 80b1 	beq.w	8004dba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004c58:	4b4d      	ldr	r3, [pc, #308]	@ (8004d90 <HAL_GPIO_Init+0x2b8>)
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	4a4c      	ldr	r2, [pc, #304]	@ (8004d90 <HAL_GPIO_Init+0x2b8>)
 8004c5e:	f043 0301 	orr.w	r3, r3, #1
 8004c62:	6193      	str	r3, [r2, #24]
 8004c64:	4b4a      	ldr	r3, [pc, #296]	@ (8004d90 <HAL_GPIO_Init+0x2b8>)
 8004c66:	699b      	ldr	r3, [r3, #24]
 8004c68:	f003 0301 	and.w	r3, r3, #1
 8004c6c:	60bb      	str	r3, [r7, #8]
 8004c6e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004c70:	4a48      	ldr	r2, [pc, #288]	@ (8004d94 <HAL_GPIO_Init+0x2bc>)
 8004c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c74:	089b      	lsrs	r3, r3, #2
 8004c76:	3302      	adds	r3, #2
 8004c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c7c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c80:	f003 0303 	and.w	r3, r3, #3
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	220f      	movs	r2, #15
 8004c88:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8c:	43db      	mvns	r3, r3
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	4013      	ands	r3, r2
 8004c92:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a40      	ldr	r2, [pc, #256]	@ (8004d98 <HAL_GPIO_Init+0x2c0>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d013      	beq.n	8004cc4 <HAL_GPIO_Init+0x1ec>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a3f      	ldr	r2, [pc, #252]	@ (8004d9c <HAL_GPIO_Init+0x2c4>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d00d      	beq.n	8004cc0 <HAL_GPIO_Init+0x1e8>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a3e      	ldr	r2, [pc, #248]	@ (8004da0 <HAL_GPIO_Init+0x2c8>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d007      	beq.n	8004cbc <HAL_GPIO_Init+0x1e4>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a3d      	ldr	r2, [pc, #244]	@ (8004da4 <HAL_GPIO_Init+0x2cc>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d101      	bne.n	8004cb8 <HAL_GPIO_Init+0x1e0>
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e006      	b.n	8004cc6 <HAL_GPIO_Init+0x1ee>
 8004cb8:	2304      	movs	r3, #4
 8004cba:	e004      	b.n	8004cc6 <HAL_GPIO_Init+0x1ee>
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	e002      	b.n	8004cc6 <HAL_GPIO_Init+0x1ee>
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e000      	b.n	8004cc6 <HAL_GPIO_Init+0x1ee>
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cc8:	f002 0203 	and.w	r2, r2, #3
 8004ccc:	0092      	lsls	r2, r2, #2
 8004cce:	4093      	lsls	r3, r2
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004cd6:	492f      	ldr	r1, [pc, #188]	@ (8004d94 <HAL_GPIO_Init+0x2bc>)
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cda:	089b      	lsrs	r3, r3, #2
 8004cdc:	3302      	adds	r3, #2
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d006      	beq.n	8004cfe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004cf0:	4b2d      	ldr	r3, [pc, #180]	@ (8004da8 <HAL_GPIO_Init+0x2d0>)
 8004cf2:	689a      	ldr	r2, [r3, #8]
 8004cf4:	492c      	ldr	r1, [pc, #176]	@ (8004da8 <HAL_GPIO_Init+0x2d0>)
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	608b      	str	r3, [r1, #8]
 8004cfc:	e006      	b.n	8004d0c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004cfe:	4b2a      	ldr	r3, [pc, #168]	@ (8004da8 <HAL_GPIO_Init+0x2d0>)
 8004d00:	689a      	ldr	r2, [r3, #8]
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	43db      	mvns	r3, r3
 8004d06:	4928      	ldr	r1, [pc, #160]	@ (8004da8 <HAL_GPIO_Init+0x2d0>)
 8004d08:	4013      	ands	r3, r2
 8004d0a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d006      	beq.n	8004d26 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004d18:	4b23      	ldr	r3, [pc, #140]	@ (8004da8 <HAL_GPIO_Init+0x2d0>)
 8004d1a:	68da      	ldr	r2, [r3, #12]
 8004d1c:	4922      	ldr	r1, [pc, #136]	@ (8004da8 <HAL_GPIO_Init+0x2d0>)
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	60cb      	str	r3, [r1, #12]
 8004d24:	e006      	b.n	8004d34 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004d26:	4b20      	ldr	r3, [pc, #128]	@ (8004da8 <HAL_GPIO_Init+0x2d0>)
 8004d28:	68da      	ldr	r2, [r3, #12]
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	43db      	mvns	r3, r3
 8004d2e:	491e      	ldr	r1, [pc, #120]	@ (8004da8 <HAL_GPIO_Init+0x2d0>)
 8004d30:	4013      	ands	r3, r2
 8004d32:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d006      	beq.n	8004d4e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004d40:	4b19      	ldr	r3, [pc, #100]	@ (8004da8 <HAL_GPIO_Init+0x2d0>)
 8004d42:	685a      	ldr	r2, [r3, #4]
 8004d44:	4918      	ldr	r1, [pc, #96]	@ (8004da8 <HAL_GPIO_Init+0x2d0>)
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	604b      	str	r3, [r1, #4]
 8004d4c:	e006      	b.n	8004d5c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004d4e:	4b16      	ldr	r3, [pc, #88]	@ (8004da8 <HAL_GPIO_Init+0x2d0>)
 8004d50:	685a      	ldr	r2, [r3, #4]
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	43db      	mvns	r3, r3
 8004d56:	4914      	ldr	r1, [pc, #80]	@ (8004da8 <HAL_GPIO_Init+0x2d0>)
 8004d58:	4013      	ands	r3, r2
 8004d5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d021      	beq.n	8004dac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004d68:	4b0f      	ldr	r3, [pc, #60]	@ (8004da8 <HAL_GPIO_Init+0x2d0>)
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	490e      	ldr	r1, [pc, #56]	@ (8004da8 <HAL_GPIO_Init+0x2d0>)
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	600b      	str	r3, [r1, #0]
 8004d74:	e021      	b.n	8004dba <HAL_GPIO_Init+0x2e2>
 8004d76:	bf00      	nop
 8004d78:	10320000 	.word	0x10320000
 8004d7c:	10310000 	.word	0x10310000
 8004d80:	10220000 	.word	0x10220000
 8004d84:	10210000 	.word	0x10210000
 8004d88:	10120000 	.word	0x10120000
 8004d8c:	10110000 	.word	0x10110000
 8004d90:	40021000 	.word	0x40021000
 8004d94:	40010000 	.word	0x40010000
 8004d98:	40010800 	.word	0x40010800
 8004d9c:	40010c00 	.word	0x40010c00
 8004da0:	40011000 	.word	0x40011000
 8004da4:	40011400 	.word	0x40011400
 8004da8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004dac:	4b0b      	ldr	r3, [pc, #44]	@ (8004ddc <HAL_GPIO_Init+0x304>)
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	43db      	mvns	r3, r3
 8004db4:	4909      	ldr	r1, [pc, #36]	@ (8004ddc <HAL_GPIO_Init+0x304>)
 8004db6:	4013      	ands	r3, r2
 8004db8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	f47f ae8e 	bne.w	8004aec <HAL_GPIO_Init+0x14>
  }
}
 8004dd0:	bf00      	nop
 8004dd2:	bf00      	nop
 8004dd4:	372c      	adds	r7, #44	@ 0x2c
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bc80      	pop	{r7}
 8004dda:	4770      	bx	lr
 8004ddc:	40010400 	.word	0x40010400

08004de0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b085      	sub	sp, #20
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	460b      	mov	r3, r1
 8004dea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	689a      	ldr	r2, [r3, #8]
 8004df0:	887b      	ldrh	r3, [r7, #2]
 8004df2:	4013      	ands	r3, r2
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d002      	beq.n	8004dfe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	73fb      	strb	r3, [r7, #15]
 8004dfc:	e001      	b.n	8004e02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3714      	adds	r7, #20
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bc80      	pop	{r7}
 8004e0c:	4770      	bx	lr

08004e0e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e0e:	b480      	push	{r7}
 8004e10:	b083      	sub	sp, #12
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
 8004e16:	460b      	mov	r3, r1
 8004e18:	807b      	strh	r3, [r7, #2]
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e1e:	787b      	ldrb	r3, [r7, #1]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d003      	beq.n	8004e2c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e24:	887a      	ldrh	r2, [r7, #2]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004e2a:	e003      	b.n	8004e34 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004e2c:	887b      	ldrh	r3, [r7, #2]
 8004e2e:	041a      	lsls	r2, r3, #16
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	611a      	str	r2, [r3, #16]
}
 8004e34:	bf00      	nop
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bc80      	pop	{r7}
 8004e3c:	4770      	bx	lr

08004e3e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004e3e:	b480      	push	{r7}
 8004e40:	b085      	sub	sp, #20
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
 8004e46:	460b      	mov	r3, r1
 8004e48:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004e50:	887a      	ldrh	r2, [r7, #2]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	4013      	ands	r3, r2
 8004e56:	041a      	lsls	r2, r3, #16
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	43d9      	mvns	r1, r3
 8004e5c:	887b      	ldrh	r3, [r7, #2]
 8004e5e:	400b      	ands	r3, r1
 8004e60:	431a      	orrs	r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	611a      	str	r2, [r3, #16]
}
 8004e66:	bf00      	nop
 8004e68:	3714      	adds	r7, #20
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bc80      	pop	{r7}
 8004e6e:	4770      	bx	lr

08004e70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	4603      	mov	r3, r0
 8004e78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004e7a:	4b08      	ldr	r3, [pc, #32]	@ (8004e9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e7c:	695a      	ldr	r2, [r3, #20]
 8004e7e:	88fb      	ldrh	r3, [r7, #6]
 8004e80:	4013      	ands	r3, r2
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d006      	beq.n	8004e94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004e86:	4a05      	ldr	r2, [pc, #20]	@ (8004e9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e88:	88fb      	ldrh	r3, [r7, #6]
 8004e8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e8c:	88fb      	ldrh	r3, [r7, #6]
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f000 f806 	bl	8004ea0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004e94:	bf00      	nop
 8004e96:	3708      	adds	r7, #8
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	40010400 	.word	0x40010400

08004ea0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004eaa:	bf00      	nop
 8004eac:	370c      	adds	r7, #12
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bc80      	pop	{r7}
 8004eb2:	4770      	bx	lr

08004eb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b086      	sub	sp, #24
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d101      	bne.n	8004ec6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e272      	b.n	80053ac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0301 	and.w	r3, r3, #1
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	f000 8087 	beq.w	8004fe2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ed4:	4b92      	ldr	r3, [pc, #584]	@ (8005120 <HAL_RCC_OscConfig+0x26c>)
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	f003 030c 	and.w	r3, r3, #12
 8004edc:	2b04      	cmp	r3, #4
 8004ede:	d00c      	beq.n	8004efa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004ee0:	4b8f      	ldr	r3, [pc, #572]	@ (8005120 <HAL_RCC_OscConfig+0x26c>)
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	f003 030c 	and.w	r3, r3, #12
 8004ee8:	2b08      	cmp	r3, #8
 8004eea:	d112      	bne.n	8004f12 <HAL_RCC_OscConfig+0x5e>
 8004eec:	4b8c      	ldr	r3, [pc, #560]	@ (8005120 <HAL_RCC_OscConfig+0x26c>)
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ef4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ef8:	d10b      	bne.n	8004f12 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004efa:	4b89      	ldr	r3, [pc, #548]	@ (8005120 <HAL_RCC_OscConfig+0x26c>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d06c      	beq.n	8004fe0 <HAL_RCC_OscConfig+0x12c>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d168      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e24c      	b.n	80053ac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f1a:	d106      	bne.n	8004f2a <HAL_RCC_OscConfig+0x76>
 8004f1c:	4b80      	ldr	r3, [pc, #512]	@ (8005120 <HAL_RCC_OscConfig+0x26c>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a7f      	ldr	r2, [pc, #508]	@ (8005120 <HAL_RCC_OscConfig+0x26c>)
 8004f22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f26:	6013      	str	r3, [r2, #0]
 8004f28:	e02e      	b.n	8004f88 <HAL_RCC_OscConfig+0xd4>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d10c      	bne.n	8004f4c <HAL_RCC_OscConfig+0x98>
 8004f32:	4b7b      	ldr	r3, [pc, #492]	@ (8005120 <HAL_RCC_OscConfig+0x26c>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a7a      	ldr	r2, [pc, #488]	@ (8005120 <HAL_RCC_OscConfig+0x26c>)
 8004f38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f3c:	6013      	str	r3, [r2, #0]
 8004f3e:	4b78      	ldr	r3, [pc, #480]	@ (8005120 <HAL_RCC_OscConfig+0x26c>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a77      	ldr	r2, [pc, #476]	@ (8005120 <HAL_RCC_OscConfig+0x26c>)
 8004f44:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f48:	6013      	str	r3, [r2, #0]
 8004f4a:	e01d      	b.n	8004f88 <HAL_RCC_OscConfig+0xd4>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f54:	d10c      	bne.n	8004f70 <HAL_RCC_OscConfig+0xbc>
 8004f56:	4b72      	ldr	r3, [pc, #456]	@ (8005120 <HAL_RCC_OscConfig+0x26c>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a71      	ldr	r2, [pc, #452]	@ (8005120 <HAL_RCC_OscConfig+0x26c>)
 8004f5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f60:	6013      	str	r3, [r2, #0]
 8004f62:	4b6f      	ldr	r3, [pc, #444]	@ (8005120 <HAL_RCC_OscConfig+0x26c>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a6e      	ldr	r2, [pc, #440]	@ (8005120 <HAL_RCC_OscConfig+0x26c>)
 8004f68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f6c:	6013      	str	r3, [r2, #0]
 8004f6e:	e00b      	b.n	8004f88 <HAL_RCC_OscConfig+0xd4>
 8004f70:	4b6b      	ldr	r3, [pc, #428]	@ (8005120 <HAL_RCC_OscConfig+0x26c>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a6a      	ldr	r2, [pc, #424]	@ (8005120 <HAL_RCC_OscConfig+0x26c>)
 8004f76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f7a:	6013      	str	r3, [r2, #0]
 8004f7c:	4b68      	ldr	r3, [pc, #416]	@ (8005120 <HAL_RCC_OscConfig+0x26c>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a67      	ldr	r2, [pc, #412]	@ (8005120 <HAL_RCC_OscConfig+0x26c>)
 8004f82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f86:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d013      	beq.n	8004fb8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f90:	f7ff fc66 	bl	8004860 <HAL_GetTick>
 8004f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f96:	e008      	b.n	8004faa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f98:	f7ff fc62 	bl	8004860 <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	2b64      	cmp	r3, #100	@ 0x64
 8004fa4:	d901      	bls.n	8004faa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e200      	b.n	80053ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004faa:	4b5d      	ldr	r3, [pc, #372]	@ (8005120 <HAL_RCC_OscConfig+0x26c>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d0f0      	beq.n	8004f98 <HAL_RCC_OscConfig+0xe4>
 8004fb6:	e014      	b.n	8004fe2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fb8:	f7ff fc52 	bl	8004860 <HAL_GetTick>
 8004fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fbe:	e008      	b.n	8004fd2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fc0:	f7ff fc4e 	bl	8004860 <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	2b64      	cmp	r3, #100	@ 0x64
 8004fcc:	d901      	bls.n	8004fd2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e1ec      	b.n	80053ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fd2:	4b53      	ldr	r3, [pc, #332]	@ (8005120 <HAL_RCC_OscConfig+0x26c>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1f0      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x10c>
 8004fde:	e000      	b.n	8004fe2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fe0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d063      	beq.n	80050b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004fee:	4b4c      	ldr	r3, [pc, #304]	@ (8005120 <HAL_RCC_OscConfig+0x26c>)
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f003 030c 	and.w	r3, r3, #12
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00b      	beq.n	8005012 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004ffa:	4b49      	ldr	r3, [pc, #292]	@ (8005120 <HAL_RCC_OscConfig+0x26c>)
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	f003 030c 	and.w	r3, r3, #12
 8005002:	2b08      	cmp	r3, #8
 8005004:	d11c      	bne.n	8005040 <HAL_RCC_OscConfig+0x18c>
 8005006:	4b46      	ldr	r3, [pc, #280]	@ (8005120 <HAL_RCC_OscConfig+0x26c>)
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d116      	bne.n	8005040 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005012:	4b43      	ldr	r3, [pc, #268]	@ (8005120 <HAL_RCC_OscConfig+0x26c>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0302 	and.w	r3, r3, #2
 800501a:	2b00      	cmp	r3, #0
 800501c:	d005      	beq.n	800502a <HAL_RCC_OscConfig+0x176>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	2b01      	cmp	r3, #1
 8005024:	d001      	beq.n	800502a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e1c0      	b.n	80053ac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800502a:	4b3d      	ldr	r3, [pc, #244]	@ (8005120 <HAL_RCC_OscConfig+0x26c>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	00db      	lsls	r3, r3, #3
 8005038:	4939      	ldr	r1, [pc, #228]	@ (8005120 <HAL_RCC_OscConfig+0x26c>)
 800503a:	4313      	orrs	r3, r2
 800503c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800503e:	e03a      	b.n	80050b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d020      	beq.n	800508a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005048:	4b36      	ldr	r3, [pc, #216]	@ (8005124 <HAL_RCC_OscConfig+0x270>)
 800504a:	2201      	movs	r2, #1
 800504c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800504e:	f7ff fc07 	bl	8004860 <HAL_GetTick>
 8005052:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005054:	e008      	b.n	8005068 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005056:	f7ff fc03 	bl	8004860 <HAL_GetTick>
 800505a:	4602      	mov	r2, r0
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	2b02      	cmp	r3, #2
 8005062:	d901      	bls.n	8005068 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005064:	2303      	movs	r3, #3
 8005066:	e1a1      	b.n	80053ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005068:	4b2d      	ldr	r3, [pc, #180]	@ (8005120 <HAL_RCC_OscConfig+0x26c>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0302 	and.w	r3, r3, #2
 8005070:	2b00      	cmp	r3, #0
 8005072:	d0f0      	beq.n	8005056 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005074:	4b2a      	ldr	r3, [pc, #168]	@ (8005120 <HAL_RCC_OscConfig+0x26c>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	695b      	ldr	r3, [r3, #20]
 8005080:	00db      	lsls	r3, r3, #3
 8005082:	4927      	ldr	r1, [pc, #156]	@ (8005120 <HAL_RCC_OscConfig+0x26c>)
 8005084:	4313      	orrs	r3, r2
 8005086:	600b      	str	r3, [r1, #0]
 8005088:	e015      	b.n	80050b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800508a:	4b26      	ldr	r3, [pc, #152]	@ (8005124 <HAL_RCC_OscConfig+0x270>)
 800508c:	2200      	movs	r2, #0
 800508e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005090:	f7ff fbe6 	bl	8004860 <HAL_GetTick>
 8005094:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005096:	e008      	b.n	80050aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005098:	f7ff fbe2 	bl	8004860 <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d901      	bls.n	80050aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e180      	b.n	80053ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050aa:	4b1d      	ldr	r3, [pc, #116]	@ (8005120 <HAL_RCC_OscConfig+0x26c>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0302 	and.w	r3, r3, #2
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1f0      	bne.n	8005098 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0308 	and.w	r3, r3, #8
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d03a      	beq.n	8005138 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	699b      	ldr	r3, [r3, #24]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d019      	beq.n	80050fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050ca:	4b17      	ldr	r3, [pc, #92]	@ (8005128 <HAL_RCC_OscConfig+0x274>)
 80050cc:	2201      	movs	r2, #1
 80050ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050d0:	f7ff fbc6 	bl	8004860 <HAL_GetTick>
 80050d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050d6:	e008      	b.n	80050ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050d8:	f7ff fbc2 	bl	8004860 <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d901      	bls.n	80050ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e160      	b.n	80053ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005120 <HAL_RCC_OscConfig+0x26c>)
 80050ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ee:	f003 0302 	and.w	r3, r3, #2
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d0f0      	beq.n	80050d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80050f6:	2001      	movs	r0, #1
 80050f8:	f000 face 	bl	8005698 <RCC_Delay>
 80050fc:	e01c      	b.n	8005138 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050fe:	4b0a      	ldr	r3, [pc, #40]	@ (8005128 <HAL_RCC_OscConfig+0x274>)
 8005100:	2200      	movs	r2, #0
 8005102:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005104:	f7ff fbac 	bl	8004860 <HAL_GetTick>
 8005108:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800510a:	e00f      	b.n	800512c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800510c:	f7ff fba8 	bl	8004860 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	2b02      	cmp	r3, #2
 8005118:	d908      	bls.n	800512c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e146      	b.n	80053ac <HAL_RCC_OscConfig+0x4f8>
 800511e:	bf00      	nop
 8005120:	40021000 	.word	0x40021000
 8005124:	42420000 	.word	0x42420000
 8005128:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800512c:	4b92      	ldr	r3, [pc, #584]	@ (8005378 <HAL_RCC_OscConfig+0x4c4>)
 800512e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005130:	f003 0302 	and.w	r3, r3, #2
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1e9      	bne.n	800510c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0304 	and.w	r3, r3, #4
 8005140:	2b00      	cmp	r3, #0
 8005142:	f000 80a6 	beq.w	8005292 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005146:	2300      	movs	r3, #0
 8005148:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800514a:	4b8b      	ldr	r3, [pc, #556]	@ (8005378 <HAL_RCC_OscConfig+0x4c4>)
 800514c:	69db      	ldr	r3, [r3, #28]
 800514e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d10d      	bne.n	8005172 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005156:	4b88      	ldr	r3, [pc, #544]	@ (8005378 <HAL_RCC_OscConfig+0x4c4>)
 8005158:	69db      	ldr	r3, [r3, #28]
 800515a:	4a87      	ldr	r2, [pc, #540]	@ (8005378 <HAL_RCC_OscConfig+0x4c4>)
 800515c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005160:	61d3      	str	r3, [r2, #28]
 8005162:	4b85      	ldr	r3, [pc, #532]	@ (8005378 <HAL_RCC_OscConfig+0x4c4>)
 8005164:	69db      	ldr	r3, [r3, #28]
 8005166:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800516a:	60bb      	str	r3, [r7, #8]
 800516c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800516e:	2301      	movs	r3, #1
 8005170:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005172:	4b82      	ldr	r3, [pc, #520]	@ (800537c <HAL_RCC_OscConfig+0x4c8>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800517a:	2b00      	cmp	r3, #0
 800517c:	d118      	bne.n	80051b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800517e:	4b7f      	ldr	r3, [pc, #508]	@ (800537c <HAL_RCC_OscConfig+0x4c8>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a7e      	ldr	r2, [pc, #504]	@ (800537c <HAL_RCC_OscConfig+0x4c8>)
 8005184:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005188:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800518a:	f7ff fb69 	bl	8004860 <HAL_GetTick>
 800518e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005190:	e008      	b.n	80051a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005192:	f7ff fb65 	bl	8004860 <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	2b64      	cmp	r3, #100	@ 0x64
 800519e:	d901      	bls.n	80051a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e103      	b.n	80053ac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051a4:	4b75      	ldr	r3, [pc, #468]	@ (800537c <HAL_RCC_OscConfig+0x4c8>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d0f0      	beq.n	8005192 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d106      	bne.n	80051c6 <HAL_RCC_OscConfig+0x312>
 80051b8:	4b6f      	ldr	r3, [pc, #444]	@ (8005378 <HAL_RCC_OscConfig+0x4c4>)
 80051ba:	6a1b      	ldr	r3, [r3, #32]
 80051bc:	4a6e      	ldr	r2, [pc, #440]	@ (8005378 <HAL_RCC_OscConfig+0x4c4>)
 80051be:	f043 0301 	orr.w	r3, r3, #1
 80051c2:	6213      	str	r3, [r2, #32]
 80051c4:	e02d      	b.n	8005222 <HAL_RCC_OscConfig+0x36e>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d10c      	bne.n	80051e8 <HAL_RCC_OscConfig+0x334>
 80051ce:	4b6a      	ldr	r3, [pc, #424]	@ (8005378 <HAL_RCC_OscConfig+0x4c4>)
 80051d0:	6a1b      	ldr	r3, [r3, #32]
 80051d2:	4a69      	ldr	r2, [pc, #420]	@ (8005378 <HAL_RCC_OscConfig+0x4c4>)
 80051d4:	f023 0301 	bic.w	r3, r3, #1
 80051d8:	6213      	str	r3, [r2, #32]
 80051da:	4b67      	ldr	r3, [pc, #412]	@ (8005378 <HAL_RCC_OscConfig+0x4c4>)
 80051dc:	6a1b      	ldr	r3, [r3, #32]
 80051de:	4a66      	ldr	r2, [pc, #408]	@ (8005378 <HAL_RCC_OscConfig+0x4c4>)
 80051e0:	f023 0304 	bic.w	r3, r3, #4
 80051e4:	6213      	str	r3, [r2, #32]
 80051e6:	e01c      	b.n	8005222 <HAL_RCC_OscConfig+0x36e>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	2b05      	cmp	r3, #5
 80051ee:	d10c      	bne.n	800520a <HAL_RCC_OscConfig+0x356>
 80051f0:	4b61      	ldr	r3, [pc, #388]	@ (8005378 <HAL_RCC_OscConfig+0x4c4>)
 80051f2:	6a1b      	ldr	r3, [r3, #32]
 80051f4:	4a60      	ldr	r2, [pc, #384]	@ (8005378 <HAL_RCC_OscConfig+0x4c4>)
 80051f6:	f043 0304 	orr.w	r3, r3, #4
 80051fa:	6213      	str	r3, [r2, #32]
 80051fc:	4b5e      	ldr	r3, [pc, #376]	@ (8005378 <HAL_RCC_OscConfig+0x4c4>)
 80051fe:	6a1b      	ldr	r3, [r3, #32]
 8005200:	4a5d      	ldr	r2, [pc, #372]	@ (8005378 <HAL_RCC_OscConfig+0x4c4>)
 8005202:	f043 0301 	orr.w	r3, r3, #1
 8005206:	6213      	str	r3, [r2, #32]
 8005208:	e00b      	b.n	8005222 <HAL_RCC_OscConfig+0x36e>
 800520a:	4b5b      	ldr	r3, [pc, #364]	@ (8005378 <HAL_RCC_OscConfig+0x4c4>)
 800520c:	6a1b      	ldr	r3, [r3, #32]
 800520e:	4a5a      	ldr	r2, [pc, #360]	@ (8005378 <HAL_RCC_OscConfig+0x4c4>)
 8005210:	f023 0301 	bic.w	r3, r3, #1
 8005214:	6213      	str	r3, [r2, #32]
 8005216:	4b58      	ldr	r3, [pc, #352]	@ (8005378 <HAL_RCC_OscConfig+0x4c4>)
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	4a57      	ldr	r2, [pc, #348]	@ (8005378 <HAL_RCC_OscConfig+0x4c4>)
 800521c:	f023 0304 	bic.w	r3, r3, #4
 8005220:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d015      	beq.n	8005256 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800522a:	f7ff fb19 	bl	8004860 <HAL_GetTick>
 800522e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005230:	e00a      	b.n	8005248 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005232:	f7ff fb15 	bl	8004860 <HAL_GetTick>
 8005236:	4602      	mov	r2, r0
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005240:	4293      	cmp	r3, r2
 8005242:	d901      	bls.n	8005248 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	e0b1      	b.n	80053ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005248:	4b4b      	ldr	r3, [pc, #300]	@ (8005378 <HAL_RCC_OscConfig+0x4c4>)
 800524a:	6a1b      	ldr	r3, [r3, #32]
 800524c:	f003 0302 	and.w	r3, r3, #2
 8005250:	2b00      	cmp	r3, #0
 8005252:	d0ee      	beq.n	8005232 <HAL_RCC_OscConfig+0x37e>
 8005254:	e014      	b.n	8005280 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005256:	f7ff fb03 	bl	8004860 <HAL_GetTick>
 800525a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800525c:	e00a      	b.n	8005274 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800525e:	f7ff faff 	bl	8004860 <HAL_GetTick>
 8005262:	4602      	mov	r2, r0
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	f241 3288 	movw	r2, #5000	@ 0x1388
 800526c:	4293      	cmp	r3, r2
 800526e:	d901      	bls.n	8005274 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	e09b      	b.n	80053ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005274:	4b40      	ldr	r3, [pc, #256]	@ (8005378 <HAL_RCC_OscConfig+0x4c4>)
 8005276:	6a1b      	ldr	r3, [r3, #32]
 8005278:	f003 0302 	and.w	r3, r3, #2
 800527c:	2b00      	cmp	r3, #0
 800527e:	d1ee      	bne.n	800525e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005280:	7dfb      	ldrb	r3, [r7, #23]
 8005282:	2b01      	cmp	r3, #1
 8005284:	d105      	bne.n	8005292 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005286:	4b3c      	ldr	r3, [pc, #240]	@ (8005378 <HAL_RCC_OscConfig+0x4c4>)
 8005288:	69db      	ldr	r3, [r3, #28]
 800528a:	4a3b      	ldr	r2, [pc, #236]	@ (8005378 <HAL_RCC_OscConfig+0x4c4>)
 800528c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005290:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	69db      	ldr	r3, [r3, #28]
 8005296:	2b00      	cmp	r3, #0
 8005298:	f000 8087 	beq.w	80053aa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800529c:	4b36      	ldr	r3, [pc, #216]	@ (8005378 <HAL_RCC_OscConfig+0x4c4>)
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f003 030c 	and.w	r3, r3, #12
 80052a4:	2b08      	cmp	r3, #8
 80052a6:	d061      	beq.n	800536c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	69db      	ldr	r3, [r3, #28]
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	d146      	bne.n	800533e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052b0:	4b33      	ldr	r3, [pc, #204]	@ (8005380 <HAL_RCC_OscConfig+0x4cc>)
 80052b2:	2200      	movs	r2, #0
 80052b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052b6:	f7ff fad3 	bl	8004860 <HAL_GetTick>
 80052ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052bc:	e008      	b.n	80052d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052be:	f7ff facf 	bl	8004860 <HAL_GetTick>
 80052c2:	4602      	mov	r2, r0
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	d901      	bls.n	80052d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80052cc:	2303      	movs	r3, #3
 80052ce:	e06d      	b.n	80053ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052d0:	4b29      	ldr	r3, [pc, #164]	@ (8005378 <HAL_RCC_OscConfig+0x4c4>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1f0      	bne.n	80052be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6a1b      	ldr	r3, [r3, #32]
 80052e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052e4:	d108      	bne.n	80052f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80052e6:	4b24      	ldr	r3, [pc, #144]	@ (8005378 <HAL_RCC_OscConfig+0x4c4>)
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	4921      	ldr	r1, [pc, #132]	@ (8005378 <HAL_RCC_OscConfig+0x4c4>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052f8:	4b1f      	ldr	r3, [pc, #124]	@ (8005378 <HAL_RCC_OscConfig+0x4c4>)
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a19      	ldr	r1, [r3, #32]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005308:	430b      	orrs	r3, r1
 800530a:	491b      	ldr	r1, [pc, #108]	@ (8005378 <HAL_RCC_OscConfig+0x4c4>)
 800530c:	4313      	orrs	r3, r2
 800530e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005310:	4b1b      	ldr	r3, [pc, #108]	@ (8005380 <HAL_RCC_OscConfig+0x4cc>)
 8005312:	2201      	movs	r2, #1
 8005314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005316:	f7ff faa3 	bl	8004860 <HAL_GetTick>
 800531a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800531c:	e008      	b.n	8005330 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800531e:	f7ff fa9f 	bl	8004860 <HAL_GetTick>
 8005322:	4602      	mov	r2, r0
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	1ad3      	subs	r3, r2, r3
 8005328:	2b02      	cmp	r3, #2
 800532a:	d901      	bls.n	8005330 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800532c:	2303      	movs	r3, #3
 800532e:	e03d      	b.n	80053ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005330:	4b11      	ldr	r3, [pc, #68]	@ (8005378 <HAL_RCC_OscConfig+0x4c4>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005338:	2b00      	cmp	r3, #0
 800533a:	d0f0      	beq.n	800531e <HAL_RCC_OscConfig+0x46a>
 800533c:	e035      	b.n	80053aa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800533e:	4b10      	ldr	r3, [pc, #64]	@ (8005380 <HAL_RCC_OscConfig+0x4cc>)
 8005340:	2200      	movs	r2, #0
 8005342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005344:	f7ff fa8c 	bl	8004860 <HAL_GetTick>
 8005348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800534a:	e008      	b.n	800535e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800534c:	f7ff fa88 	bl	8004860 <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	2b02      	cmp	r3, #2
 8005358:	d901      	bls.n	800535e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e026      	b.n	80053ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800535e:	4b06      	ldr	r3, [pc, #24]	@ (8005378 <HAL_RCC_OscConfig+0x4c4>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d1f0      	bne.n	800534c <HAL_RCC_OscConfig+0x498>
 800536a:	e01e      	b.n	80053aa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	69db      	ldr	r3, [r3, #28]
 8005370:	2b01      	cmp	r3, #1
 8005372:	d107      	bne.n	8005384 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e019      	b.n	80053ac <HAL_RCC_OscConfig+0x4f8>
 8005378:	40021000 	.word	0x40021000
 800537c:	40007000 	.word	0x40007000
 8005380:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005384:	4b0b      	ldr	r3, [pc, #44]	@ (80053b4 <HAL_RCC_OscConfig+0x500>)
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a1b      	ldr	r3, [r3, #32]
 8005394:	429a      	cmp	r2, r3
 8005396:	d106      	bne.n	80053a6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d001      	beq.n	80053aa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e000      	b.n	80053ac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3718      	adds	r7, #24
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	40021000 	.word	0x40021000

080053b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d101      	bne.n	80053cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e0d0      	b.n	800556e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80053cc:	4b6a      	ldr	r3, [pc, #424]	@ (8005578 <HAL_RCC_ClockConfig+0x1c0>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0307 	and.w	r3, r3, #7
 80053d4:	683a      	ldr	r2, [r7, #0]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d910      	bls.n	80053fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053da:	4b67      	ldr	r3, [pc, #412]	@ (8005578 <HAL_RCC_ClockConfig+0x1c0>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f023 0207 	bic.w	r2, r3, #7
 80053e2:	4965      	ldr	r1, [pc, #404]	@ (8005578 <HAL_RCC_ClockConfig+0x1c0>)
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053ea:	4b63      	ldr	r3, [pc, #396]	@ (8005578 <HAL_RCC_ClockConfig+0x1c0>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0307 	and.w	r3, r3, #7
 80053f2:	683a      	ldr	r2, [r7, #0]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d001      	beq.n	80053fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e0b8      	b.n	800556e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0302 	and.w	r3, r3, #2
 8005404:	2b00      	cmp	r3, #0
 8005406:	d020      	beq.n	800544a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0304 	and.w	r3, r3, #4
 8005410:	2b00      	cmp	r3, #0
 8005412:	d005      	beq.n	8005420 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005414:	4b59      	ldr	r3, [pc, #356]	@ (800557c <HAL_RCC_ClockConfig+0x1c4>)
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	4a58      	ldr	r2, [pc, #352]	@ (800557c <HAL_RCC_ClockConfig+0x1c4>)
 800541a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800541e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0308 	and.w	r3, r3, #8
 8005428:	2b00      	cmp	r3, #0
 800542a:	d005      	beq.n	8005438 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800542c:	4b53      	ldr	r3, [pc, #332]	@ (800557c <HAL_RCC_ClockConfig+0x1c4>)
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	4a52      	ldr	r2, [pc, #328]	@ (800557c <HAL_RCC_ClockConfig+0x1c4>)
 8005432:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005436:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005438:	4b50      	ldr	r3, [pc, #320]	@ (800557c <HAL_RCC_ClockConfig+0x1c4>)
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	494d      	ldr	r1, [pc, #308]	@ (800557c <HAL_RCC_ClockConfig+0x1c4>)
 8005446:	4313      	orrs	r3, r2
 8005448:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	2b00      	cmp	r3, #0
 8005454:	d040      	beq.n	80054d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	2b01      	cmp	r3, #1
 800545c:	d107      	bne.n	800546e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800545e:	4b47      	ldr	r3, [pc, #284]	@ (800557c <HAL_RCC_ClockConfig+0x1c4>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d115      	bne.n	8005496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e07f      	b.n	800556e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	2b02      	cmp	r3, #2
 8005474:	d107      	bne.n	8005486 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005476:	4b41      	ldr	r3, [pc, #260]	@ (800557c <HAL_RCC_ClockConfig+0x1c4>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800547e:	2b00      	cmp	r3, #0
 8005480:	d109      	bne.n	8005496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e073      	b.n	800556e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005486:	4b3d      	ldr	r3, [pc, #244]	@ (800557c <HAL_RCC_ClockConfig+0x1c4>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0302 	and.w	r3, r3, #2
 800548e:	2b00      	cmp	r3, #0
 8005490:	d101      	bne.n	8005496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e06b      	b.n	800556e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005496:	4b39      	ldr	r3, [pc, #228]	@ (800557c <HAL_RCC_ClockConfig+0x1c4>)
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f023 0203 	bic.w	r2, r3, #3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	4936      	ldr	r1, [pc, #216]	@ (800557c <HAL_RCC_ClockConfig+0x1c4>)
 80054a4:	4313      	orrs	r3, r2
 80054a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80054a8:	f7ff f9da 	bl	8004860 <HAL_GetTick>
 80054ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054ae:	e00a      	b.n	80054c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054b0:	f7ff f9d6 	bl	8004860 <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054be:	4293      	cmp	r3, r2
 80054c0:	d901      	bls.n	80054c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e053      	b.n	800556e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054c6:	4b2d      	ldr	r3, [pc, #180]	@ (800557c <HAL_RCC_ClockConfig+0x1c4>)
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	f003 020c 	and.w	r2, r3, #12
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d1eb      	bne.n	80054b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054d8:	4b27      	ldr	r3, [pc, #156]	@ (8005578 <HAL_RCC_ClockConfig+0x1c0>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0307 	and.w	r3, r3, #7
 80054e0:	683a      	ldr	r2, [r7, #0]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d210      	bcs.n	8005508 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054e6:	4b24      	ldr	r3, [pc, #144]	@ (8005578 <HAL_RCC_ClockConfig+0x1c0>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f023 0207 	bic.w	r2, r3, #7
 80054ee:	4922      	ldr	r1, [pc, #136]	@ (8005578 <HAL_RCC_ClockConfig+0x1c0>)
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054f6:	4b20      	ldr	r3, [pc, #128]	@ (8005578 <HAL_RCC_ClockConfig+0x1c0>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0307 	and.w	r3, r3, #7
 80054fe:	683a      	ldr	r2, [r7, #0]
 8005500:	429a      	cmp	r2, r3
 8005502:	d001      	beq.n	8005508 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e032      	b.n	800556e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 0304 	and.w	r3, r3, #4
 8005510:	2b00      	cmp	r3, #0
 8005512:	d008      	beq.n	8005526 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005514:	4b19      	ldr	r3, [pc, #100]	@ (800557c <HAL_RCC_ClockConfig+0x1c4>)
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	4916      	ldr	r1, [pc, #88]	@ (800557c <HAL_RCC_ClockConfig+0x1c4>)
 8005522:	4313      	orrs	r3, r2
 8005524:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0308 	and.w	r3, r3, #8
 800552e:	2b00      	cmp	r3, #0
 8005530:	d009      	beq.n	8005546 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005532:	4b12      	ldr	r3, [pc, #72]	@ (800557c <HAL_RCC_ClockConfig+0x1c4>)
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	00db      	lsls	r3, r3, #3
 8005540:	490e      	ldr	r1, [pc, #56]	@ (800557c <HAL_RCC_ClockConfig+0x1c4>)
 8005542:	4313      	orrs	r3, r2
 8005544:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005546:	f000 f821 	bl	800558c <HAL_RCC_GetSysClockFreq>
 800554a:	4602      	mov	r2, r0
 800554c:	4b0b      	ldr	r3, [pc, #44]	@ (800557c <HAL_RCC_ClockConfig+0x1c4>)
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	091b      	lsrs	r3, r3, #4
 8005552:	f003 030f 	and.w	r3, r3, #15
 8005556:	490a      	ldr	r1, [pc, #40]	@ (8005580 <HAL_RCC_ClockConfig+0x1c8>)
 8005558:	5ccb      	ldrb	r3, [r1, r3]
 800555a:	fa22 f303 	lsr.w	r3, r2, r3
 800555e:	4a09      	ldr	r2, [pc, #36]	@ (8005584 <HAL_RCC_ClockConfig+0x1cc>)
 8005560:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005562:	4b09      	ldr	r3, [pc, #36]	@ (8005588 <HAL_RCC_ClockConfig+0x1d0>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4618      	mov	r0, r3
 8005568:	f7ff f938 	bl	80047dc <HAL_InitTick>

  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3710      	adds	r7, #16
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	40022000 	.word	0x40022000
 800557c:	40021000 	.word	0x40021000
 8005580:	08007f7c 	.word	0x08007f7c
 8005584:	20000164 	.word	0x20000164
 8005588:	20000168 	.word	0x20000168

0800558c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800558c:	b480      	push	{r7}
 800558e:	b087      	sub	sp, #28
 8005590:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005592:	2300      	movs	r3, #0
 8005594:	60fb      	str	r3, [r7, #12]
 8005596:	2300      	movs	r3, #0
 8005598:	60bb      	str	r3, [r7, #8]
 800559a:	2300      	movs	r3, #0
 800559c:	617b      	str	r3, [r7, #20]
 800559e:	2300      	movs	r3, #0
 80055a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80055a2:	2300      	movs	r3, #0
 80055a4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80055a6:	4b1e      	ldr	r3, [pc, #120]	@ (8005620 <HAL_RCC_GetSysClockFreq+0x94>)
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f003 030c 	and.w	r3, r3, #12
 80055b2:	2b04      	cmp	r3, #4
 80055b4:	d002      	beq.n	80055bc <HAL_RCC_GetSysClockFreq+0x30>
 80055b6:	2b08      	cmp	r3, #8
 80055b8:	d003      	beq.n	80055c2 <HAL_RCC_GetSysClockFreq+0x36>
 80055ba:	e027      	b.n	800560c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80055bc:	4b19      	ldr	r3, [pc, #100]	@ (8005624 <HAL_RCC_GetSysClockFreq+0x98>)
 80055be:	613b      	str	r3, [r7, #16]
      break;
 80055c0:	e027      	b.n	8005612 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	0c9b      	lsrs	r3, r3, #18
 80055c6:	f003 030f 	and.w	r3, r3, #15
 80055ca:	4a17      	ldr	r2, [pc, #92]	@ (8005628 <HAL_RCC_GetSysClockFreq+0x9c>)
 80055cc:	5cd3      	ldrb	r3, [r2, r3]
 80055ce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d010      	beq.n	80055fc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80055da:	4b11      	ldr	r3, [pc, #68]	@ (8005620 <HAL_RCC_GetSysClockFreq+0x94>)
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	0c5b      	lsrs	r3, r3, #17
 80055e0:	f003 0301 	and.w	r3, r3, #1
 80055e4:	4a11      	ldr	r2, [pc, #68]	@ (800562c <HAL_RCC_GetSysClockFreq+0xa0>)
 80055e6:	5cd3      	ldrb	r3, [r2, r3]
 80055e8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a0d      	ldr	r2, [pc, #52]	@ (8005624 <HAL_RCC_GetSysClockFreq+0x98>)
 80055ee:	fb03 f202 	mul.w	r2, r3, r2
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055f8:	617b      	str	r3, [r7, #20]
 80055fa:	e004      	b.n	8005606 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a0c      	ldr	r2, [pc, #48]	@ (8005630 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005600:	fb02 f303 	mul.w	r3, r2, r3
 8005604:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	613b      	str	r3, [r7, #16]
      break;
 800560a:	e002      	b.n	8005612 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800560c:	4b05      	ldr	r3, [pc, #20]	@ (8005624 <HAL_RCC_GetSysClockFreq+0x98>)
 800560e:	613b      	str	r3, [r7, #16]
      break;
 8005610:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005612:	693b      	ldr	r3, [r7, #16]
}
 8005614:	4618      	mov	r0, r3
 8005616:	371c      	adds	r7, #28
 8005618:	46bd      	mov	sp, r7
 800561a:	bc80      	pop	{r7}
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	40021000 	.word	0x40021000
 8005624:	007a1200 	.word	0x007a1200
 8005628:	08007f94 	.word	0x08007f94
 800562c:	08007fa4 	.word	0x08007fa4
 8005630:	003d0900 	.word	0x003d0900

08005634 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005634:	b480      	push	{r7}
 8005636:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005638:	4b02      	ldr	r3, [pc, #8]	@ (8005644 <HAL_RCC_GetHCLKFreq+0x10>)
 800563a:	681b      	ldr	r3, [r3, #0]
}
 800563c:	4618      	mov	r0, r3
 800563e:	46bd      	mov	sp, r7
 8005640:	bc80      	pop	{r7}
 8005642:	4770      	bx	lr
 8005644:	20000164 	.word	0x20000164

08005648 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800564c:	f7ff fff2 	bl	8005634 <HAL_RCC_GetHCLKFreq>
 8005650:	4602      	mov	r2, r0
 8005652:	4b05      	ldr	r3, [pc, #20]	@ (8005668 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	0a1b      	lsrs	r3, r3, #8
 8005658:	f003 0307 	and.w	r3, r3, #7
 800565c:	4903      	ldr	r1, [pc, #12]	@ (800566c <HAL_RCC_GetPCLK1Freq+0x24>)
 800565e:	5ccb      	ldrb	r3, [r1, r3]
 8005660:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005664:	4618      	mov	r0, r3
 8005666:	bd80      	pop	{r7, pc}
 8005668:	40021000 	.word	0x40021000
 800566c:	08007f8c 	.word	0x08007f8c

08005670 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005674:	f7ff ffde 	bl	8005634 <HAL_RCC_GetHCLKFreq>
 8005678:	4602      	mov	r2, r0
 800567a:	4b05      	ldr	r3, [pc, #20]	@ (8005690 <HAL_RCC_GetPCLK2Freq+0x20>)
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	0adb      	lsrs	r3, r3, #11
 8005680:	f003 0307 	and.w	r3, r3, #7
 8005684:	4903      	ldr	r1, [pc, #12]	@ (8005694 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005686:	5ccb      	ldrb	r3, [r1, r3]
 8005688:	fa22 f303 	lsr.w	r3, r2, r3
}
 800568c:	4618      	mov	r0, r3
 800568e:	bd80      	pop	{r7, pc}
 8005690:	40021000 	.word	0x40021000
 8005694:	08007f8c 	.word	0x08007f8c

08005698 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005698:	b480      	push	{r7}
 800569a:	b085      	sub	sp, #20
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80056a0:	4b0a      	ldr	r3, [pc, #40]	@ (80056cc <RCC_Delay+0x34>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a0a      	ldr	r2, [pc, #40]	@ (80056d0 <RCC_Delay+0x38>)
 80056a6:	fba2 2303 	umull	r2, r3, r2, r3
 80056aa:	0a5b      	lsrs	r3, r3, #9
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	fb02 f303 	mul.w	r3, r2, r3
 80056b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80056b4:	bf00      	nop
  }
  while (Delay --);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	1e5a      	subs	r2, r3, #1
 80056ba:	60fa      	str	r2, [r7, #12]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d1f9      	bne.n	80056b4 <RCC_Delay+0x1c>
}
 80056c0:	bf00      	nop
 80056c2:	bf00      	nop
 80056c4:	3714      	adds	r7, #20
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bc80      	pop	{r7}
 80056ca:	4770      	bx	lr
 80056cc:	20000164 	.word	0x20000164
 80056d0:	10624dd3 	.word	0x10624dd3

080056d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d101      	bne.n	80056e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e041      	b.n	800576a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d106      	bne.n	8005700 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f7fe fefc 	bl	80044f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2202      	movs	r2, #2
 8005704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	3304      	adds	r3, #4
 8005710:	4619      	mov	r1, r3
 8005712:	4610      	mov	r0, r2
 8005714:	f000 fb16 	bl	8005d44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3708      	adds	r7, #8
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}

08005772 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005772:	b580      	push	{r7, lr}
 8005774:	b082      	sub	sp, #8
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d101      	bne.n	8005784 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e041      	b.n	8005808 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800578a:	b2db      	uxtb	r3, r3
 800578c:	2b00      	cmp	r3, #0
 800578e:	d106      	bne.n	800579e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 f839 	bl	8005810 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2202      	movs	r2, #2
 80057a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	3304      	adds	r3, #4
 80057ae:	4619      	mov	r1, r3
 80057b0:	4610      	mov	r0, r2
 80057b2:	f000 fac7 	bl	8005d44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2201      	movs	r2, #1
 80057ba:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2201      	movs	r2, #1
 80057c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2201      	movs	r2, #1
 80057ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2201      	movs	r2, #1
 80057d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2201      	movs	r2, #1
 80057da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2201      	movs	r2, #1
 80057e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2201      	movs	r2, #1
 80057ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2201      	movs	r2, #1
 80057f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2201      	movs	r2, #1
 80057fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2201      	movs	r2, #1
 8005802:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	3708      	adds	r7, #8
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005818:	bf00      	nop
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	bc80      	pop	{r7}
 8005820:	4770      	bx	lr
	...

08005824 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d109      	bne.n	8005848 <HAL_TIM_PWM_Start+0x24>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800583a:	b2db      	uxtb	r3, r3
 800583c:	2b01      	cmp	r3, #1
 800583e:	bf14      	ite	ne
 8005840:	2301      	movne	r3, #1
 8005842:	2300      	moveq	r3, #0
 8005844:	b2db      	uxtb	r3, r3
 8005846:	e022      	b.n	800588e <HAL_TIM_PWM_Start+0x6a>
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	2b04      	cmp	r3, #4
 800584c:	d109      	bne.n	8005862 <HAL_TIM_PWM_Start+0x3e>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005854:	b2db      	uxtb	r3, r3
 8005856:	2b01      	cmp	r3, #1
 8005858:	bf14      	ite	ne
 800585a:	2301      	movne	r3, #1
 800585c:	2300      	moveq	r3, #0
 800585e:	b2db      	uxtb	r3, r3
 8005860:	e015      	b.n	800588e <HAL_TIM_PWM_Start+0x6a>
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	2b08      	cmp	r3, #8
 8005866:	d109      	bne.n	800587c <HAL_TIM_PWM_Start+0x58>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800586e:	b2db      	uxtb	r3, r3
 8005870:	2b01      	cmp	r3, #1
 8005872:	bf14      	ite	ne
 8005874:	2301      	movne	r3, #1
 8005876:	2300      	moveq	r3, #0
 8005878:	b2db      	uxtb	r3, r3
 800587a:	e008      	b.n	800588e <HAL_TIM_PWM_Start+0x6a>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005882:	b2db      	uxtb	r3, r3
 8005884:	2b01      	cmp	r3, #1
 8005886:	bf14      	ite	ne
 8005888:	2301      	movne	r3, #1
 800588a:	2300      	moveq	r3, #0
 800588c:	b2db      	uxtb	r3, r3
 800588e:	2b00      	cmp	r3, #0
 8005890:	d001      	beq.n	8005896 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e05e      	b.n	8005954 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d104      	bne.n	80058a6 <HAL_TIM_PWM_Start+0x82>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2202      	movs	r2, #2
 80058a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058a4:	e013      	b.n	80058ce <HAL_TIM_PWM_Start+0xaa>
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	2b04      	cmp	r3, #4
 80058aa:	d104      	bne.n	80058b6 <HAL_TIM_PWM_Start+0x92>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2202      	movs	r2, #2
 80058b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058b4:	e00b      	b.n	80058ce <HAL_TIM_PWM_Start+0xaa>
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	2b08      	cmp	r3, #8
 80058ba:	d104      	bne.n	80058c6 <HAL_TIM_PWM_Start+0xa2>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2202      	movs	r2, #2
 80058c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058c4:	e003      	b.n	80058ce <HAL_TIM_PWM_Start+0xaa>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2202      	movs	r2, #2
 80058ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2201      	movs	r2, #1
 80058d4:	6839      	ldr	r1, [r7, #0]
 80058d6:	4618      	mov	r0, r3
 80058d8:	f000 fcc0 	bl	800625c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a1e      	ldr	r2, [pc, #120]	@ (800595c <HAL_TIM_PWM_Start+0x138>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d107      	bne.n	80058f6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80058f4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a18      	ldr	r2, [pc, #96]	@ (800595c <HAL_TIM_PWM_Start+0x138>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d00e      	beq.n	800591e <HAL_TIM_PWM_Start+0xfa>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005908:	d009      	beq.n	800591e <HAL_TIM_PWM_Start+0xfa>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a14      	ldr	r2, [pc, #80]	@ (8005960 <HAL_TIM_PWM_Start+0x13c>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d004      	beq.n	800591e <HAL_TIM_PWM_Start+0xfa>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a12      	ldr	r2, [pc, #72]	@ (8005964 <HAL_TIM_PWM_Start+0x140>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d111      	bne.n	8005942 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	f003 0307 	and.w	r3, r3, #7
 8005928:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2b06      	cmp	r3, #6
 800592e:	d010      	beq.n	8005952 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f042 0201 	orr.w	r2, r2, #1
 800593e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005940:	e007      	b.n	8005952 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f042 0201 	orr.w	r2, r2, #1
 8005950:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005952:	2300      	movs	r3, #0
}
 8005954:	4618      	mov	r0, r3
 8005956:	3710      	adds	r7, #16
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}
 800595c:	40012c00 	.word	0x40012c00
 8005960:	40000400 	.word	0x40000400
 8005964:	40000800 	.word	0x40000800

08005968 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2200      	movs	r2, #0
 8005978:	6839      	ldr	r1, [r7, #0]
 800597a:	4618      	mov	r0, r3
 800597c:	f000 fc6e 	bl	800625c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a29      	ldr	r2, [pc, #164]	@ (8005a2c <HAL_TIM_PWM_Stop+0xc4>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d117      	bne.n	80059ba <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	6a1a      	ldr	r2, [r3, #32]
 8005990:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005994:	4013      	ands	r3, r2
 8005996:	2b00      	cmp	r3, #0
 8005998:	d10f      	bne.n	80059ba <HAL_TIM_PWM_Stop+0x52>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	6a1a      	ldr	r2, [r3, #32]
 80059a0:	f240 4344 	movw	r3, #1092	@ 0x444
 80059a4:	4013      	ands	r3, r2
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d107      	bne.n	80059ba <HAL_TIM_PWM_Stop+0x52>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80059b8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	6a1a      	ldr	r2, [r3, #32]
 80059c0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80059c4:	4013      	ands	r3, r2
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d10f      	bne.n	80059ea <HAL_TIM_PWM_Stop+0x82>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	6a1a      	ldr	r2, [r3, #32]
 80059d0:	f240 4344 	movw	r3, #1092	@ 0x444
 80059d4:	4013      	ands	r3, r2
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d107      	bne.n	80059ea <HAL_TIM_PWM_Stop+0x82>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f022 0201 	bic.w	r2, r2, #1
 80059e8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d104      	bne.n	80059fa <HAL_TIM_PWM_Stop+0x92>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80059f8:	e013      	b.n	8005a22 <HAL_TIM_PWM_Stop+0xba>
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	2b04      	cmp	r3, #4
 80059fe:	d104      	bne.n	8005a0a <HAL_TIM_PWM_Stop+0xa2>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a08:	e00b      	b.n	8005a22 <HAL_TIM_PWM_Stop+0xba>
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	2b08      	cmp	r3, #8
 8005a0e:	d104      	bne.n	8005a1a <HAL_TIM_PWM_Stop+0xb2>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a18:	e003      	b.n	8005a22 <HAL_TIM_PWM_Stop+0xba>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3708      	adds	r7, #8
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	40012c00 	.word	0x40012c00

08005a30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b086      	sub	sp, #24
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d101      	bne.n	8005a4e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a4a:	2302      	movs	r3, #2
 8005a4c:	e0ae      	b.n	8005bac <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2201      	movs	r2, #1
 8005a52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2b0c      	cmp	r3, #12
 8005a5a:	f200 809f 	bhi.w	8005b9c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005a5e:	a201      	add	r2, pc, #4	@ (adr r2, 8005a64 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a64:	08005a99 	.word	0x08005a99
 8005a68:	08005b9d 	.word	0x08005b9d
 8005a6c:	08005b9d 	.word	0x08005b9d
 8005a70:	08005b9d 	.word	0x08005b9d
 8005a74:	08005ad9 	.word	0x08005ad9
 8005a78:	08005b9d 	.word	0x08005b9d
 8005a7c:	08005b9d 	.word	0x08005b9d
 8005a80:	08005b9d 	.word	0x08005b9d
 8005a84:	08005b1b 	.word	0x08005b1b
 8005a88:	08005b9d 	.word	0x08005b9d
 8005a8c:	08005b9d 	.word	0x08005b9d
 8005a90:	08005b9d 	.word	0x08005b9d
 8005a94:	08005b5b 	.word	0x08005b5b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	68b9      	ldr	r1, [r7, #8]
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f000 f9be 	bl	8005e20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	699a      	ldr	r2, [r3, #24]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f042 0208 	orr.w	r2, r2, #8
 8005ab2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	699a      	ldr	r2, [r3, #24]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f022 0204 	bic.w	r2, r2, #4
 8005ac2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	6999      	ldr	r1, [r3, #24]
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	691a      	ldr	r2, [r3, #16]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	430a      	orrs	r2, r1
 8005ad4:	619a      	str	r2, [r3, #24]
      break;
 8005ad6:	e064      	b.n	8005ba2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68b9      	ldr	r1, [r7, #8]
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f000 fa04 	bl	8005eec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	699a      	ldr	r2, [r3, #24]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005af2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	699a      	ldr	r2, [r3, #24]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	6999      	ldr	r1, [r3, #24]
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	021a      	lsls	r2, r3, #8
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	430a      	orrs	r2, r1
 8005b16:	619a      	str	r2, [r3, #24]
      break;
 8005b18:	e043      	b.n	8005ba2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68b9      	ldr	r1, [r7, #8]
 8005b20:	4618      	mov	r0, r3
 8005b22:	f000 fa4d 	bl	8005fc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	69da      	ldr	r2, [r3, #28]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f042 0208 	orr.w	r2, r2, #8
 8005b34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	69da      	ldr	r2, [r3, #28]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f022 0204 	bic.w	r2, r2, #4
 8005b44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	69d9      	ldr	r1, [r3, #28]
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	691a      	ldr	r2, [r3, #16]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	430a      	orrs	r2, r1
 8005b56:	61da      	str	r2, [r3, #28]
      break;
 8005b58:	e023      	b.n	8005ba2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	68b9      	ldr	r1, [r7, #8]
 8005b60:	4618      	mov	r0, r3
 8005b62:	f000 fa97 	bl	8006094 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	69da      	ldr	r2, [r3, #28]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	69da      	ldr	r2, [r3, #28]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	69d9      	ldr	r1, [r3, #28]
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	021a      	lsls	r2, r3, #8
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	430a      	orrs	r2, r1
 8005b98:	61da      	str	r2, [r3, #28]
      break;
 8005b9a:	e002      	b.n	8005ba2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	75fb      	strb	r3, [r7, #23]
      break;
 8005ba0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005baa:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3718      	adds	r7, #24
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d101      	bne.n	8005bd0 <HAL_TIM_ConfigClockSource+0x1c>
 8005bcc:	2302      	movs	r3, #2
 8005bce:	e0b4      	b.n	8005d3a <HAL_TIM_ConfigClockSource+0x186>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2202      	movs	r2, #2
 8005bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005bee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005bf6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68ba      	ldr	r2, [r7, #8]
 8005bfe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c08:	d03e      	beq.n	8005c88 <HAL_TIM_ConfigClockSource+0xd4>
 8005c0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c0e:	f200 8087 	bhi.w	8005d20 <HAL_TIM_ConfigClockSource+0x16c>
 8005c12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c16:	f000 8086 	beq.w	8005d26 <HAL_TIM_ConfigClockSource+0x172>
 8005c1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c1e:	d87f      	bhi.n	8005d20 <HAL_TIM_ConfigClockSource+0x16c>
 8005c20:	2b70      	cmp	r3, #112	@ 0x70
 8005c22:	d01a      	beq.n	8005c5a <HAL_TIM_ConfigClockSource+0xa6>
 8005c24:	2b70      	cmp	r3, #112	@ 0x70
 8005c26:	d87b      	bhi.n	8005d20 <HAL_TIM_ConfigClockSource+0x16c>
 8005c28:	2b60      	cmp	r3, #96	@ 0x60
 8005c2a:	d050      	beq.n	8005cce <HAL_TIM_ConfigClockSource+0x11a>
 8005c2c:	2b60      	cmp	r3, #96	@ 0x60
 8005c2e:	d877      	bhi.n	8005d20 <HAL_TIM_ConfigClockSource+0x16c>
 8005c30:	2b50      	cmp	r3, #80	@ 0x50
 8005c32:	d03c      	beq.n	8005cae <HAL_TIM_ConfigClockSource+0xfa>
 8005c34:	2b50      	cmp	r3, #80	@ 0x50
 8005c36:	d873      	bhi.n	8005d20 <HAL_TIM_ConfigClockSource+0x16c>
 8005c38:	2b40      	cmp	r3, #64	@ 0x40
 8005c3a:	d058      	beq.n	8005cee <HAL_TIM_ConfigClockSource+0x13a>
 8005c3c:	2b40      	cmp	r3, #64	@ 0x40
 8005c3e:	d86f      	bhi.n	8005d20 <HAL_TIM_ConfigClockSource+0x16c>
 8005c40:	2b30      	cmp	r3, #48	@ 0x30
 8005c42:	d064      	beq.n	8005d0e <HAL_TIM_ConfigClockSource+0x15a>
 8005c44:	2b30      	cmp	r3, #48	@ 0x30
 8005c46:	d86b      	bhi.n	8005d20 <HAL_TIM_ConfigClockSource+0x16c>
 8005c48:	2b20      	cmp	r3, #32
 8005c4a:	d060      	beq.n	8005d0e <HAL_TIM_ConfigClockSource+0x15a>
 8005c4c:	2b20      	cmp	r3, #32
 8005c4e:	d867      	bhi.n	8005d20 <HAL_TIM_ConfigClockSource+0x16c>
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d05c      	beq.n	8005d0e <HAL_TIM_ConfigClockSource+0x15a>
 8005c54:	2b10      	cmp	r3, #16
 8005c56:	d05a      	beq.n	8005d0e <HAL_TIM_ConfigClockSource+0x15a>
 8005c58:	e062      	b.n	8005d20 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c6a:	f000 fad8 	bl	800621e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005c7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68ba      	ldr	r2, [r7, #8]
 8005c84:	609a      	str	r2, [r3, #8]
      break;
 8005c86:	e04f      	b.n	8005d28 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c98:	f000 fac1 	bl	800621e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	689a      	ldr	r2, [r3, #8]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005caa:	609a      	str	r2, [r3, #8]
      break;
 8005cac:	e03c      	b.n	8005d28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cba:	461a      	mov	r2, r3
 8005cbc:	f000 fa38 	bl	8006130 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2150      	movs	r1, #80	@ 0x50
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f000 fa8f 	bl	80061ea <TIM_ITRx_SetConfig>
      break;
 8005ccc:	e02c      	b.n	8005d28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cda:	461a      	mov	r2, r3
 8005cdc:	f000 fa56 	bl	800618c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2160      	movs	r1, #96	@ 0x60
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f000 fa7f 	bl	80061ea <TIM_ITRx_SetConfig>
      break;
 8005cec:	e01c      	b.n	8005d28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	f000 fa18 	bl	8006130 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2140      	movs	r1, #64	@ 0x40
 8005d06:	4618      	mov	r0, r3
 8005d08:	f000 fa6f 	bl	80061ea <TIM_ITRx_SetConfig>
      break;
 8005d0c:	e00c      	b.n	8005d28 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4619      	mov	r1, r3
 8005d18:	4610      	mov	r0, r2
 8005d1a:	f000 fa66 	bl	80061ea <TIM_ITRx_SetConfig>
      break;
 8005d1e:	e003      	b.n	8005d28 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	73fb      	strb	r3, [r7, #15]
      break;
 8005d24:	e000      	b.n	8005d28 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005d26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3710      	adds	r7, #16
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
	...

08005d44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a2f      	ldr	r2, [pc, #188]	@ (8005e14 <TIM_Base_SetConfig+0xd0>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d00b      	beq.n	8005d74 <TIM_Base_SetConfig+0x30>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d62:	d007      	beq.n	8005d74 <TIM_Base_SetConfig+0x30>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a2c      	ldr	r2, [pc, #176]	@ (8005e18 <TIM_Base_SetConfig+0xd4>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d003      	beq.n	8005d74 <TIM_Base_SetConfig+0x30>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a2b      	ldr	r2, [pc, #172]	@ (8005e1c <TIM_Base_SetConfig+0xd8>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d108      	bne.n	8005d86 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a22      	ldr	r2, [pc, #136]	@ (8005e14 <TIM_Base_SetConfig+0xd0>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d00b      	beq.n	8005da6 <TIM_Base_SetConfig+0x62>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d94:	d007      	beq.n	8005da6 <TIM_Base_SetConfig+0x62>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a1f      	ldr	r2, [pc, #124]	@ (8005e18 <TIM_Base_SetConfig+0xd4>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d003      	beq.n	8005da6 <TIM_Base_SetConfig+0x62>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a1e      	ldr	r2, [pc, #120]	@ (8005e1c <TIM_Base_SetConfig+0xd8>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d108      	bne.n	8005db8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	695b      	ldr	r3, [r3, #20]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	689a      	ldr	r2, [r3, #8]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4a0d      	ldr	r2, [pc, #52]	@ (8005e14 <TIM_Base_SetConfig+0xd0>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d103      	bne.n	8005dec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	691a      	ldr	r2, [r3, #16]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	f003 0301 	and.w	r3, r3, #1
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d005      	beq.n	8005e0a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	f023 0201 	bic.w	r2, r3, #1
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	611a      	str	r2, [r3, #16]
  }
}
 8005e0a:	bf00      	nop
 8005e0c:	3714      	adds	r7, #20
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bc80      	pop	{r7}
 8005e12:	4770      	bx	lr
 8005e14:	40012c00 	.word	0x40012c00
 8005e18:	40000400 	.word	0x40000400
 8005e1c:	40000800 	.word	0x40000800

08005e20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b087      	sub	sp, #28
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a1b      	ldr	r3, [r3, #32]
 8005e2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6a1b      	ldr	r3, [r3, #32]
 8005e34:	f023 0201 	bic.w	r2, r3, #1
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	699b      	ldr	r3, [r3, #24]
 8005e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f023 0303 	bic.w	r3, r3, #3
 8005e56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	f023 0302 	bic.w	r3, r3, #2
 8005e68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	697a      	ldr	r2, [r7, #20]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a1c      	ldr	r2, [pc, #112]	@ (8005ee8 <TIM_OC1_SetConfig+0xc8>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d10c      	bne.n	8005e96 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	f023 0308 	bic.w	r3, r3, #8
 8005e82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	697a      	ldr	r2, [r7, #20]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	f023 0304 	bic.w	r3, r3, #4
 8005e94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a13      	ldr	r2, [pc, #76]	@ (8005ee8 <TIM_OC1_SetConfig+0xc8>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d111      	bne.n	8005ec2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ea4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005eac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	695b      	ldr	r3, [r3, #20]
 8005eb2:	693a      	ldr	r2, [r7, #16]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	699b      	ldr	r3, [r3, #24]
 8005ebc:	693a      	ldr	r2, [r7, #16]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	685a      	ldr	r2, [r3, #4]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	697a      	ldr	r2, [r7, #20]
 8005eda:	621a      	str	r2, [r3, #32]
}
 8005edc:	bf00      	nop
 8005ede:	371c      	adds	r7, #28
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bc80      	pop	{r7}
 8005ee4:	4770      	bx	lr
 8005ee6:	bf00      	nop
 8005ee8:	40012c00 	.word	0x40012c00

08005eec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b087      	sub	sp, #28
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a1b      	ldr	r3, [r3, #32]
 8005efa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6a1b      	ldr	r3, [r3, #32]
 8005f00:	f023 0210 	bic.w	r2, r3, #16
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	699b      	ldr	r3, [r3, #24]
 8005f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	021b      	lsls	r3, r3, #8
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	f023 0320 	bic.w	r3, r3, #32
 8005f36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	011b      	lsls	r3, r3, #4
 8005f3e:	697a      	ldr	r2, [r7, #20]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a1d      	ldr	r2, [pc, #116]	@ (8005fbc <TIM_OC2_SetConfig+0xd0>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d10d      	bne.n	8005f68 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	011b      	lsls	r3, r3, #4
 8005f5a:	697a      	ldr	r2, [r7, #20]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a14      	ldr	r2, [pc, #80]	@ (8005fbc <TIM_OC2_SetConfig+0xd0>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d113      	bne.n	8005f98 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005f76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005f7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	695b      	ldr	r3, [r3, #20]
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	693a      	ldr	r2, [r7, #16]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	699b      	ldr	r3, [r3, #24]
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	693a      	ldr	r2, [r7, #16]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	693a      	ldr	r2, [r7, #16]
 8005f9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	685a      	ldr	r2, [r3, #4]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	697a      	ldr	r2, [r7, #20]
 8005fb0:	621a      	str	r2, [r3, #32]
}
 8005fb2:	bf00      	nop
 8005fb4:	371c      	adds	r7, #28
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bc80      	pop	{r7}
 8005fba:	4770      	bx	lr
 8005fbc:	40012c00 	.word	0x40012c00

08005fc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b087      	sub	sp, #28
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
 8005fce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6a1b      	ldr	r3, [r3, #32]
 8005fd4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	69db      	ldr	r3, [r3, #28]
 8005fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f023 0303 	bic.w	r3, r3, #3
 8005ff6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006008:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	021b      	lsls	r3, r3, #8
 8006010:	697a      	ldr	r2, [r7, #20]
 8006012:	4313      	orrs	r3, r2
 8006014:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a1d      	ldr	r2, [pc, #116]	@ (8006090 <TIM_OC3_SetConfig+0xd0>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d10d      	bne.n	800603a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006024:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	021b      	lsls	r3, r3, #8
 800602c:	697a      	ldr	r2, [r7, #20]
 800602e:	4313      	orrs	r3, r2
 8006030:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006038:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a14      	ldr	r2, [pc, #80]	@ (8006090 <TIM_OC3_SetConfig+0xd0>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d113      	bne.n	800606a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006048:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006050:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	695b      	ldr	r3, [r3, #20]
 8006056:	011b      	lsls	r3, r3, #4
 8006058:	693a      	ldr	r2, [r7, #16]
 800605a:	4313      	orrs	r3, r2
 800605c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	011b      	lsls	r3, r3, #4
 8006064:	693a      	ldr	r2, [r7, #16]
 8006066:	4313      	orrs	r3, r2
 8006068:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	693a      	ldr	r2, [r7, #16]
 800606e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	685a      	ldr	r2, [r3, #4]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	697a      	ldr	r2, [r7, #20]
 8006082:	621a      	str	r2, [r3, #32]
}
 8006084:	bf00      	nop
 8006086:	371c      	adds	r7, #28
 8006088:	46bd      	mov	sp, r7
 800608a:	bc80      	pop	{r7}
 800608c:	4770      	bx	lr
 800608e:	bf00      	nop
 8006090:	40012c00 	.word	0x40012c00

08006094 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006094:	b480      	push	{r7}
 8006096:	b087      	sub	sp, #28
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a1b      	ldr	r3, [r3, #32]
 80060a2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6a1b      	ldr	r3, [r3, #32]
 80060a8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	69db      	ldr	r3, [r3, #28]
 80060ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	021b      	lsls	r3, r3, #8
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80060de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	031b      	lsls	r3, r3, #12
 80060e6:	693a      	ldr	r2, [r7, #16]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a0f      	ldr	r2, [pc, #60]	@ (800612c <TIM_OC4_SetConfig+0x98>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d109      	bne.n	8006108 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80060fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	695b      	ldr	r3, [r3, #20]
 8006100:	019b      	lsls	r3, r3, #6
 8006102:	697a      	ldr	r2, [r7, #20]
 8006104:	4313      	orrs	r3, r2
 8006106:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	697a      	ldr	r2, [r7, #20]
 800610c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	685a      	ldr	r2, [r3, #4]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	693a      	ldr	r2, [r7, #16]
 8006120:	621a      	str	r2, [r3, #32]
}
 8006122:	bf00      	nop
 8006124:	371c      	adds	r7, #28
 8006126:	46bd      	mov	sp, r7
 8006128:	bc80      	pop	{r7}
 800612a:	4770      	bx	lr
 800612c:	40012c00 	.word	0x40012c00

08006130 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006130:	b480      	push	{r7}
 8006132:	b087      	sub	sp, #28
 8006134:	af00      	add	r7, sp, #0
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6a1b      	ldr	r3, [r3, #32]
 8006140:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6a1b      	ldr	r3, [r3, #32]
 8006146:	f023 0201 	bic.w	r2, r3, #1
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	699b      	ldr	r3, [r3, #24]
 8006152:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800615a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	011b      	lsls	r3, r3, #4
 8006160:	693a      	ldr	r2, [r7, #16]
 8006162:	4313      	orrs	r3, r2
 8006164:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	f023 030a 	bic.w	r3, r3, #10
 800616c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800616e:	697a      	ldr	r2, [r7, #20]
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	4313      	orrs	r3, r2
 8006174:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	693a      	ldr	r2, [r7, #16]
 800617a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	697a      	ldr	r2, [r7, #20]
 8006180:	621a      	str	r2, [r3, #32]
}
 8006182:	bf00      	nop
 8006184:	371c      	adds	r7, #28
 8006186:	46bd      	mov	sp, r7
 8006188:	bc80      	pop	{r7}
 800618a:	4770      	bx	lr

0800618c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800618c:	b480      	push	{r7}
 800618e:	b087      	sub	sp, #28
 8006190:	af00      	add	r7, sp, #0
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6a1b      	ldr	r3, [r3, #32]
 800619c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6a1b      	ldr	r3, [r3, #32]
 80061a2:	f023 0210 	bic.w	r2, r3, #16
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	699b      	ldr	r3, [r3, #24]
 80061ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80061b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	031b      	lsls	r3, r3, #12
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	4313      	orrs	r3, r2
 80061c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80061c8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	011b      	lsls	r3, r3, #4
 80061ce:	697a      	ldr	r2, [r7, #20]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	693a      	ldr	r2, [r7, #16]
 80061d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	697a      	ldr	r2, [r7, #20]
 80061de:	621a      	str	r2, [r3, #32]
}
 80061e0:	bf00      	nop
 80061e2:	371c      	adds	r7, #28
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bc80      	pop	{r7}
 80061e8:	4770      	bx	lr

080061ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061ea:	b480      	push	{r7}
 80061ec:	b085      	sub	sp, #20
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
 80061f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006200:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006202:	683a      	ldr	r2, [r7, #0]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	4313      	orrs	r3, r2
 8006208:	f043 0307 	orr.w	r3, r3, #7
 800620c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	609a      	str	r2, [r3, #8]
}
 8006214:	bf00      	nop
 8006216:	3714      	adds	r7, #20
 8006218:	46bd      	mov	sp, r7
 800621a:	bc80      	pop	{r7}
 800621c:	4770      	bx	lr

0800621e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800621e:	b480      	push	{r7}
 8006220:	b087      	sub	sp, #28
 8006222:	af00      	add	r7, sp, #0
 8006224:	60f8      	str	r0, [r7, #12]
 8006226:	60b9      	str	r1, [r7, #8]
 8006228:	607a      	str	r2, [r7, #4]
 800622a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006238:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	021a      	lsls	r2, r3, #8
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	431a      	orrs	r2, r3
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	4313      	orrs	r3, r2
 8006246:	697a      	ldr	r2, [r7, #20]
 8006248:	4313      	orrs	r3, r2
 800624a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	609a      	str	r2, [r3, #8]
}
 8006252:	bf00      	nop
 8006254:	371c      	adds	r7, #28
 8006256:	46bd      	mov	sp, r7
 8006258:	bc80      	pop	{r7}
 800625a:	4770      	bx	lr

0800625c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800625c:	b480      	push	{r7}
 800625e:	b087      	sub	sp, #28
 8006260:	af00      	add	r7, sp, #0
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	f003 031f 	and.w	r3, r3, #31
 800626e:	2201      	movs	r2, #1
 8006270:	fa02 f303 	lsl.w	r3, r2, r3
 8006274:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6a1a      	ldr	r2, [r3, #32]
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	43db      	mvns	r3, r3
 800627e:	401a      	ands	r2, r3
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6a1a      	ldr	r2, [r3, #32]
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	f003 031f 	and.w	r3, r3, #31
 800628e:	6879      	ldr	r1, [r7, #4]
 8006290:	fa01 f303 	lsl.w	r3, r1, r3
 8006294:	431a      	orrs	r2, r3
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	621a      	str	r2, [r3, #32]
}
 800629a:	bf00      	nop
 800629c:	371c      	adds	r7, #28
 800629e:	46bd      	mov	sp, r7
 80062a0:	bc80      	pop	{r7}
 80062a2:	4770      	bx	lr

080062a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b085      	sub	sp, #20
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d101      	bne.n	80062bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062b8:	2302      	movs	r3, #2
 80062ba:	e046      	b.n	800634a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2202      	movs	r2, #2
 80062c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	68fa      	ldr	r2, [r7, #12]
 80062f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a16      	ldr	r2, [pc, #88]	@ (8006354 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d00e      	beq.n	800631e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006308:	d009      	beq.n	800631e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a12      	ldr	r2, [pc, #72]	@ (8006358 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d004      	beq.n	800631e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a10      	ldr	r2, [pc, #64]	@ (800635c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d10c      	bne.n	8006338 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006324:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	68ba      	ldr	r2, [r7, #8]
 800632c:	4313      	orrs	r3, r2
 800632e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	68ba      	ldr	r2, [r7, #8]
 8006336:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	3714      	adds	r7, #20
 800634e:	46bd      	mov	sp, r7
 8006350:	bc80      	pop	{r7}
 8006352:	4770      	bx	lr
 8006354:	40012c00 	.word	0x40012c00
 8006358:	40000400 	.word	0x40000400
 800635c:	40000800 	.word	0x40000800

08006360 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006360:	b480      	push	{r7}
 8006362:	b085      	sub	sp, #20
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800636a:	2300      	movs	r3, #0
 800636c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006374:	2b01      	cmp	r3, #1
 8006376:	d101      	bne.n	800637c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006378:	2302      	movs	r3, #2
 800637a:	e03d      	b.n	80063f8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	4313      	orrs	r3, r2
 8006390:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	4313      	orrs	r3, r2
 800639e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	695b      	ldr	r3, [r3, #20]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	69db      	ldr	r3, [r3, #28]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	68fa      	ldr	r2, [r7, #12]
 80063ec:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80063f6:	2300      	movs	r3, #0
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3714      	adds	r7, #20
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bc80      	pop	{r7}
 8006400:	4770      	bx	lr

08006402 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006402:	b580      	push	{r7, lr}
 8006404:	b082      	sub	sp, #8
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d101      	bne.n	8006414 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	e042      	b.n	800649a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800641a:	b2db      	uxtb	r3, r3
 800641c:	2b00      	cmp	r3, #0
 800641e:	d106      	bne.n	800642e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f7fe f8ed 	bl	8004608 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2224      	movs	r2, #36	@ 0x24
 8006432:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	68da      	ldr	r2, [r3, #12]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006444:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 f82c 	bl	80064a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	691a      	ldr	r2, [r3, #16]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800645a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	695a      	ldr	r2, [r3, #20]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800646a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	68da      	ldr	r2, [r3, #12]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800647a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2220      	movs	r2, #32
 8006486:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2220      	movs	r2, #32
 800648e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	3708      	adds	r7, #8
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
	...

080064a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b084      	sub	sp, #16
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	68da      	ldr	r2, [r3, #12]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	430a      	orrs	r2, r1
 80064c0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	689a      	ldr	r2, [r3, #8]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	431a      	orrs	r2, r3
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	695b      	ldr	r3, [r3, #20]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	68db      	ldr	r3, [r3, #12]
 80064da:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80064de:	f023 030c 	bic.w	r3, r3, #12
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	6812      	ldr	r2, [r2, #0]
 80064e6:	68b9      	ldr	r1, [r7, #8]
 80064e8:	430b      	orrs	r3, r1
 80064ea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	695b      	ldr	r3, [r3, #20]
 80064f2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	699a      	ldr	r2, [r3, #24]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	430a      	orrs	r2, r1
 8006500:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a2c      	ldr	r2, [pc, #176]	@ (80065b8 <UART_SetConfig+0x114>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d103      	bne.n	8006514 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800650c:	f7ff f8b0 	bl	8005670 <HAL_RCC_GetPCLK2Freq>
 8006510:	60f8      	str	r0, [r7, #12]
 8006512:	e002      	b.n	800651a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006514:	f7ff f898 	bl	8005648 <HAL_RCC_GetPCLK1Freq>
 8006518:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800651a:	68fa      	ldr	r2, [r7, #12]
 800651c:	4613      	mov	r3, r2
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	4413      	add	r3, r2
 8006522:	009a      	lsls	r2, r3, #2
 8006524:	441a      	add	r2, r3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006530:	4a22      	ldr	r2, [pc, #136]	@ (80065bc <UART_SetConfig+0x118>)
 8006532:	fba2 2303 	umull	r2, r3, r2, r3
 8006536:	095b      	lsrs	r3, r3, #5
 8006538:	0119      	lsls	r1, r3, #4
 800653a:	68fa      	ldr	r2, [r7, #12]
 800653c:	4613      	mov	r3, r2
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	4413      	add	r3, r2
 8006542:	009a      	lsls	r2, r3, #2
 8006544:	441a      	add	r2, r3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006550:	4b1a      	ldr	r3, [pc, #104]	@ (80065bc <UART_SetConfig+0x118>)
 8006552:	fba3 0302 	umull	r0, r3, r3, r2
 8006556:	095b      	lsrs	r3, r3, #5
 8006558:	2064      	movs	r0, #100	@ 0x64
 800655a:	fb00 f303 	mul.w	r3, r0, r3
 800655e:	1ad3      	subs	r3, r2, r3
 8006560:	011b      	lsls	r3, r3, #4
 8006562:	3332      	adds	r3, #50	@ 0x32
 8006564:	4a15      	ldr	r2, [pc, #84]	@ (80065bc <UART_SetConfig+0x118>)
 8006566:	fba2 2303 	umull	r2, r3, r2, r3
 800656a:	095b      	lsrs	r3, r3, #5
 800656c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006570:	4419      	add	r1, r3
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	4613      	mov	r3, r2
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	4413      	add	r3, r2
 800657a:	009a      	lsls	r2, r3, #2
 800657c:	441a      	add	r2, r3
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	fbb2 f2f3 	udiv	r2, r2, r3
 8006588:	4b0c      	ldr	r3, [pc, #48]	@ (80065bc <UART_SetConfig+0x118>)
 800658a:	fba3 0302 	umull	r0, r3, r3, r2
 800658e:	095b      	lsrs	r3, r3, #5
 8006590:	2064      	movs	r0, #100	@ 0x64
 8006592:	fb00 f303 	mul.w	r3, r0, r3
 8006596:	1ad3      	subs	r3, r2, r3
 8006598:	011b      	lsls	r3, r3, #4
 800659a:	3332      	adds	r3, #50	@ 0x32
 800659c:	4a07      	ldr	r2, [pc, #28]	@ (80065bc <UART_SetConfig+0x118>)
 800659e:	fba2 2303 	umull	r2, r3, r2, r3
 80065a2:	095b      	lsrs	r3, r3, #5
 80065a4:	f003 020f 	and.w	r2, r3, #15
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	440a      	add	r2, r1
 80065ae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80065b0:	bf00      	nop
 80065b2:	3710      	adds	r7, #16
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	40013800 	.word	0x40013800
 80065bc:	51eb851f 	.word	0x51eb851f

080065c0 <siprintf>:
 80065c0:	b40e      	push	{r1, r2, r3}
 80065c2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80065c6:	b510      	push	{r4, lr}
 80065c8:	2400      	movs	r4, #0
 80065ca:	b09d      	sub	sp, #116	@ 0x74
 80065cc:	ab1f      	add	r3, sp, #124	@ 0x7c
 80065ce:	9002      	str	r0, [sp, #8]
 80065d0:	9006      	str	r0, [sp, #24]
 80065d2:	9107      	str	r1, [sp, #28]
 80065d4:	9104      	str	r1, [sp, #16]
 80065d6:	4809      	ldr	r0, [pc, #36]	@ (80065fc <siprintf+0x3c>)
 80065d8:	4909      	ldr	r1, [pc, #36]	@ (8006600 <siprintf+0x40>)
 80065da:	f853 2b04 	ldr.w	r2, [r3], #4
 80065de:	9105      	str	r1, [sp, #20]
 80065e0:	6800      	ldr	r0, [r0, #0]
 80065e2:	a902      	add	r1, sp, #8
 80065e4:	9301      	str	r3, [sp, #4]
 80065e6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80065e8:	f000 f9a0 	bl	800692c <_svfiprintf_r>
 80065ec:	9b02      	ldr	r3, [sp, #8]
 80065ee:	701c      	strb	r4, [r3, #0]
 80065f0:	b01d      	add	sp, #116	@ 0x74
 80065f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065f6:	b003      	add	sp, #12
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop
 80065fc:	20000170 	.word	0x20000170
 8006600:	ffff0208 	.word	0xffff0208

08006604 <memset>:
 8006604:	4603      	mov	r3, r0
 8006606:	4402      	add	r2, r0
 8006608:	4293      	cmp	r3, r2
 800660a:	d100      	bne.n	800660e <memset+0xa>
 800660c:	4770      	bx	lr
 800660e:	f803 1b01 	strb.w	r1, [r3], #1
 8006612:	e7f9      	b.n	8006608 <memset+0x4>

08006614 <__errno>:
 8006614:	4b01      	ldr	r3, [pc, #4]	@ (800661c <__errno+0x8>)
 8006616:	6818      	ldr	r0, [r3, #0]
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop
 800661c:	20000170 	.word	0x20000170

08006620 <__libc_init_array>:
 8006620:	b570      	push	{r4, r5, r6, lr}
 8006622:	2600      	movs	r6, #0
 8006624:	4d0c      	ldr	r5, [pc, #48]	@ (8006658 <__libc_init_array+0x38>)
 8006626:	4c0d      	ldr	r4, [pc, #52]	@ (800665c <__libc_init_array+0x3c>)
 8006628:	1b64      	subs	r4, r4, r5
 800662a:	10a4      	asrs	r4, r4, #2
 800662c:	42a6      	cmp	r6, r4
 800662e:	d109      	bne.n	8006644 <__libc_init_array+0x24>
 8006630:	f001 fafe 	bl	8007c30 <_init>
 8006634:	2600      	movs	r6, #0
 8006636:	4d0a      	ldr	r5, [pc, #40]	@ (8006660 <__libc_init_array+0x40>)
 8006638:	4c0a      	ldr	r4, [pc, #40]	@ (8006664 <__libc_init_array+0x44>)
 800663a:	1b64      	subs	r4, r4, r5
 800663c:	10a4      	asrs	r4, r4, #2
 800663e:	42a6      	cmp	r6, r4
 8006640:	d105      	bne.n	800664e <__libc_init_array+0x2e>
 8006642:	bd70      	pop	{r4, r5, r6, pc}
 8006644:	f855 3b04 	ldr.w	r3, [r5], #4
 8006648:	4798      	blx	r3
 800664a:	3601      	adds	r6, #1
 800664c:	e7ee      	b.n	800662c <__libc_init_array+0xc>
 800664e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006652:	4798      	blx	r3
 8006654:	3601      	adds	r6, #1
 8006656:	e7f2      	b.n	800663e <__libc_init_array+0x1e>
 8006658:	080083b4 	.word	0x080083b4
 800665c:	080083b4 	.word	0x080083b4
 8006660:	080083b4 	.word	0x080083b4
 8006664:	080083b8 	.word	0x080083b8

08006668 <__retarget_lock_acquire_recursive>:
 8006668:	4770      	bx	lr

0800666a <__retarget_lock_release_recursive>:
 800666a:	4770      	bx	lr

0800666c <memcpy>:
 800666c:	440a      	add	r2, r1
 800666e:	4291      	cmp	r1, r2
 8006670:	f100 33ff 	add.w	r3, r0, #4294967295
 8006674:	d100      	bne.n	8006678 <memcpy+0xc>
 8006676:	4770      	bx	lr
 8006678:	b510      	push	{r4, lr}
 800667a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800667e:	4291      	cmp	r1, r2
 8006680:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006684:	d1f9      	bne.n	800667a <memcpy+0xe>
 8006686:	bd10      	pop	{r4, pc}

08006688 <_free_r>:
 8006688:	b538      	push	{r3, r4, r5, lr}
 800668a:	4605      	mov	r5, r0
 800668c:	2900      	cmp	r1, #0
 800668e:	d040      	beq.n	8006712 <_free_r+0x8a>
 8006690:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006694:	1f0c      	subs	r4, r1, #4
 8006696:	2b00      	cmp	r3, #0
 8006698:	bfb8      	it	lt
 800669a:	18e4      	addlt	r4, r4, r3
 800669c:	f000 f8de 	bl	800685c <__malloc_lock>
 80066a0:	4a1c      	ldr	r2, [pc, #112]	@ (8006714 <_free_r+0x8c>)
 80066a2:	6813      	ldr	r3, [r2, #0]
 80066a4:	b933      	cbnz	r3, 80066b4 <_free_r+0x2c>
 80066a6:	6063      	str	r3, [r4, #4]
 80066a8:	6014      	str	r4, [r2, #0]
 80066aa:	4628      	mov	r0, r5
 80066ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066b0:	f000 b8da 	b.w	8006868 <__malloc_unlock>
 80066b4:	42a3      	cmp	r3, r4
 80066b6:	d908      	bls.n	80066ca <_free_r+0x42>
 80066b8:	6820      	ldr	r0, [r4, #0]
 80066ba:	1821      	adds	r1, r4, r0
 80066bc:	428b      	cmp	r3, r1
 80066be:	bf01      	itttt	eq
 80066c0:	6819      	ldreq	r1, [r3, #0]
 80066c2:	685b      	ldreq	r3, [r3, #4]
 80066c4:	1809      	addeq	r1, r1, r0
 80066c6:	6021      	streq	r1, [r4, #0]
 80066c8:	e7ed      	b.n	80066a6 <_free_r+0x1e>
 80066ca:	461a      	mov	r2, r3
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	b10b      	cbz	r3, 80066d4 <_free_r+0x4c>
 80066d0:	42a3      	cmp	r3, r4
 80066d2:	d9fa      	bls.n	80066ca <_free_r+0x42>
 80066d4:	6811      	ldr	r1, [r2, #0]
 80066d6:	1850      	adds	r0, r2, r1
 80066d8:	42a0      	cmp	r0, r4
 80066da:	d10b      	bne.n	80066f4 <_free_r+0x6c>
 80066dc:	6820      	ldr	r0, [r4, #0]
 80066de:	4401      	add	r1, r0
 80066e0:	1850      	adds	r0, r2, r1
 80066e2:	4283      	cmp	r3, r0
 80066e4:	6011      	str	r1, [r2, #0]
 80066e6:	d1e0      	bne.n	80066aa <_free_r+0x22>
 80066e8:	6818      	ldr	r0, [r3, #0]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	4408      	add	r0, r1
 80066ee:	6010      	str	r0, [r2, #0]
 80066f0:	6053      	str	r3, [r2, #4]
 80066f2:	e7da      	b.n	80066aa <_free_r+0x22>
 80066f4:	d902      	bls.n	80066fc <_free_r+0x74>
 80066f6:	230c      	movs	r3, #12
 80066f8:	602b      	str	r3, [r5, #0]
 80066fa:	e7d6      	b.n	80066aa <_free_r+0x22>
 80066fc:	6820      	ldr	r0, [r4, #0]
 80066fe:	1821      	adds	r1, r4, r0
 8006700:	428b      	cmp	r3, r1
 8006702:	bf01      	itttt	eq
 8006704:	6819      	ldreq	r1, [r3, #0]
 8006706:	685b      	ldreq	r3, [r3, #4]
 8006708:	1809      	addeq	r1, r1, r0
 800670a:	6021      	streq	r1, [r4, #0]
 800670c:	6063      	str	r3, [r4, #4]
 800670e:	6054      	str	r4, [r2, #4]
 8006710:	e7cb      	b.n	80066aa <_free_r+0x22>
 8006712:	bd38      	pop	{r3, r4, r5, pc}
 8006714:	20000414 	.word	0x20000414

08006718 <sbrk_aligned>:
 8006718:	b570      	push	{r4, r5, r6, lr}
 800671a:	4e0f      	ldr	r6, [pc, #60]	@ (8006758 <sbrk_aligned+0x40>)
 800671c:	460c      	mov	r4, r1
 800671e:	6831      	ldr	r1, [r6, #0]
 8006720:	4605      	mov	r5, r0
 8006722:	b911      	cbnz	r1, 800672a <sbrk_aligned+0x12>
 8006724:	f000 fba8 	bl	8006e78 <_sbrk_r>
 8006728:	6030      	str	r0, [r6, #0]
 800672a:	4621      	mov	r1, r4
 800672c:	4628      	mov	r0, r5
 800672e:	f000 fba3 	bl	8006e78 <_sbrk_r>
 8006732:	1c43      	adds	r3, r0, #1
 8006734:	d103      	bne.n	800673e <sbrk_aligned+0x26>
 8006736:	f04f 34ff 	mov.w	r4, #4294967295
 800673a:	4620      	mov	r0, r4
 800673c:	bd70      	pop	{r4, r5, r6, pc}
 800673e:	1cc4      	adds	r4, r0, #3
 8006740:	f024 0403 	bic.w	r4, r4, #3
 8006744:	42a0      	cmp	r0, r4
 8006746:	d0f8      	beq.n	800673a <sbrk_aligned+0x22>
 8006748:	1a21      	subs	r1, r4, r0
 800674a:	4628      	mov	r0, r5
 800674c:	f000 fb94 	bl	8006e78 <_sbrk_r>
 8006750:	3001      	adds	r0, #1
 8006752:	d1f2      	bne.n	800673a <sbrk_aligned+0x22>
 8006754:	e7ef      	b.n	8006736 <sbrk_aligned+0x1e>
 8006756:	bf00      	nop
 8006758:	20000410 	.word	0x20000410

0800675c <_malloc_r>:
 800675c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006760:	1ccd      	adds	r5, r1, #3
 8006762:	f025 0503 	bic.w	r5, r5, #3
 8006766:	3508      	adds	r5, #8
 8006768:	2d0c      	cmp	r5, #12
 800676a:	bf38      	it	cc
 800676c:	250c      	movcc	r5, #12
 800676e:	2d00      	cmp	r5, #0
 8006770:	4606      	mov	r6, r0
 8006772:	db01      	blt.n	8006778 <_malloc_r+0x1c>
 8006774:	42a9      	cmp	r1, r5
 8006776:	d904      	bls.n	8006782 <_malloc_r+0x26>
 8006778:	230c      	movs	r3, #12
 800677a:	6033      	str	r3, [r6, #0]
 800677c:	2000      	movs	r0, #0
 800677e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006782:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006858 <_malloc_r+0xfc>
 8006786:	f000 f869 	bl	800685c <__malloc_lock>
 800678a:	f8d8 3000 	ldr.w	r3, [r8]
 800678e:	461c      	mov	r4, r3
 8006790:	bb44      	cbnz	r4, 80067e4 <_malloc_r+0x88>
 8006792:	4629      	mov	r1, r5
 8006794:	4630      	mov	r0, r6
 8006796:	f7ff ffbf 	bl	8006718 <sbrk_aligned>
 800679a:	1c43      	adds	r3, r0, #1
 800679c:	4604      	mov	r4, r0
 800679e:	d158      	bne.n	8006852 <_malloc_r+0xf6>
 80067a0:	f8d8 4000 	ldr.w	r4, [r8]
 80067a4:	4627      	mov	r7, r4
 80067a6:	2f00      	cmp	r7, #0
 80067a8:	d143      	bne.n	8006832 <_malloc_r+0xd6>
 80067aa:	2c00      	cmp	r4, #0
 80067ac:	d04b      	beq.n	8006846 <_malloc_r+0xea>
 80067ae:	6823      	ldr	r3, [r4, #0]
 80067b0:	4639      	mov	r1, r7
 80067b2:	4630      	mov	r0, r6
 80067b4:	eb04 0903 	add.w	r9, r4, r3
 80067b8:	f000 fb5e 	bl	8006e78 <_sbrk_r>
 80067bc:	4581      	cmp	r9, r0
 80067be:	d142      	bne.n	8006846 <_malloc_r+0xea>
 80067c0:	6821      	ldr	r1, [r4, #0]
 80067c2:	4630      	mov	r0, r6
 80067c4:	1a6d      	subs	r5, r5, r1
 80067c6:	4629      	mov	r1, r5
 80067c8:	f7ff ffa6 	bl	8006718 <sbrk_aligned>
 80067cc:	3001      	adds	r0, #1
 80067ce:	d03a      	beq.n	8006846 <_malloc_r+0xea>
 80067d0:	6823      	ldr	r3, [r4, #0]
 80067d2:	442b      	add	r3, r5
 80067d4:	6023      	str	r3, [r4, #0]
 80067d6:	f8d8 3000 	ldr.w	r3, [r8]
 80067da:	685a      	ldr	r2, [r3, #4]
 80067dc:	bb62      	cbnz	r2, 8006838 <_malloc_r+0xdc>
 80067de:	f8c8 7000 	str.w	r7, [r8]
 80067e2:	e00f      	b.n	8006804 <_malloc_r+0xa8>
 80067e4:	6822      	ldr	r2, [r4, #0]
 80067e6:	1b52      	subs	r2, r2, r5
 80067e8:	d420      	bmi.n	800682c <_malloc_r+0xd0>
 80067ea:	2a0b      	cmp	r2, #11
 80067ec:	d917      	bls.n	800681e <_malloc_r+0xc2>
 80067ee:	1961      	adds	r1, r4, r5
 80067f0:	42a3      	cmp	r3, r4
 80067f2:	6025      	str	r5, [r4, #0]
 80067f4:	bf18      	it	ne
 80067f6:	6059      	strne	r1, [r3, #4]
 80067f8:	6863      	ldr	r3, [r4, #4]
 80067fa:	bf08      	it	eq
 80067fc:	f8c8 1000 	streq.w	r1, [r8]
 8006800:	5162      	str	r2, [r4, r5]
 8006802:	604b      	str	r3, [r1, #4]
 8006804:	4630      	mov	r0, r6
 8006806:	f000 f82f 	bl	8006868 <__malloc_unlock>
 800680a:	f104 000b 	add.w	r0, r4, #11
 800680e:	1d23      	adds	r3, r4, #4
 8006810:	f020 0007 	bic.w	r0, r0, #7
 8006814:	1ac2      	subs	r2, r0, r3
 8006816:	bf1c      	itt	ne
 8006818:	1a1b      	subne	r3, r3, r0
 800681a:	50a3      	strne	r3, [r4, r2]
 800681c:	e7af      	b.n	800677e <_malloc_r+0x22>
 800681e:	6862      	ldr	r2, [r4, #4]
 8006820:	42a3      	cmp	r3, r4
 8006822:	bf0c      	ite	eq
 8006824:	f8c8 2000 	streq.w	r2, [r8]
 8006828:	605a      	strne	r2, [r3, #4]
 800682a:	e7eb      	b.n	8006804 <_malloc_r+0xa8>
 800682c:	4623      	mov	r3, r4
 800682e:	6864      	ldr	r4, [r4, #4]
 8006830:	e7ae      	b.n	8006790 <_malloc_r+0x34>
 8006832:	463c      	mov	r4, r7
 8006834:	687f      	ldr	r7, [r7, #4]
 8006836:	e7b6      	b.n	80067a6 <_malloc_r+0x4a>
 8006838:	461a      	mov	r2, r3
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	42a3      	cmp	r3, r4
 800683e:	d1fb      	bne.n	8006838 <_malloc_r+0xdc>
 8006840:	2300      	movs	r3, #0
 8006842:	6053      	str	r3, [r2, #4]
 8006844:	e7de      	b.n	8006804 <_malloc_r+0xa8>
 8006846:	230c      	movs	r3, #12
 8006848:	4630      	mov	r0, r6
 800684a:	6033      	str	r3, [r6, #0]
 800684c:	f000 f80c 	bl	8006868 <__malloc_unlock>
 8006850:	e794      	b.n	800677c <_malloc_r+0x20>
 8006852:	6005      	str	r5, [r0, #0]
 8006854:	e7d6      	b.n	8006804 <_malloc_r+0xa8>
 8006856:	bf00      	nop
 8006858:	20000414 	.word	0x20000414

0800685c <__malloc_lock>:
 800685c:	4801      	ldr	r0, [pc, #4]	@ (8006864 <__malloc_lock+0x8>)
 800685e:	f7ff bf03 	b.w	8006668 <__retarget_lock_acquire_recursive>
 8006862:	bf00      	nop
 8006864:	2000040c 	.word	0x2000040c

08006868 <__malloc_unlock>:
 8006868:	4801      	ldr	r0, [pc, #4]	@ (8006870 <__malloc_unlock+0x8>)
 800686a:	f7ff befe 	b.w	800666a <__retarget_lock_release_recursive>
 800686e:	bf00      	nop
 8006870:	2000040c 	.word	0x2000040c

08006874 <__ssputs_r>:
 8006874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006878:	461f      	mov	r7, r3
 800687a:	688e      	ldr	r6, [r1, #8]
 800687c:	4682      	mov	sl, r0
 800687e:	42be      	cmp	r6, r7
 8006880:	460c      	mov	r4, r1
 8006882:	4690      	mov	r8, r2
 8006884:	680b      	ldr	r3, [r1, #0]
 8006886:	d82d      	bhi.n	80068e4 <__ssputs_r+0x70>
 8006888:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800688c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006890:	d026      	beq.n	80068e0 <__ssputs_r+0x6c>
 8006892:	6965      	ldr	r5, [r4, #20]
 8006894:	6909      	ldr	r1, [r1, #16]
 8006896:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800689a:	eba3 0901 	sub.w	r9, r3, r1
 800689e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80068a2:	1c7b      	adds	r3, r7, #1
 80068a4:	444b      	add	r3, r9
 80068a6:	106d      	asrs	r5, r5, #1
 80068a8:	429d      	cmp	r5, r3
 80068aa:	bf38      	it	cc
 80068ac:	461d      	movcc	r5, r3
 80068ae:	0553      	lsls	r3, r2, #21
 80068b0:	d527      	bpl.n	8006902 <__ssputs_r+0x8e>
 80068b2:	4629      	mov	r1, r5
 80068b4:	f7ff ff52 	bl	800675c <_malloc_r>
 80068b8:	4606      	mov	r6, r0
 80068ba:	b360      	cbz	r0, 8006916 <__ssputs_r+0xa2>
 80068bc:	464a      	mov	r2, r9
 80068be:	6921      	ldr	r1, [r4, #16]
 80068c0:	f7ff fed4 	bl	800666c <memcpy>
 80068c4:	89a3      	ldrh	r3, [r4, #12]
 80068c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80068ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068ce:	81a3      	strh	r3, [r4, #12]
 80068d0:	6126      	str	r6, [r4, #16]
 80068d2:	444e      	add	r6, r9
 80068d4:	6026      	str	r6, [r4, #0]
 80068d6:	463e      	mov	r6, r7
 80068d8:	6165      	str	r5, [r4, #20]
 80068da:	eba5 0509 	sub.w	r5, r5, r9
 80068de:	60a5      	str	r5, [r4, #8]
 80068e0:	42be      	cmp	r6, r7
 80068e2:	d900      	bls.n	80068e6 <__ssputs_r+0x72>
 80068e4:	463e      	mov	r6, r7
 80068e6:	4632      	mov	r2, r6
 80068e8:	4641      	mov	r1, r8
 80068ea:	6820      	ldr	r0, [r4, #0]
 80068ec:	f000 faaa 	bl	8006e44 <memmove>
 80068f0:	2000      	movs	r0, #0
 80068f2:	68a3      	ldr	r3, [r4, #8]
 80068f4:	1b9b      	subs	r3, r3, r6
 80068f6:	60a3      	str	r3, [r4, #8]
 80068f8:	6823      	ldr	r3, [r4, #0]
 80068fa:	4433      	add	r3, r6
 80068fc:	6023      	str	r3, [r4, #0]
 80068fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006902:	462a      	mov	r2, r5
 8006904:	f000 fad6 	bl	8006eb4 <_realloc_r>
 8006908:	4606      	mov	r6, r0
 800690a:	2800      	cmp	r0, #0
 800690c:	d1e0      	bne.n	80068d0 <__ssputs_r+0x5c>
 800690e:	4650      	mov	r0, sl
 8006910:	6921      	ldr	r1, [r4, #16]
 8006912:	f7ff feb9 	bl	8006688 <_free_r>
 8006916:	230c      	movs	r3, #12
 8006918:	f8ca 3000 	str.w	r3, [sl]
 800691c:	89a3      	ldrh	r3, [r4, #12]
 800691e:	f04f 30ff 	mov.w	r0, #4294967295
 8006922:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006926:	81a3      	strh	r3, [r4, #12]
 8006928:	e7e9      	b.n	80068fe <__ssputs_r+0x8a>
	...

0800692c <_svfiprintf_r>:
 800692c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006930:	4698      	mov	r8, r3
 8006932:	898b      	ldrh	r3, [r1, #12]
 8006934:	4607      	mov	r7, r0
 8006936:	061b      	lsls	r3, r3, #24
 8006938:	460d      	mov	r5, r1
 800693a:	4614      	mov	r4, r2
 800693c:	b09d      	sub	sp, #116	@ 0x74
 800693e:	d510      	bpl.n	8006962 <_svfiprintf_r+0x36>
 8006940:	690b      	ldr	r3, [r1, #16]
 8006942:	b973      	cbnz	r3, 8006962 <_svfiprintf_r+0x36>
 8006944:	2140      	movs	r1, #64	@ 0x40
 8006946:	f7ff ff09 	bl	800675c <_malloc_r>
 800694a:	6028      	str	r0, [r5, #0]
 800694c:	6128      	str	r0, [r5, #16]
 800694e:	b930      	cbnz	r0, 800695e <_svfiprintf_r+0x32>
 8006950:	230c      	movs	r3, #12
 8006952:	603b      	str	r3, [r7, #0]
 8006954:	f04f 30ff 	mov.w	r0, #4294967295
 8006958:	b01d      	add	sp, #116	@ 0x74
 800695a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800695e:	2340      	movs	r3, #64	@ 0x40
 8006960:	616b      	str	r3, [r5, #20]
 8006962:	2300      	movs	r3, #0
 8006964:	9309      	str	r3, [sp, #36]	@ 0x24
 8006966:	2320      	movs	r3, #32
 8006968:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800696c:	2330      	movs	r3, #48	@ 0x30
 800696e:	f04f 0901 	mov.w	r9, #1
 8006972:	f8cd 800c 	str.w	r8, [sp, #12]
 8006976:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006b10 <_svfiprintf_r+0x1e4>
 800697a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800697e:	4623      	mov	r3, r4
 8006980:	469a      	mov	sl, r3
 8006982:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006986:	b10a      	cbz	r2, 800698c <_svfiprintf_r+0x60>
 8006988:	2a25      	cmp	r2, #37	@ 0x25
 800698a:	d1f9      	bne.n	8006980 <_svfiprintf_r+0x54>
 800698c:	ebba 0b04 	subs.w	fp, sl, r4
 8006990:	d00b      	beq.n	80069aa <_svfiprintf_r+0x7e>
 8006992:	465b      	mov	r3, fp
 8006994:	4622      	mov	r2, r4
 8006996:	4629      	mov	r1, r5
 8006998:	4638      	mov	r0, r7
 800699a:	f7ff ff6b 	bl	8006874 <__ssputs_r>
 800699e:	3001      	adds	r0, #1
 80069a0:	f000 80a7 	beq.w	8006af2 <_svfiprintf_r+0x1c6>
 80069a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80069a6:	445a      	add	r2, fp
 80069a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80069aa:	f89a 3000 	ldrb.w	r3, [sl]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	f000 809f 	beq.w	8006af2 <_svfiprintf_r+0x1c6>
 80069b4:	2300      	movs	r3, #0
 80069b6:	f04f 32ff 	mov.w	r2, #4294967295
 80069ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069be:	f10a 0a01 	add.w	sl, sl, #1
 80069c2:	9304      	str	r3, [sp, #16]
 80069c4:	9307      	str	r3, [sp, #28]
 80069c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80069ca:	931a      	str	r3, [sp, #104]	@ 0x68
 80069cc:	4654      	mov	r4, sl
 80069ce:	2205      	movs	r2, #5
 80069d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069d4:	484e      	ldr	r0, [pc, #312]	@ (8006b10 <_svfiprintf_r+0x1e4>)
 80069d6:	f000 fa5f 	bl	8006e98 <memchr>
 80069da:	9a04      	ldr	r2, [sp, #16]
 80069dc:	b9d8      	cbnz	r0, 8006a16 <_svfiprintf_r+0xea>
 80069de:	06d0      	lsls	r0, r2, #27
 80069e0:	bf44      	itt	mi
 80069e2:	2320      	movmi	r3, #32
 80069e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80069e8:	0711      	lsls	r1, r2, #28
 80069ea:	bf44      	itt	mi
 80069ec:	232b      	movmi	r3, #43	@ 0x2b
 80069ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80069f2:	f89a 3000 	ldrb.w	r3, [sl]
 80069f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80069f8:	d015      	beq.n	8006a26 <_svfiprintf_r+0xfa>
 80069fa:	4654      	mov	r4, sl
 80069fc:	2000      	movs	r0, #0
 80069fe:	f04f 0c0a 	mov.w	ip, #10
 8006a02:	9a07      	ldr	r2, [sp, #28]
 8006a04:	4621      	mov	r1, r4
 8006a06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a0a:	3b30      	subs	r3, #48	@ 0x30
 8006a0c:	2b09      	cmp	r3, #9
 8006a0e:	d94b      	bls.n	8006aa8 <_svfiprintf_r+0x17c>
 8006a10:	b1b0      	cbz	r0, 8006a40 <_svfiprintf_r+0x114>
 8006a12:	9207      	str	r2, [sp, #28]
 8006a14:	e014      	b.n	8006a40 <_svfiprintf_r+0x114>
 8006a16:	eba0 0308 	sub.w	r3, r0, r8
 8006a1a:	fa09 f303 	lsl.w	r3, r9, r3
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	46a2      	mov	sl, r4
 8006a22:	9304      	str	r3, [sp, #16]
 8006a24:	e7d2      	b.n	80069cc <_svfiprintf_r+0xa0>
 8006a26:	9b03      	ldr	r3, [sp, #12]
 8006a28:	1d19      	adds	r1, r3, #4
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	9103      	str	r1, [sp, #12]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	bfbb      	ittet	lt
 8006a32:	425b      	neglt	r3, r3
 8006a34:	f042 0202 	orrlt.w	r2, r2, #2
 8006a38:	9307      	strge	r3, [sp, #28]
 8006a3a:	9307      	strlt	r3, [sp, #28]
 8006a3c:	bfb8      	it	lt
 8006a3e:	9204      	strlt	r2, [sp, #16]
 8006a40:	7823      	ldrb	r3, [r4, #0]
 8006a42:	2b2e      	cmp	r3, #46	@ 0x2e
 8006a44:	d10a      	bne.n	8006a5c <_svfiprintf_r+0x130>
 8006a46:	7863      	ldrb	r3, [r4, #1]
 8006a48:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a4a:	d132      	bne.n	8006ab2 <_svfiprintf_r+0x186>
 8006a4c:	9b03      	ldr	r3, [sp, #12]
 8006a4e:	3402      	adds	r4, #2
 8006a50:	1d1a      	adds	r2, r3, #4
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	9203      	str	r2, [sp, #12]
 8006a56:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006a5a:	9305      	str	r3, [sp, #20]
 8006a5c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006b14 <_svfiprintf_r+0x1e8>
 8006a60:	2203      	movs	r2, #3
 8006a62:	4650      	mov	r0, sl
 8006a64:	7821      	ldrb	r1, [r4, #0]
 8006a66:	f000 fa17 	bl	8006e98 <memchr>
 8006a6a:	b138      	cbz	r0, 8006a7c <_svfiprintf_r+0x150>
 8006a6c:	2240      	movs	r2, #64	@ 0x40
 8006a6e:	9b04      	ldr	r3, [sp, #16]
 8006a70:	eba0 000a 	sub.w	r0, r0, sl
 8006a74:	4082      	lsls	r2, r0
 8006a76:	4313      	orrs	r3, r2
 8006a78:	3401      	adds	r4, #1
 8006a7a:	9304      	str	r3, [sp, #16]
 8006a7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a80:	2206      	movs	r2, #6
 8006a82:	4825      	ldr	r0, [pc, #148]	@ (8006b18 <_svfiprintf_r+0x1ec>)
 8006a84:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006a88:	f000 fa06 	bl	8006e98 <memchr>
 8006a8c:	2800      	cmp	r0, #0
 8006a8e:	d036      	beq.n	8006afe <_svfiprintf_r+0x1d2>
 8006a90:	4b22      	ldr	r3, [pc, #136]	@ (8006b1c <_svfiprintf_r+0x1f0>)
 8006a92:	bb1b      	cbnz	r3, 8006adc <_svfiprintf_r+0x1b0>
 8006a94:	9b03      	ldr	r3, [sp, #12]
 8006a96:	3307      	adds	r3, #7
 8006a98:	f023 0307 	bic.w	r3, r3, #7
 8006a9c:	3308      	adds	r3, #8
 8006a9e:	9303      	str	r3, [sp, #12]
 8006aa0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006aa2:	4433      	add	r3, r6
 8006aa4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006aa6:	e76a      	b.n	800697e <_svfiprintf_r+0x52>
 8006aa8:	460c      	mov	r4, r1
 8006aaa:	2001      	movs	r0, #1
 8006aac:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ab0:	e7a8      	b.n	8006a04 <_svfiprintf_r+0xd8>
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	f04f 0c0a 	mov.w	ip, #10
 8006ab8:	4619      	mov	r1, r3
 8006aba:	3401      	adds	r4, #1
 8006abc:	9305      	str	r3, [sp, #20]
 8006abe:	4620      	mov	r0, r4
 8006ac0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ac4:	3a30      	subs	r2, #48	@ 0x30
 8006ac6:	2a09      	cmp	r2, #9
 8006ac8:	d903      	bls.n	8006ad2 <_svfiprintf_r+0x1a6>
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d0c6      	beq.n	8006a5c <_svfiprintf_r+0x130>
 8006ace:	9105      	str	r1, [sp, #20]
 8006ad0:	e7c4      	b.n	8006a5c <_svfiprintf_r+0x130>
 8006ad2:	4604      	mov	r4, r0
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ada:	e7f0      	b.n	8006abe <_svfiprintf_r+0x192>
 8006adc:	ab03      	add	r3, sp, #12
 8006ade:	9300      	str	r3, [sp, #0]
 8006ae0:	462a      	mov	r2, r5
 8006ae2:	4638      	mov	r0, r7
 8006ae4:	4b0e      	ldr	r3, [pc, #56]	@ (8006b20 <_svfiprintf_r+0x1f4>)
 8006ae6:	a904      	add	r1, sp, #16
 8006ae8:	f3af 8000 	nop.w
 8006aec:	1c42      	adds	r2, r0, #1
 8006aee:	4606      	mov	r6, r0
 8006af0:	d1d6      	bne.n	8006aa0 <_svfiprintf_r+0x174>
 8006af2:	89ab      	ldrh	r3, [r5, #12]
 8006af4:	065b      	lsls	r3, r3, #25
 8006af6:	f53f af2d 	bmi.w	8006954 <_svfiprintf_r+0x28>
 8006afa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006afc:	e72c      	b.n	8006958 <_svfiprintf_r+0x2c>
 8006afe:	ab03      	add	r3, sp, #12
 8006b00:	9300      	str	r3, [sp, #0]
 8006b02:	462a      	mov	r2, r5
 8006b04:	4638      	mov	r0, r7
 8006b06:	4b06      	ldr	r3, [pc, #24]	@ (8006b20 <_svfiprintf_r+0x1f4>)
 8006b08:	a904      	add	r1, sp, #16
 8006b0a:	f000 f87d 	bl	8006c08 <_printf_i>
 8006b0e:	e7ed      	b.n	8006aec <_svfiprintf_r+0x1c0>
 8006b10:	08007fa6 	.word	0x08007fa6
 8006b14:	08007fac 	.word	0x08007fac
 8006b18:	08007fb0 	.word	0x08007fb0
 8006b1c:	00000000 	.word	0x00000000
 8006b20:	08006875 	.word	0x08006875

08006b24 <_printf_common>:
 8006b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b28:	4616      	mov	r6, r2
 8006b2a:	4698      	mov	r8, r3
 8006b2c:	688a      	ldr	r2, [r1, #8]
 8006b2e:	690b      	ldr	r3, [r1, #16]
 8006b30:	4607      	mov	r7, r0
 8006b32:	4293      	cmp	r3, r2
 8006b34:	bfb8      	it	lt
 8006b36:	4613      	movlt	r3, r2
 8006b38:	6033      	str	r3, [r6, #0]
 8006b3a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006b3e:	460c      	mov	r4, r1
 8006b40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006b44:	b10a      	cbz	r2, 8006b4a <_printf_common+0x26>
 8006b46:	3301      	adds	r3, #1
 8006b48:	6033      	str	r3, [r6, #0]
 8006b4a:	6823      	ldr	r3, [r4, #0]
 8006b4c:	0699      	lsls	r1, r3, #26
 8006b4e:	bf42      	ittt	mi
 8006b50:	6833      	ldrmi	r3, [r6, #0]
 8006b52:	3302      	addmi	r3, #2
 8006b54:	6033      	strmi	r3, [r6, #0]
 8006b56:	6825      	ldr	r5, [r4, #0]
 8006b58:	f015 0506 	ands.w	r5, r5, #6
 8006b5c:	d106      	bne.n	8006b6c <_printf_common+0x48>
 8006b5e:	f104 0a19 	add.w	sl, r4, #25
 8006b62:	68e3      	ldr	r3, [r4, #12]
 8006b64:	6832      	ldr	r2, [r6, #0]
 8006b66:	1a9b      	subs	r3, r3, r2
 8006b68:	42ab      	cmp	r3, r5
 8006b6a:	dc2b      	bgt.n	8006bc4 <_printf_common+0xa0>
 8006b6c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006b70:	6822      	ldr	r2, [r4, #0]
 8006b72:	3b00      	subs	r3, #0
 8006b74:	bf18      	it	ne
 8006b76:	2301      	movne	r3, #1
 8006b78:	0692      	lsls	r2, r2, #26
 8006b7a:	d430      	bmi.n	8006bde <_printf_common+0xba>
 8006b7c:	4641      	mov	r1, r8
 8006b7e:	4638      	mov	r0, r7
 8006b80:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006b84:	47c8      	blx	r9
 8006b86:	3001      	adds	r0, #1
 8006b88:	d023      	beq.n	8006bd2 <_printf_common+0xae>
 8006b8a:	6823      	ldr	r3, [r4, #0]
 8006b8c:	6922      	ldr	r2, [r4, #16]
 8006b8e:	f003 0306 	and.w	r3, r3, #6
 8006b92:	2b04      	cmp	r3, #4
 8006b94:	bf14      	ite	ne
 8006b96:	2500      	movne	r5, #0
 8006b98:	6833      	ldreq	r3, [r6, #0]
 8006b9a:	f04f 0600 	mov.w	r6, #0
 8006b9e:	bf08      	it	eq
 8006ba0:	68e5      	ldreq	r5, [r4, #12]
 8006ba2:	f104 041a 	add.w	r4, r4, #26
 8006ba6:	bf08      	it	eq
 8006ba8:	1aed      	subeq	r5, r5, r3
 8006baa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006bae:	bf08      	it	eq
 8006bb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	bfc4      	itt	gt
 8006bb8:	1a9b      	subgt	r3, r3, r2
 8006bba:	18ed      	addgt	r5, r5, r3
 8006bbc:	42b5      	cmp	r5, r6
 8006bbe:	d11a      	bne.n	8006bf6 <_printf_common+0xd2>
 8006bc0:	2000      	movs	r0, #0
 8006bc2:	e008      	b.n	8006bd6 <_printf_common+0xb2>
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	4652      	mov	r2, sl
 8006bc8:	4641      	mov	r1, r8
 8006bca:	4638      	mov	r0, r7
 8006bcc:	47c8      	blx	r9
 8006bce:	3001      	adds	r0, #1
 8006bd0:	d103      	bne.n	8006bda <_printf_common+0xb6>
 8006bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8006bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bda:	3501      	adds	r5, #1
 8006bdc:	e7c1      	b.n	8006b62 <_printf_common+0x3e>
 8006bde:	2030      	movs	r0, #48	@ 0x30
 8006be0:	18e1      	adds	r1, r4, r3
 8006be2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006be6:	1c5a      	adds	r2, r3, #1
 8006be8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006bec:	4422      	add	r2, r4
 8006bee:	3302      	adds	r3, #2
 8006bf0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006bf4:	e7c2      	b.n	8006b7c <_printf_common+0x58>
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	4622      	mov	r2, r4
 8006bfa:	4641      	mov	r1, r8
 8006bfc:	4638      	mov	r0, r7
 8006bfe:	47c8      	blx	r9
 8006c00:	3001      	adds	r0, #1
 8006c02:	d0e6      	beq.n	8006bd2 <_printf_common+0xae>
 8006c04:	3601      	adds	r6, #1
 8006c06:	e7d9      	b.n	8006bbc <_printf_common+0x98>

08006c08 <_printf_i>:
 8006c08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c0c:	7e0f      	ldrb	r7, [r1, #24]
 8006c0e:	4691      	mov	r9, r2
 8006c10:	2f78      	cmp	r7, #120	@ 0x78
 8006c12:	4680      	mov	r8, r0
 8006c14:	460c      	mov	r4, r1
 8006c16:	469a      	mov	sl, r3
 8006c18:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006c1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006c1e:	d807      	bhi.n	8006c30 <_printf_i+0x28>
 8006c20:	2f62      	cmp	r7, #98	@ 0x62
 8006c22:	d80a      	bhi.n	8006c3a <_printf_i+0x32>
 8006c24:	2f00      	cmp	r7, #0
 8006c26:	f000 80d1 	beq.w	8006dcc <_printf_i+0x1c4>
 8006c2a:	2f58      	cmp	r7, #88	@ 0x58
 8006c2c:	f000 80b8 	beq.w	8006da0 <_printf_i+0x198>
 8006c30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006c38:	e03a      	b.n	8006cb0 <_printf_i+0xa8>
 8006c3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006c3e:	2b15      	cmp	r3, #21
 8006c40:	d8f6      	bhi.n	8006c30 <_printf_i+0x28>
 8006c42:	a101      	add	r1, pc, #4	@ (adr r1, 8006c48 <_printf_i+0x40>)
 8006c44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c48:	08006ca1 	.word	0x08006ca1
 8006c4c:	08006cb5 	.word	0x08006cb5
 8006c50:	08006c31 	.word	0x08006c31
 8006c54:	08006c31 	.word	0x08006c31
 8006c58:	08006c31 	.word	0x08006c31
 8006c5c:	08006c31 	.word	0x08006c31
 8006c60:	08006cb5 	.word	0x08006cb5
 8006c64:	08006c31 	.word	0x08006c31
 8006c68:	08006c31 	.word	0x08006c31
 8006c6c:	08006c31 	.word	0x08006c31
 8006c70:	08006c31 	.word	0x08006c31
 8006c74:	08006db3 	.word	0x08006db3
 8006c78:	08006cdf 	.word	0x08006cdf
 8006c7c:	08006d6d 	.word	0x08006d6d
 8006c80:	08006c31 	.word	0x08006c31
 8006c84:	08006c31 	.word	0x08006c31
 8006c88:	08006dd5 	.word	0x08006dd5
 8006c8c:	08006c31 	.word	0x08006c31
 8006c90:	08006cdf 	.word	0x08006cdf
 8006c94:	08006c31 	.word	0x08006c31
 8006c98:	08006c31 	.word	0x08006c31
 8006c9c:	08006d75 	.word	0x08006d75
 8006ca0:	6833      	ldr	r3, [r6, #0]
 8006ca2:	1d1a      	adds	r2, r3, #4
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	6032      	str	r2, [r6, #0]
 8006ca8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006cac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e09c      	b.n	8006dee <_printf_i+0x1e6>
 8006cb4:	6833      	ldr	r3, [r6, #0]
 8006cb6:	6820      	ldr	r0, [r4, #0]
 8006cb8:	1d19      	adds	r1, r3, #4
 8006cba:	6031      	str	r1, [r6, #0]
 8006cbc:	0606      	lsls	r6, r0, #24
 8006cbe:	d501      	bpl.n	8006cc4 <_printf_i+0xbc>
 8006cc0:	681d      	ldr	r5, [r3, #0]
 8006cc2:	e003      	b.n	8006ccc <_printf_i+0xc4>
 8006cc4:	0645      	lsls	r5, r0, #25
 8006cc6:	d5fb      	bpl.n	8006cc0 <_printf_i+0xb8>
 8006cc8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006ccc:	2d00      	cmp	r5, #0
 8006cce:	da03      	bge.n	8006cd8 <_printf_i+0xd0>
 8006cd0:	232d      	movs	r3, #45	@ 0x2d
 8006cd2:	426d      	negs	r5, r5
 8006cd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006cd8:	230a      	movs	r3, #10
 8006cda:	4858      	ldr	r0, [pc, #352]	@ (8006e3c <_printf_i+0x234>)
 8006cdc:	e011      	b.n	8006d02 <_printf_i+0xfa>
 8006cde:	6821      	ldr	r1, [r4, #0]
 8006ce0:	6833      	ldr	r3, [r6, #0]
 8006ce2:	0608      	lsls	r0, r1, #24
 8006ce4:	f853 5b04 	ldr.w	r5, [r3], #4
 8006ce8:	d402      	bmi.n	8006cf0 <_printf_i+0xe8>
 8006cea:	0649      	lsls	r1, r1, #25
 8006cec:	bf48      	it	mi
 8006cee:	b2ad      	uxthmi	r5, r5
 8006cf0:	2f6f      	cmp	r7, #111	@ 0x6f
 8006cf2:	6033      	str	r3, [r6, #0]
 8006cf4:	bf14      	ite	ne
 8006cf6:	230a      	movne	r3, #10
 8006cf8:	2308      	moveq	r3, #8
 8006cfa:	4850      	ldr	r0, [pc, #320]	@ (8006e3c <_printf_i+0x234>)
 8006cfc:	2100      	movs	r1, #0
 8006cfe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006d02:	6866      	ldr	r6, [r4, #4]
 8006d04:	2e00      	cmp	r6, #0
 8006d06:	60a6      	str	r6, [r4, #8]
 8006d08:	db05      	blt.n	8006d16 <_printf_i+0x10e>
 8006d0a:	6821      	ldr	r1, [r4, #0]
 8006d0c:	432e      	orrs	r6, r5
 8006d0e:	f021 0104 	bic.w	r1, r1, #4
 8006d12:	6021      	str	r1, [r4, #0]
 8006d14:	d04b      	beq.n	8006dae <_printf_i+0x1a6>
 8006d16:	4616      	mov	r6, r2
 8006d18:	fbb5 f1f3 	udiv	r1, r5, r3
 8006d1c:	fb03 5711 	mls	r7, r3, r1, r5
 8006d20:	5dc7      	ldrb	r7, [r0, r7]
 8006d22:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006d26:	462f      	mov	r7, r5
 8006d28:	42bb      	cmp	r3, r7
 8006d2a:	460d      	mov	r5, r1
 8006d2c:	d9f4      	bls.n	8006d18 <_printf_i+0x110>
 8006d2e:	2b08      	cmp	r3, #8
 8006d30:	d10b      	bne.n	8006d4a <_printf_i+0x142>
 8006d32:	6823      	ldr	r3, [r4, #0]
 8006d34:	07df      	lsls	r7, r3, #31
 8006d36:	d508      	bpl.n	8006d4a <_printf_i+0x142>
 8006d38:	6923      	ldr	r3, [r4, #16]
 8006d3a:	6861      	ldr	r1, [r4, #4]
 8006d3c:	4299      	cmp	r1, r3
 8006d3e:	bfde      	ittt	le
 8006d40:	2330      	movle	r3, #48	@ 0x30
 8006d42:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006d46:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006d4a:	1b92      	subs	r2, r2, r6
 8006d4c:	6122      	str	r2, [r4, #16]
 8006d4e:	464b      	mov	r3, r9
 8006d50:	4621      	mov	r1, r4
 8006d52:	4640      	mov	r0, r8
 8006d54:	f8cd a000 	str.w	sl, [sp]
 8006d58:	aa03      	add	r2, sp, #12
 8006d5a:	f7ff fee3 	bl	8006b24 <_printf_common>
 8006d5e:	3001      	adds	r0, #1
 8006d60:	d14a      	bne.n	8006df8 <_printf_i+0x1f0>
 8006d62:	f04f 30ff 	mov.w	r0, #4294967295
 8006d66:	b004      	add	sp, #16
 8006d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d6c:	6823      	ldr	r3, [r4, #0]
 8006d6e:	f043 0320 	orr.w	r3, r3, #32
 8006d72:	6023      	str	r3, [r4, #0]
 8006d74:	2778      	movs	r7, #120	@ 0x78
 8006d76:	4832      	ldr	r0, [pc, #200]	@ (8006e40 <_printf_i+0x238>)
 8006d78:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006d7c:	6823      	ldr	r3, [r4, #0]
 8006d7e:	6831      	ldr	r1, [r6, #0]
 8006d80:	061f      	lsls	r7, r3, #24
 8006d82:	f851 5b04 	ldr.w	r5, [r1], #4
 8006d86:	d402      	bmi.n	8006d8e <_printf_i+0x186>
 8006d88:	065f      	lsls	r7, r3, #25
 8006d8a:	bf48      	it	mi
 8006d8c:	b2ad      	uxthmi	r5, r5
 8006d8e:	6031      	str	r1, [r6, #0]
 8006d90:	07d9      	lsls	r1, r3, #31
 8006d92:	bf44      	itt	mi
 8006d94:	f043 0320 	orrmi.w	r3, r3, #32
 8006d98:	6023      	strmi	r3, [r4, #0]
 8006d9a:	b11d      	cbz	r5, 8006da4 <_printf_i+0x19c>
 8006d9c:	2310      	movs	r3, #16
 8006d9e:	e7ad      	b.n	8006cfc <_printf_i+0xf4>
 8006da0:	4826      	ldr	r0, [pc, #152]	@ (8006e3c <_printf_i+0x234>)
 8006da2:	e7e9      	b.n	8006d78 <_printf_i+0x170>
 8006da4:	6823      	ldr	r3, [r4, #0]
 8006da6:	f023 0320 	bic.w	r3, r3, #32
 8006daa:	6023      	str	r3, [r4, #0]
 8006dac:	e7f6      	b.n	8006d9c <_printf_i+0x194>
 8006dae:	4616      	mov	r6, r2
 8006db0:	e7bd      	b.n	8006d2e <_printf_i+0x126>
 8006db2:	6833      	ldr	r3, [r6, #0]
 8006db4:	6825      	ldr	r5, [r4, #0]
 8006db6:	1d18      	adds	r0, r3, #4
 8006db8:	6961      	ldr	r1, [r4, #20]
 8006dba:	6030      	str	r0, [r6, #0]
 8006dbc:	062e      	lsls	r6, r5, #24
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	d501      	bpl.n	8006dc6 <_printf_i+0x1be>
 8006dc2:	6019      	str	r1, [r3, #0]
 8006dc4:	e002      	b.n	8006dcc <_printf_i+0x1c4>
 8006dc6:	0668      	lsls	r0, r5, #25
 8006dc8:	d5fb      	bpl.n	8006dc2 <_printf_i+0x1ba>
 8006dca:	8019      	strh	r1, [r3, #0]
 8006dcc:	2300      	movs	r3, #0
 8006dce:	4616      	mov	r6, r2
 8006dd0:	6123      	str	r3, [r4, #16]
 8006dd2:	e7bc      	b.n	8006d4e <_printf_i+0x146>
 8006dd4:	6833      	ldr	r3, [r6, #0]
 8006dd6:	2100      	movs	r1, #0
 8006dd8:	1d1a      	adds	r2, r3, #4
 8006dda:	6032      	str	r2, [r6, #0]
 8006ddc:	681e      	ldr	r6, [r3, #0]
 8006dde:	6862      	ldr	r2, [r4, #4]
 8006de0:	4630      	mov	r0, r6
 8006de2:	f000 f859 	bl	8006e98 <memchr>
 8006de6:	b108      	cbz	r0, 8006dec <_printf_i+0x1e4>
 8006de8:	1b80      	subs	r0, r0, r6
 8006dea:	6060      	str	r0, [r4, #4]
 8006dec:	6863      	ldr	r3, [r4, #4]
 8006dee:	6123      	str	r3, [r4, #16]
 8006df0:	2300      	movs	r3, #0
 8006df2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006df6:	e7aa      	b.n	8006d4e <_printf_i+0x146>
 8006df8:	4632      	mov	r2, r6
 8006dfa:	4649      	mov	r1, r9
 8006dfc:	4640      	mov	r0, r8
 8006dfe:	6923      	ldr	r3, [r4, #16]
 8006e00:	47d0      	blx	sl
 8006e02:	3001      	adds	r0, #1
 8006e04:	d0ad      	beq.n	8006d62 <_printf_i+0x15a>
 8006e06:	6823      	ldr	r3, [r4, #0]
 8006e08:	079b      	lsls	r3, r3, #30
 8006e0a:	d413      	bmi.n	8006e34 <_printf_i+0x22c>
 8006e0c:	68e0      	ldr	r0, [r4, #12]
 8006e0e:	9b03      	ldr	r3, [sp, #12]
 8006e10:	4298      	cmp	r0, r3
 8006e12:	bfb8      	it	lt
 8006e14:	4618      	movlt	r0, r3
 8006e16:	e7a6      	b.n	8006d66 <_printf_i+0x15e>
 8006e18:	2301      	movs	r3, #1
 8006e1a:	4632      	mov	r2, r6
 8006e1c:	4649      	mov	r1, r9
 8006e1e:	4640      	mov	r0, r8
 8006e20:	47d0      	blx	sl
 8006e22:	3001      	adds	r0, #1
 8006e24:	d09d      	beq.n	8006d62 <_printf_i+0x15a>
 8006e26:	3501      	adds	r5, #1
 8006e28:	68e3      	ldr	r3, [r4, #12]
 8006e2a:	9903      	ldr	r1, [sp, #12]
 8006e2c:	1a5b      	subs	r3, r3, r1
 8006e2e:	42ab      	cmp	r3, r5
 8006e30:	dcf2      	bgt.n	8006e18 <_printf_i+0x210>
 8006e32:	e7eb      	b.n	8006e0c <_printf_i+0x204>
 8006e34:	2500      	movs	r5, #0
 8006e36:	f104 0619 	add.w	r6, r4, #25
 8006e3a:	e7f5      	b.n	8006e28 <_printf_i+0x220>
 8006e3c:	08007fb7 	.word	0x08007fb7
 8006e40:	08007fc8 	.word	0x08007fc8

08006e44 <memmove>:
 8006e44:	4288      	cmp	r0, r1
 8006e46:	b510      	push	{r4, lr}
 8006e48:	eb01 0402 	add.w	r4, r1, r2
 8006e4c:	d902      	bls.n	8006e54 <memmove+0x10>
 8006e4e:	4284      	cmp	r4, r0
 8006e50:	4623      	mov	r3, r4
 8006e52:	d807      	bhi.n	8006e64 <memmove+0x20>
 8006e54:	1e43      	subs	r3, r0, #1
 8006e56:	42a1      	cmp	r1, r4
 8006e58:	d008      	beq.n	8006e6c <memmove+0x28>
 8006e5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e62:	e7f8      	b.n	8006e56 <memmove+0x12>
 8006e64:	4601      	mov	r1, r0
 8006e66:	4402      	add	r2, r0
 8006e68:	428a      	cmp	r2, r1
 8006e6a:	d100      	bne.n	8006e6e <memmove+0x2a>
 8006e6c:	bd10      	pop	{r4, pc}
 8006e6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006e76:	e7f7      	b.n	8006e68 <memmove+0x24>

08006e78 <_sbrk_r>:
 8006e78:	b538      	push	{r3, r4, r5, lr}
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	4d05      	ldr	r5, [pc, #20]	@ (8006e94 <_sbrk_r+0x1c>)
 8006e7e:	4604      	mov	r4, r0
 8006e80:	4608      	mov	r0, r1
 8006e82:	602b      	str	r3, [r5, #0]
 8006e84:	f7fd fc32 	bl	80046ec <_sbrk>
 8006e88:	1c43      	adds	r3, r0, #1
 8006e8a:	d102      	bne.n	8006e92 <_sbrk_r+0x1a>
 8006e8c:	682b      	ldr	r3, [r5, #0]
 8006e8e:	b103      	cbz	r3, 8006e92 <_sbrk_r+0x1a>
 8006e90:	6023      	str	r3, [r4, #0]
 8006e92:	bd38      	pop	{r3, r4, r5, pc}
 8006e94:	20000408 	.word	0x20000408

08006e98 <memchr>:
 8006e98:	4603      	mov	r3, r0
 8006e9a:	b510      	push	{r4, lr}
 8006e9c:	b2c9      	uxtb	r1, r1
 8006e9e:	4402      	add	r2, r0
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	d101      	bne.n	8006eaa <memchr+0x12>
 8006ea6:	2000      	movs	r0, #0
 8006ea8:	e003      	b.n	8006eb2 <memchr+0x1a>
 8006eaa:	7804      	ldrb	r4, [r0, #0]
 8006eac:	3301      	adds	r3, #1
 8006eae:	428c      	cmp	r4, r1
 8006eb0:	d1f6      	bne.n	8006ea0 <memchr+0x8>
 8006eb2:	bd10      	pop	{r4, pc}

08006eb4 <_realloc_r>:
 8006eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006eb8:	4607      	mov	r7, r0
 8006eba:	4614      	mov	r4, r2
 8006ebc:	460d      	mov	r5, r1
 8006ebe:	b921      	cbnz	r1, 8006eca <_realloc_r+0x16>
 8006ec0:	4611      	mov	r1, r2
 8006ec2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ec6:	f7ff bc49 	b.w	800675c <_malloc_r>
 8006eca:	b92a      	cbnz	r2, 8006ed8 <_realloc_r+0x24>
 8006ecc:	f7ff fbdc 	bl	8006688 <_free_r>
 8006ed0:	4625      	mov	r5, r4
 8006ed2:	4628      	mov	r0, r5
 8006ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ed8:	f000 f81a 	bl	8006f10 <_malloc_usable_size_r>
 8006edc:	4284      	cmp	r4, r0
 8006ede:	4606      	mov	r6, r0
 8006ee0:	d802      	bhi.n	8006ee8 <_realloc_r+0x34>
 8006ee2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006ee6:	d8f4      	bhi.n	8006ed2 <_realloc_r+0x1e>
 8006ee8:	4621      	mov	r1, r4
 8006eea:	4638      	mov	r0, r7
 8006eec:	f7ff fc36 	bl	800675c <_malloc_r>
 8006ef0:	4680      	mov	r8, r0
 8006ef2:	b908      	cbnz	r0, 8006ef8 <_realloc_r+0x44>
 8006ef4:	4645      	mov	r5, r8
 8006ef6:	e7ec      	b.n	8006ed2 <_realloc_r+0x1e>
 8006ef8:	42b4      	cmp	r4, r6
 8006efa:	4622      	mov	r2, r4
 8006efc:	4629      	mov	r1, r5
 8006efe:	bf28      	it	cs
 8006f00:	4632      	movcs	r2, r6
 8006f02:	f7ff fbb3 	bl	800666c <memcpy>
 8006f06:	4629      	mov	r1, r5
 8006f08:	4638      	mov	r0, r7
 8006f0a:	f7ff fbbd 	bl	8006688 <_free_r>
 8006f0e:	e7f1      	b.n	8006ef4 <_realloc_r+0x40>

08006f10 <_malloc_usable_size_r>:
 8006f10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f14:	1f18      	subs	r0, r3, #4
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	bfbc      	itt	lt
 8006f1a:	580b      	ldrlt	r3, [r1, r0]
 8006f1c:	18c0      	addlt	r0, r0, r3
 8006f1e:	4770      	bx	lr

08006f20 <sqrtf>:
 8006f20:	b538      	push	{r3, r4, r5, lr}
 8006f22:	4605      	mov	r5, r0
 8006f24:	f000 f888 	bl	8007038 <__ieee754_sqrtf>
 8006f28:	4629      	mov	r1, r5
 8006f2a:	4604      	mov	r4, r0
 8006f2c:	4628      	mov	r0, r5
 8006f2e:	f7f9 fbe1 	bl	80006f4 <__aeabi_fcmpun>
 8006f32:	b968      	cbnz	r0, 8006f50 <sqrtf+0x30>
 8006f34:	2100      	movs	r1, #0
 8006f36:	4628      	mov	r0, r5
 8006f38:	f7f9 fbb4 	bl	80006a4 <__aeabi_fcmplt>
 8006f3c:	b140      	cbz	r0, 8006f50 <sqrtf+0x30>
 8006f3e:	f7ff fb69 	bl	8006614 <__errno>
 8006f42:	2321      	movs	r3, #33	@ 0x21
 8006f44:	2100      	movs	r1, #0
 8006f46:	6003      	str	r3, [r0, #0]
 8006f48:	4608      	mov	r0, r1
 8006f4a:	f7f9 fac1 	bl	80004d0 <__aeabi_fdiv>
 8006f4e:	4604      	mov	r4, r0
 8006f50:	4620      	mov	r0, r4
 8006f52:	bd38      	pop	{r3, r4, r5, pc}

08006f54 <cosf>:
 8006f54:	b507      	push	{r0, r1, r2, lr}
 8006f56:	4a1a      	ldr	r2, [pc, #104]	@ (8006fc0 <cosf+0x6c>)
 8006f58:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	4601      	mov	r1, r0
 8006f60:	d805      	bhi.n	8006f6e <cosf+0x1a>
 8006f62:	2100      	movs	r1, #0
 8006f64:	b003      	add	sp, #12
 8006f66:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f6a:	f000 b8d5 	b.w	8007118 <__kernel_cosf>
 8006f6e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8006f72:	d304      	bcc.n	8006f7e <cosf+0x2a>
 8006f74:	f7f9 f8ee 	bl	8000154 <__aeabi_fsub>
 8006f78:	b003      	add	sp, #12
 8006f7a:	f85d fb04 	ldr.w	pc, [sp], #4
 8006f7e:	4669      	mov	r1, sp
 8006f80:	f000 f9c0 	bl	8007304 <__ieee754_rem_pio2f>
 8006f84:	f000 0203 	and.w	r2, r0, #3
 8006f88:	2a01      	cmp	r2, #1
 8006f8a:	d007      	beq.n	8006f9c <cosf+0x48>
 8006f8c:	2a02      	cmp	r2, #2
 8006f8e:	d00c      	beq.n	8006faa <cosf+0x56>
 8006f90:	b982      	cbnz	r2, 8006fb4 <cosf+0x60>
 8006f92:	9901      	ldr	r1, [sp, #4]
 8006f94:	9800      	ldr	r0, [sp, #0]
 8006f96:	f000 f8bf 	bl	8007118 <__kernel_cosf>
 8006f9a:	e7ed      	b.n	8006f78 <cosf+0x24>
 8006f9c:	9901      	ldr	r1, [sp, #4]
 8006f9e:	9800      	ldr	r0, [sp, #0]
 8006fa0:	f000 f93a 	bl	8007218 <__kernel_sinf>
 8006fa4:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8006fa8:	e7e6      	b.n	8006f78 <cosf+0x24>
 8006faa:	9901      	ldr	r1, [sp, #4]
 8006fac:	9800      	ldr	r0, [sp, #0]
 8006fae:	f000 f8b3 	bl	8007118 <__kernel_cosf>
 8006fb2:	e7f7      	b.n	8006fa4 <cosf+0x50>
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	9901      	ldr	r1, [sp, #4]
 8006fb8:	9800      	ldr	r0, [sp, #0]
 8006fba:	f000 f92d 	bl	8007218 <__kernel_sinf>
 8006fbe:	e7db      	b.n	8006f78 <cosf+0x24>
 8006fc0:	3f490fd8 	.word	0x3f490fd8

08006fc4 <sinf>:
 8006fc4:	b507      	push	{r0, r1, r2, lr}
 8006fc6:	4a1b      	ldr	r2, [pc, #108]	@ (8007034 <sinf+0x70>)
 8006fc8:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	4601      	mov	r1, r0
 8006fd0:	d806      	bhi.n	8006fe0 <sinf+0x1c>
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	2100      	movs	r1, #0
 8006fd6:	b003      	add	sp, #12
 8006fd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006fdc:	f000 b91c 	b.w	8007218 <__kernel_sinf>
 8006fe0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8006fe4:	d304      	bcc.n	8006ff0 <sinf+0x2c>
 8006fe6:	f7f9 f8b5 	bl	8000154 <__aeabi_fsub>
 8006fea:	b003      	add	sp, #12
 8006fec:	f85d fb04 	ldr.w	pc, [sp], #4
 8006ff0:	4669      	mov	r1, sp
 8006ff2:	f000 f987 	bl	8007304 <__ieee754_rem_pio2f>
 8006ff6:	f000 0003 	and.w	r0, r0, #3
 8006ffa:	2801      	cmp	r0, #1
 8006ffc:	d008      	beq.n	8007010 <sinf+0x4c>
 8006ffe:	2802      	cmp	r0, #2
 8007000:	d00b      	beq.n	800701a <sinf+0x56>
 8007002:	b990      	cbnz	r0, 800702a <sinf+0x66>
 8007004:	2201      	movs	r2, #1
 8007006:	9901      	ldr	r1, [sp, #4]
 8007008:	9800      	ldr	r0, [sp, #0]
 800700a:	f000 f905 	bl	8007218 <__kernel_sinf>
 800700e:	e7ec      	b.n	8006fea <sinf+0x26>
 8007010:	9901      	ldr	r1, [sp, #4]
 8007012:	9800      	ldr	r0, [sp, #0]
 8007014:	f000 f880 	bl	8007118 <__kernel_cosf>
 8007018:	e7e7      	b.n	8006fea <sinf+0x26>
 800701a:	2201      	movs	r2, #1
 800701c:	9901      	ldr	r1, [sp, #4]
 800701e:	9800      	ldr	r0, [sp, #0]
 8007020:	f000 f8fa 	bl	8007218 <__kernel_sinf>
 8007024:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8007028:	e7df      	b.n	8006fea <sinf+0x26>
 800702a:	9901      	ldr	r1, [sp, #4]
 800702c:	9800      	ldr	r0, [sp, #0]
 800702e:	f000 f873 	bl	8007118 <__kernel_cosf>
 8007032:	e7f7      	b.n	8007024 <sinf+0x60>
 8007034:	3f490fd8 	.word	0x3f490fd8

08007038 <__ieee754_sqrtf>:
 8007038:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 800703c:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8007040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007044:	4603      	mov	r3, r0
 8007046:	4604      	mov	r4, r0
 8007048:	d30a      	bcc.n	8007060 <__ieee754_sqrtf+0x28>
 800704a:	4601      	mov	r1, r0
 800704c:	f7f9 f98c 	bl	8000368 <__aeabi_fmul>
 8007050:	4601      	mov	r1, r0
 8007052:	4620      	mov	r0, r4
 8007054:	f7f9 f880 	bl	8000158 <__addsf3>
 8007058:	4604      	mov	r4, r0
 800705a:	4620      	mov	r0, r4
 800705c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007060:	2a00      	cmp	r2, #0
 8007062:	d0fa      	beq.n	800705a <__ieee754_sqrtf+0x22>
 8007064:	2800      	cmp	r0, #0
 8007066:	da06      	bge.n	8007076 <__ieee754_sqrtf+0x3e>
 8007068:	4601      	mov	r1, r0
 800706a:	f7f9 f873 	bl	8000154 <__aeabi_fsub>
 800706e:	4601      	mov	r1, r0
 8007070:	f7f9 fa2e 	bl	80004d0 <__aeabi_fdiv>
 8007074:	e7f0      	b.n	8007058 <__ieee754_sqrtf+0x20>
 8007076:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 800707a:	d03c      	beq.n	80070f6 <__ieee754_sqrtf+0xbe>
 800707c:	15c2      	asrs	r2, r0, #23
 800707e:	2400      	movs	r4, #0
 8007080:	2019      	movs	r0, #25
 8007082:	4626      	mov	r6, r4
 8007084:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8007088:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800708c:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 8007090:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007094:	07d2      	lsls	r2, r2, #31
 8007096:	bf58      	it	pl
 8007098:	005b      	lslpl	r3, r3, #1
 800709a:	106d      	asrs	r5, r5, #1
 800709c:	005b      	lsls	r3, r3, #1
 800709e:	1872      	adds	r2, r6, r1
 80070a0:	429a      	cmp	r2, r3
 80070a2:	bfcf      	iteee	gt
 80070a4:	461a      	movgt	r2, r3
 80070a6:	1856      	addle	r6, r2, r1
 80070a8:	1864      	addle	r4, r4, r1
 80070aa:	1a9a      	suble	r2, r3, r2
 80070ac:	3801      	subs	r0, #1
 80070ae:	ea4f 0342 	mov.w	r3, r2, lsl #1
 80070b2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80070b6:	d1f2      	bne.n	800709e <__ieee754_sqrtf+0x66>
 80070b8:	b1ba      	cbz	r2, 80070ea <__ieee754_sqrtf+0xb2>
 80070ba:	4e15      	ldr	r6, [pc, #84]	@ (8007110 <__ieee754_sqrtf+0xd8>)
 80070bc:	4f15      	ldr	r7, [pc, #84]	@ (8007114 <__ieee754_sqrtf+0xdc>)
 80070be:	6830      	ldr	r0, [r6, #0]
 80070c0:	6839      	ldr	r1, [r7, #0]
 80070c2:	f7f9 f847 	bl	8000154 <__aeabi_fsub>
 80070c6:	f8d6 8000 	ldr.w	r8, [r6]
 80070ca:	4601      	mov	r1, r0
 80070cc:	4640      	mov	r0, r8
 80070ce:	f7f9 faf3 	bl	80006b8 <__aeabi_fcmple>
 80070d2:	b150      	cbz	r0, 80070ea <__ieee754_sqrtf+0xb2>
 80070d4:	6830      	ldr	r0, [r6, #0]
 80070d6:	6839      	ldr	r1, [r7, #0]
 80070d8:	f7f9 f83e 	bl	8000158 <__addsf3>
 80070dc:	6836      	ldr	r6, [r6, #0]
 80070de:	4601      	mov	r1, r0
 80070e0:	4630      	mov	r0, r6
 80070e2:	f7f9 fadf 	bl	80006a4 <__aeabi_fcmplt>
 80070e6:	b170      	cbz	r0, 8007106 <__ieee754_sqrtf+0xce>
 80070e8:	3402      	adds	r4, #2
 80070ea:	1064      	asrs	r4, r4, #1
 80070ec:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 80070f0:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 80070f4:	e7b1      	b.n	800705a <__ieee754_sqrtf+0x22>
 80070f6:	005b      	lsls	r3, r3, #1
 80070f8:	0218      	lsls	r0, r3, #8
 80070fa:	460a      	mov	r2, r1
 80070fc:	f101 0101 	add.w	r1, r1, #1
 8007100:	d5f9      	bpl.n	80070f6 <__ieee754_sqrtf+0xbe>
 8007102:	4252      	negs	r2, r2
 8007104:	e7bb      	b.n	800707e <__ieee754_sqrtf+0x46>
 8007106:	3401      	adds	r4, #1
 8007108:	f024 0401 	bic.w	r4, r4, #1
 800710c:	e7ed      	b.n	80070ea <__ieee754_sqrtf+0xb2>
 800710e:	bf00      	nop
 8007110:	08007fe0 	.word	0x08007fe0
 8007114:	08007fdc 	.word	0x08007fdc

08007118 <__kernel_cosf>:
 8007118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800711c:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 8007120:	f1b5 5f48 	cmp.w	r5, #838860800	@ 0x32000000
 8007124:	4606      	mov	r6, r0
 8007126:	4688      	mov	r8, r1
 8007128:	d203      	bcs.n	8007132 <__kernel_cosf+0x1a>
 800712a:	f7f9 faf9 	bl	8000720 <__aeabi_f2iz>
 800712e:	2800      	cmp	r0, #0
 8007130:	d05c      	beq.n	80071ec <__kernel_cosf+0xd4>
 8007132:	4631      	mov	r1, r6
 8007134:	4630      	mov	r0, r6
 8007136:	f7f9 f917 	bl	8000368 <__aeabi_fmul>
 800713a:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800713e:	4604      	mov	r4, r0
 8007140:	f7f9 f912 	bl	8000368 <__aeabi_fmul>
 8007144:	492b      	ldr	r1, [pc, #172]	@ (80071f4 <__kernel_cosf+0xdc>)
 8007146:	4607      	mov	r7, r0
 8007148:	4620      	mov	r0, r4
 800714a:	f7f9 f90d 	bl	8000368 <__aeabi_fmul>
 800714e:	492a      	ldr	r1, [pc, #168]	@ (80071f8 <__kernel_cosf+0xe0>)
 8007150:	f7f9 f802 	bl	8000158 <__addsf3>
 8007154:	4621      	mov	r1, r4
 8007156:	f7f9 f907 	bl	8000368 <__aeabi_fmul>
 800715a:	4928      	ldr	r1, [pc, #160]	@ (80071fc <__kernel_cosf+0xe4>)
 800715c:	f7f8 fffa 	bl	8000154 <__aeabi_fsub>
 8007160:	4621      	mov	r1, r4
 8007162:	f7f9 f901 	bl	8000368 <__aeabi_fmul>
 8007166:	4926      	ldr	r1, [pc, #152]	@ (8007200 <__kernel_cosf+0xe8>)
 8007168:	f7f8 fff6 	bl	8000158 <__addsf3>
 800716c:	4621      	mov	r1, r4
 800716e:	f7f9 f8fb 	bl	8000368 <__aeabi_fmul>
 8007172:	4924      	ldr	r1, [pc, #144]	@ (8007204 <__kernel_cosf+0xec>)
 8007174:	f7f8 ffee 	bl	8000154 <__aeabi_fsub>
 8007178:	4621      	mov	r1, r4
 800717a:	f7f9 f8f5 	bl	8000368 <__aeabi_fmul>
 800717e:	4922      	ldr	r1, [pc, #136]	@ (8007208 <__kernel_cosf+0xf0>)
 8007180:	f7f8 ffea 	bl	8000158 <__addsf3>
 8007184:	4621      	mov	r1, r4
 8007186:	f7f9 f8ef 	bl	8000368 <__aeabi_fmul>
 800718a:	4621      	mov	r1, r4
 800718c:	f7f9 f8ec 	bl	8000368 <__aeabi_fmul>
 8007190:	4641      	mov	r1, r8
 8007192:	4604      	mov	r4, r0
 8007194:	4630      	mov	r0, r6
 8007196:	f7f9 f8e7 	bl	8000368 <__aeabi_fmul>
 800719a:	4601      	mov	r1, r0
 800719c:	4620      	mov	r0, r4
 800719e:	f7f8 ffd9 	bl	8000154 <__aeabi_fsub>
 80071a2:	4b1a      	ldr	r3, [pc, #104]	@ (800720c <__kernel_cosf+0xf4>)
 80071a4:	4604      	mov	r4, r0
 80071a6:	429d      	cmp	r5, r3
 80071a8:	d80a      	bhi.n	80071c0 <__kernel_cosf+0xa8>
 80071aa:	4601      	mov	r1, r0
 80071ac:	4638      	mov	r0, r7
 80071ae:	f7f8 ffd1 	bl	8000154 <__aeabi_fsub>
 80071b2:	4601      	mov	r1, r0
 80071b4:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80071b8:	f7f8 ffcc 	bl	8000154 <__aeabi_fsub>
 80071bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071c0:	4b13      	ldr	r3, [pc, #76]	@ (8007210 <__kernel_cosf+0xf8>)
 80071c2:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80071c6:	429d      	cmp	r5, r3
 80071c8:	bf8c      	ite	hi
 80071ca:	4d12      	ldrhi	r5, [pc, #72]	@ (8007214 <__kernel_cosf+0xfc>)
 80071cc:	f105 457f 	addls.w	r5, r5, #4278190080	@ 0xff000000
 80071d0:	4629      	mov	r1, r5
 80071d2:	f7f8 ffbf 	bl	8000154 <__aeabi_fsub>
 80071d6:	4629      	mov	r1, r5
 80071d8:	4606      	mov	r6, r0
 80071da:	4638      	mov	r0, r7
 80071dc:	f7f8 ffba 	bl	8000154 <__aeabi_fsub>
 80071e0:	4621      	mov	r1, r4
 80071e2:	f7f8 ffb7 	bl	8000154 <__aeabi_fsub>
 80071e6:	4601      	mov	r1, r0
 80071e8:	4630      	mov	r0, r6
 80071ea:	e7e5      	b.n	80071b8 <__kernel_cosf+0xa0>
 80071ec:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80071f0:	e7e4      	b.n	80071bc <__kernel_cosf+0xa4>
 80071f2:	bf00      	nop
 80071f4:	ad47d74e 	.word	0xad47d74e
 80071f8:	310f74f6 	.word	0x310f74f6
 80071fc:	3493f27c 	.word	0x3493f27c
 8007200:	37d00d01 	.word	0x37d00d01
 8007204:	3ab60b61 	.word	0x3ab60b61
 8007208:	3d2aaaab 	.word	0x3d2aaaab
 800720c:	3e999999 	.word	0x3e999999
 8007210:	3f480000 	.word	0x3f480000
 8007214:	3e900000 	.word	0x3e900000

08007218 <__kernel_sinf>:
 8007218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800721c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8007220:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8007224:	4604      	mov	r4, r0
 8007226:	460f      	mov	r7, r1
 8007228:	4691      	mov	r9, r2
 800722a:	d203      	bcs.n	8007234 <__kernel_sinf+0x1c>
 800722c:	f7f9 fa78 	bl	8000720 <__aeabi_f2iz>
 8007230:	2800      	cmp	r0, #0
 8007232:	d035      	beq.n	80072a0 <__kernel_sinf+0x88>
 8007234:	4621      	mov	r1, r4
 8007236:	4620      	mov	r0, r4
 8007238:	f7f9 f896 	bl	8000368 <__aeabi_fmul>
 800723c:	4605      	mov	r5, r0
 800723e:	4601      	mov	r1, r0
 8007240:	4620      	mov	r0, r4
 8007242:	f7f9 f891 	bl	8000368 <__aeabi_fmul>
 8007246:	4929      	ldr	r1, [pc, #164]	@ (80072ec <__kernel_sinf+0xd4>)
 8007248:	4606      	mov	r6, r0
 800724a:	4628      	mov	r0, r5
 800724c:	f7f9 f88c 	bl	8000368 <__aeabi_fmul>
 8007250:	4927      	ldr	r1, [pc, #156]	@ (80072f0 <__kernel_sinf+0xd8>)
 8007252:	f7f8 ff7f 	bl	8000154 <__aeabi_fsub>
 8007256:	4629      	mov	r1, r5
 8007258:	f7f9 f886 	bl	8000368 <__aeabi_fmul>
 800725c:	4925      	ldr	r1, [pc, #148]	@ (80072f4 <__kernel_sinf+0xdc>)
 800725e:	f7f8 ff7b 	bl	8000158 <__addsf3>
 8007262:	4629      	mov	r1, r5
 8007264:	f7f9 f880 	bl	8000368 <__aeabi_fmul>
 8007268:	4923      	ldr	r1, [pc, #140]	@ (80072f8 <__kernel_sinf+0xe0>)
 800726a:	f7f8 ff73 	bl	8000154 <__aeabi_fsub>
 800726e:	4629      	mov	r1, r5
 8007270:	f7f9 f87a 	bl	8000368 <__aeabi_fmul>
 8007274:	4921      	ldr	r1, [pc, #132]	@ (80072fc <__kernel_sinf+0xe4>)
 8007276:	f7f8 ff6f 	bl	8000158 <__addsf3>
 800727a:	4680      	mov	r8, r0
 800727c:	f1b9 0f00 	cmp.w	r9, #0
 8007280:	d111      	bne.n	80072a6 <__kernel_sinf+0x8e>
 8007282:	4601      	mov	r1, r0
 8007284:	4628      	mov	r0, r5
 8007286:	f7f9 f86f 	bl	8000368 <__aeabi_fmul>
 800728a:	491d      	ldr	r1, [pc, #116]	@ (8007300 <__kernel_sinf+0xe8>)
 800728c:	f7f8 ff62 	bl	8000154 <__aeabi_fsub>
 8007290:	4631      	mov	r1, r6
 8007292:	f7f9 f869 	bl	8000368 <__aeabi_fmul>
 8007296:	4601      	mov	r1, r0
 8007298:	4620      	mov	r0, r4
 800729a:	f7f8 ff5d 	bl	8000158 <__addsf3>
 800729e:	4604      	mov	r4, r0
 80072a0:	4620      	mov	r0, r4
 80072a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072a6:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80072aa:	4638      	mov	r0, r7
 80072ac:	f7f9 f85c 	bl	8000368 <__aeabi_fmul>
 80072b0:	4641      	mov	r1, r8
 80072b2:	4681      	mov	r9, r0
 80072b4:	4630      	mov	r0, r6
 80072b6:	f7f9 f857 	bl	8000368 <__aeabi_fmul>
 80072ba:	4601      	mov	r1, r0
 80072bc:	4648      	mov	r0, r9
 80072be:	f7f8 ff49 	bl	8000154 <__aeabi_fsub>
 80072c2:	4629      	mov	r1, r5
 80072c4:	f7f9 f850 	bl	8000368 <__aeabi_fmul>
 80072c8:	4639      	mov	r1, r7
 80072ca:	f7f8 ff43 	bl	8000154 <__aeabi_fsub>
 80072ce:	490c      	ldr	r1, [pc, #48]	@ (8007300 <__kernel_sinf+0xe8>)
 80072d0:	4605      	mov	r5, r0
 80072d2:	4630      	mov	r0, r6
 80072d4:	f7f9 f848 	bl	8000368 <__aeabi_fmul>
 80072d8:	4601      	mov	r1, r0
 80072da:	4628      	mov	r0, r5
 80072dc:	f7f8 ff3c 	bl	8000158 <__addsf3>
 80072e0:	4601      	mov	r1, r0
 80072e2:	4620      	mov	r0, r4
 80072e4:	f7f8 ff36 	bl	8000154 <__aeabi_fsub>
 80072e8:	e7d9      	b.n	800729e <__kernel_sinf+0x86>
 80072ea:	bf00      	nop
 80072ec:	2f2ec9d3 	.word	0x2f2ec9d3
 80072f0:	32d72f34 	.word	0x32d72f34
 80072f4:	3638ef1b 	.word	0x3638ef1b
 80072f8:	39500d01 	.word	0x39500d01
 80072fc:	3c088889 	.word	0x3c088889
 8007300:	3e2aaaab 	.word	0x3e2aaaab

08007304 <__ieee754_rem_pio2f>:
 8007304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007308:	4aa4      	ldr	r2, [pc, #656]	@ (800759c <__ieee754_rem_pio2f+0x298>)
 800730a:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 800730e:	4590      	cmp	r8, r2
 8007310:	460c      	mov	r4, r1
 8007312:	4682      	mov	sl, r0
 8007314:	b087      	sub	sp, #28
 8007316:	d804      	bhi.n	8007322 <__ieee754_rem_pio2f+0x1e>
 8007318:	2300      	movs	r3, #0
 800731a:	6008      	str	r0, [r1, #0]
 800731c:	604b      	str	r3, [r1, #4]
 800731e:	2500      	movs	r5, #0
 8007320:	e01d      	b.n	800735e <__ieee754_rem_pio2f+0x5a>
 8007322:	4a9f      	ldr	r2, [pc, #636]	@ (80075a0 <__ieee754_rem_pio2f+0x29c>)
 8007324:	4590      	cmp	r8, r2
 8007326:	d84f      	bhi.n	80073c8 <__ieee754_rem_pio2f+0xc4>
 8007328:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 800732c:	2800      	cmp	r0, #0
 800732e:	499d      	ldr	r1, [pc, #628]	@ (80075a4 <__ieee754_rem_pio2f+0x2a0>)
 8007330:	4f9d      	ldr	r7, [pc, #628]	@ (80075a8 <__ieee754_rem_pio2f+0x2a4>)
 8007332:	f025 050f 	bic.w	r5, r5, #15
 8007336:	dd24      	ble.n	8007382 <__ieee754_rem_pio2f+0x7e>
 8007338:	f7f8 ff0c 	bl	8000154 <__aeabi_fsub>
 800733c:	42bd      	cmp	r5, r7
 800733e:	4606      	mov	r6, r0
 8007340:	d011      	beq.n	8007366 <__ieee754_rem_pio2f+0x62>
 8007342:	499a      	ldr	r1, [pc, #616]	@ (80075ac <__ieee754_rem_pio2f+0x2a8>)
 8007344:	f7f8 ff06 	bl	8000154 <__aeabi_fsub>
 8007348:	4601      	mov	r1, r0
 800734a:	4605      	mov	r5, r0
 800734c:	4630      	mov	r0, r6
 800734e:	f7f8 ff01 	bl	8000154 <__aeabi_fsub>
 8007352:	4996      	ldr	r1, [pc, #600]	@ (80075ac <__ieee754_rem_pio2f+0x2a8>)
 8007354:	f7f8 fefe 	bl	8000154 <__aeabi_fsub>
 8007358:	6025      	str	r5, [r4, #0]
 800735a:	2501      	movs	r5, #1
 800735c:	6060      	str	r0, [r4, #4]
 800735e:	4628      	mov	r0, r5
 8007360:	b007      	add	sp, #28
 8007362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007366:	4992      	ldr	r1, [pc, #584]	@ (80075b0 <__ieee754_rem_pio2f+0x2ac>)
 8007368:	f7f8 fef4 	bl	8000154 <__aeabi_fsub>
 800736c:	4991      	ldr	r1, [pc, #580]	@ (80075b4 <__ieee754_rem_pio2f+0x2b0>)
 800736e:	4606      	mov	r6, r0
 8007370:	f7f8 fef0 	bl	8000154 <__aeabi_fsub>
 8007374:	4601      	mov	r1, r0
 8007376:	4605      	mov	r5, r0
 8007378:	4630      	mov	r0, r6
 800737a:	f7f8 feeb 	bl	8000154 <__aeabi_fsub>
 800737e:	498d      	ldr	r1, [pc, #564]	@ (80075b4 <__ieee754_rem_pio2f+0x2b0>)
 8007380:	e7e8      	b.n	8007354 <__ieee754_rem_pio2f+0x50>
 8007382:	f7f8 fee9 	bl	8000158 <__addsf3>
 8007386:	42bd      	cmp	r5, r7
 8007388:	4606      	mov	r6, r0
 800738a:	d00f      	beq.n	80073ac <__ieee754_rem_pio2f+0xa8>
 800738c:	4987      	ldr	r1, [pc, #540]	@ (80075ac <__ieee754_rem_pio2f+0x2a8>)
 800738e:	f7f8 fee3 	bl	8000158 <__addsf3>
 8007392:	4601      	mov	r1, r0
 8007394:	4605      	mov	r5, r0
 8007396:	4630      	mov	r0, r6
 8007398:	f7f8 fedc 	bl	8000154 <__aeabi_fsub>
 800739c:	4983      	ldr	r1, [pc, #524]	@ (80075ac <__ieee754_rem_pio2f+0x2a8>)
 800739e:	f7f8 fedb 	bl	8000158 <__addsf3>
 80073a2:	6025      	str	r5, [r4, #0]
 80073a4:	6060      	str	r0, [r4, #4]
 80073a6:	f04f 35ff 	mov.w	r5, #4294967295
 80073aa:	e7d8      	b.n	800735e <__ieee754_rem_pio2f+0x5a>
 80073ac:	4980      	ldr	r1, [pc, #512]	@ (80075b0 <__ieee754_rem_pio2f+0x2ac>)
 80073ae:	f7f8 fed3 	bl	8000158 <__addsf3>
 80073b2:	4980      	ldr	r1, [pc, #512]	@ (80075b4 <__ieee754_rem_pio2f+0x2b0>)
 80073b4:	4606      	mov	r6, r0
 80073b6:	f7f8 fecf 	bl	8000158 <__addsf3>
 80073ba:	4601      	mov	r1, r0
 80073bc:	4605      	mov	r5, r0
 80073be:	4630      	mov	r0, r6
 80073c0:	f7f8 fec8 	bl	8000154 <__aeabi_fsub>
 80073c4:	497b      	ldr	r1, [pc, #492]	@ (80075b4 <__ieee754_rem_pio2f+0x2b0>)
 80073c6:	e7ea      	b.n	800739e <__ieee754_rem_pio2f+0x9a>
 80073c8:	4a7b      	ldr	r2, [pc, #492]	@ (80075b8 <__ieee754_rem_pio2f+0x2b4>)
 80073ca:	4590      	cmp	r8, r2
 80073cc:	f200 8095 	bhi.w	80074fa <__ieee754_rem_pio2f+0x1f6>
 80073d0:	f000 f8fe 	bl	80075d0 <fabsf>
 80073d4:	4979      	ldr	r1, [pc, #484]	@ (80075bc <__ieee754_rem_pio2f+0x2b8>)
 80073d6:	4606      	mov	r6, r0
 80073d8:	f7f8 ffc6 	bl	8000368 <__aeabi_fmul>
 80073dc:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80073e0:	f7f8 feba 	bl	8000158 <__addsf3>
 80073e4:	f7f9 f99c 	bl	8000720 <__aeabi_f2iz>
 80073e8:	4605      	mov	r5, r0
 80073ea:	f7f8 ff69 	bl	80002c0 <__aeabi_i2f>
 80073ee:	496d      	ldr	r1, [pc, #436]	@ (80075a4 <__ieee754_rem_pio2f+0x2a0>)
 80073f0:	4681      	mov	r9, r0
 80073f2:	f7f8 ffb9 	bl	8000368 <__aeabi_fmul>
 80073f6:	4601      	mov	r1, r0
 80073f8:	4630      	mov	r0, r6
 80073fa:	f7f8 feab 	bl	8000154 <__aeabi_fsub>
 80073fe:	496b      	ldr	r1, [pc, #428]	@ (80075ac <__ieee754_rem_pio2f+0x2a8>)
 8007400:	4607      	mov	r7, r0
 8007402:	4648      	mov	r0, r9
 8007404:	f7f8 ffb0 	bl	8000368 <__aeabi_fmul>
 8007408:	2d1f      	cmp	r5, #31
 800740a:	4606      	mov	r6, r0
 800740c:	dc0e      	bgt.n	800742c <__ieee754_rem_pio2f+0x128>
 800740e:	4a6c      	ldr	r2, [pc, #432]	@ (80075c0 <__ieee754_rem_pio2f+0x2bc>)
 8007410:	1e69      	subs	r1, r5, #1
 8007412:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8007416:	f02a 4300 	bic.w	r3, sl, #2147483648	@ 0x80000000
 800741a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800741e:	4293      	cmp	r3, r2
 8007420:	d004      	beq.n	800742c <__ieee754_rem_pio2f+0x128>
 8007422:	4631      	mov	r1, r6
 8007424:	4638      	mov	r0, r7
 8007426:	f7f8 fe95 	bl	8000154 <__aeabi_fsub>
 800742a:	e00b      	b.n	8007444 <__ieee754_rem_pio2f+0x140>
 800742c:	4631      	mov	r1, r6
 800742e:	4638      	mov	r0, r7
 8007430:	f7f8 fe90 	bl	8000154 <__aeabi_fsub>
 8007434:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8007438:	ebc3 53d8 	rsb	r3, r3, r8, lsr #23
 800743c:	2b08      	cmp	r3, #8
 800743e:	ea4f 5be8 	mov.w	fp, r8, asr #23
 8007442:	dc01      	bgt.n	8007448 <__ieee754_rem_pio2f+0x144>
 8007444:	6020      	str	r0, [r4, #0]
 8007446:	e026      	b.n	8007496 <__ieee754_rem_pio2f+0x192>
 8007448:	4959      	ldr	r1, [pc, #356]	@ (80075b0 <__ieee754_rem_pio2f+0x2ac>)
 800744a:	4648      	mov	r0, r9
 800744c:	f7f8 ff8c 	bl	8000368 <__aeabi_fmul>
 8007450:	4606      	mov	r6, r0
 8007452:	4601      	mov	r1, r0
 8007454:	4638      	mov	r0, r7
 8007456:	f7f8 fe7d 	bl	8000154 <__aeabi_fsub>
 800745a:	4601      	mov	r1, r0
 800745c:	4680      	mov	r8, r0
 800745e:	4638      	mov	r0, r7
 8007460:	f7f8 fe78 	bl	8000154 <__aeabi_fsub>
 8007464:	4631      	mov	r1, r6
 8007466:	f7f8 fe75 	bl	8000154 <__aeabi_fsub>
 800746a:	4606      	mov	r6, r0
 800746c:	4951      	ldr	r1, [pc, #324]	@ (80075b4 <__ieee754_rem_pio2f+0x2b0>)
 800746e:	4648      	mov	r0, r9
 8007470:	f7f8 ff7a 	bl	8000368 <__aeabi_fmul>
 8007474:	4631      	mov	r1, r6
 8007476:	f7f8 fe6d 	bl	8000154 <__aeabi_fsub>
 800747a:	4601      	mov	r1, r0
 800747c:	4606      	mov	r6, r0
 800747e:	4640      	mov	r0, r8
 8007480:	f7f8 fe68 	bl	8000154 <__aeabi_fsub>
 8007484:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8007488:	ebab 0b03 	sub.w	fp, fp, r3
 800748c:	f1bb 0f19 	cmp.w	fp, #25
 8007490:	dc18      	bgt.n	80074c4 <__ieee754_rem_pio2f+0x1c0>
 8007492:	4647      	mov	r7, r8
 8007494:	6020      	str	r0, [r4, #0]
 8007496:	f8d4 8000 	ldr.w	r8, [r4]
 800749a:	4638      	mov	r0, r7
 800749c:	4641      	mov	r1, r8
 800749e:	f7f8 fe59 	bl	8000154 <__aeabi_fsub>
 80074a2:	4631      	mov	r1, r6
 80074a4:	f7f8 fe56 	bl	8000154 <__aeabi_fsub>
 80074a8:	f1ba 0f00 	cmp.w	sl, #0
 80074ac:	6060      	str	r0, [r4, #4]
 80074ae:	f6bf af56 	bge.w	800735e <__ieee754_rem_pio2f+0x5a>
 80074b2:	f108 4800 	add.w	r8, r8, #2147483648	@ 0x80000000
 80074b6:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 80074ba:	f8c4 8000 	str.w	r8, [r4]
 80074be:	6060      	str	r0, [r4, #4]
 80074c0:	426d      	negs	r5, r5
 80074c2:	e74c      	b.n	800735e <__ieee754_rem_pio2f+0x5a>
 80074c4:	493f      	ldr	r1, [pc, #252]	@ (80075c4 <__ieee754_rem_pio2f+0x2c0>)
 80074c6:	4648      	mov	r0, r9
 80074c8:	f7f8 ff4e 	bl	8000368 <__aeabi_fmul>
 80074cc:	4606      	mov	r6, r0
 80074ce:	4601      	mov	r1, r0
 80074d0:	4640      	mov	r0, r8
 80074d2:	f7f8 fe3f 	bl	8000154 <__aeabi_fsub>
 80074d6:	4601      	mov	r1, r0
 80074d8:	4607      	mov	r7, r0
 80074da:	4640      	mov	r0, r8
 80074dc:	f7f8 fe3a 	bl	8000154 <__aeabi_fsub>
 80074e0:	4631      	mov	r1, r6
 80074e2:	f7f8 fe37 	bl	8000154 <__aeabi_fsub>
 80074e6:	4606      	mov	r6, r0
 80074e8:	4937      	ldr	r1, [pc, #220]	@ (80075c8 <__ieee754_rem_pio2f+0x2c4>)
 80074ea:	4648      	mov	r0, r9
 80074ec:	f7f8 ff3c 	bl	8000368 <__aeabi_fmul>
 80074f0:	4631      	mov	r1, r6
 80074f2:	f7f8 fe2f 	bl	8000154 <__aeabi_fsub>
 80074f6:	4606      	mov	r6, r0
 80074f8:	e793      	b.n	8007422 <__ieee754_rem_pio2f+0x11e>
 80074fa:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 80074fe:	d305      	bcc.n	800750c <__ieee754_rem_pio2f+0x208>
 8007500:	4601      	mov	r1, r0
 8007502:	f7f8 fe27 	bl	8000154 <__aeabi_fsub>
 8007506:	6060      	str	r0, [r4, #4]
 8007508:	6020      	str	r0, [r4, #0]
 800750a:	e708      	b.n	800731e <__ieee754_rem_pio2f+0x1a>
 800750c:	ea4f 56e8 	mov.w	r6, r8, asr #23
 8007510:	3e86      	subs	r6, #134	@ 0x86
 8007512:	eba8 58c6 	sub.w	r8, r8, r6, lsl #23
 8007516:	4640      	mov	r0, r8
 8007518:	f7f9 f902 	bl	8000720 <__aeabi_f2iz>
 800751c:	f7f8 fed0 	bl	80002c0 <__aeabi_i2f>
 8007520:	4601      	mov	r1, r0
 8007522:	9003      	str	r0, [sp, #12]
 8007524:	4640      	mov	r0, r8
 8007526:	f7f8 fe15 	bl	8000154 <__aeabi_fsub>
 800752a:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800752e:	f7f8 ff1b 	bl	8000368 <__aeabi_fmul>
 8007532:	4607      	mov	r7, r0
 8007534:	f7f9 f8f4 	bl	8000720 <__aeabi_f2iz>
 8007538:	f7f8 fec2 	bl	80002c0 <__aeabi_i2f>
 800753c:	4601      	mov	r1, r0
 800753e:	9004      	str	r0, [sp, #16]
 8007540:	4605      	mov	r5, r0
 8007542:	4638      	mov	r0, r7
 8007544:	f7f8 fe06 	bl	8000154 <__aeabi_fsub>
 8007548:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800754c:	f7f8 ff0c 	bl	8000368 <__aeabi_fmul>
 8007550:	2100      	movs	r1, #0
 8007552:	9005      	str	r0, [sp, #20]
 8007554:	f7f9 f89c 	bl	8000690 <__aeabi_fcmpeq>
 8007558:	b1f0      	cbz	r0, 8007598 <__ieee754_rem_pio2f+0x294>
 800755a:	2100      	movs	r1, #0
 800755c:	4628      	mov	r0, r5
 800755e:	f7f9 f897 	bl	8000690 <__aeabi_fcmpeq>
 8007562:	2800      	cmp	r0, #0
 8007564:	bf14      	ite	ne
 8007566:	2301      	movne	r3, #1
 8007568:	2302      	moveq	r3, #2
 800756a:	4a18      	ldr	r2, [pc, #96]	@ (80075cc <__ieee754_rem_pio2f+0x2c8>)
 800756c:	4621      	mov	r1, r4
 800756e:	9201      	str	r2, [sp, #4]
 8007570:	2202      	movs	r2, #2
 8007572:	a803      	add	r0, sp, #12
 8007574:	9200      	str	r2, [sp, #0]
 8007576:	4632      	mov	r2, r6
 8007578:	f000 f82e 	bl	80075d8 <__kernel_rem_pio2f>
 800757c:	f1ba 0f00 	cmp.w	sl, #0
 8007580:	4605      	mov	r5, r0
 8007582:	f6bf aeec 	bge.w	800735e <__ieee754_rem_pio2f+0x5a>
 8007586:	6823      	ldr	r3, [r4, #0]
 8007588:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800758c:	6023      	str	r3, [r4, #0]
 800758e:	6863      	ldr	r3, [r4, #4]
 8007590:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8007594:	6063      	str	r3, [r4, #4]
 8007596:	e793      	b.n	80074c0 <__ieee754_rem_pio2f+0x1bc>
 8007598:	2303      	movs	r3, #3
 800759a:	e7e6      	b.n	800756a <__ieee754_rem_pio2f+0x266>
 800759c:	3f490fd8 	.word	0x3f490fd8
 80075a0:	4016cbe3 	.word	0x4016cbe3
 80075a4:	3fc90f80 	.word	0x3fc90f80
 80075a8:	3fc90fd0 	.word	0x3fc90fd0
 80075ac:	37354443 	.word	0x37354443
 80075b0:	37354400 	.word	0x37354400
 80075b4:	2e85a308 	.word	0x2e85a308
 80075b8:	43490f80 	.word	0x43490f80
 80075bc:	3f22f984 	.word	0x3f22f984
 80075c0:	08007fe4 	.word	0x08007fe4
 80075c4:	2e85a300 	.word	0x2e85a300
 80075c8:	248d3132 	.word	0x248d3132
 80075cc:	08008064 	.word	0x08008064

080075d0 <fabsf>:
 80075d0:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80075d4:	4770      	bx	lr
	...

080075d8 <__kernel_rem_pio2f>:
 80075d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075dc:	b0db      	sub	sp, #364	@ 0x16c
 80075de:	9202      	str	r2, [sp, #8]
 80075e0:	9304      	str	r3, [sp, #16]
 80075e2:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 80075e4:	4bac      	ldr	r3, [pc, #688]	@ (8007898 <__kernel_rem_pio2f+0x2c0>)
 80075e6:	9005      	str	r0, [sp, #20]
 80075e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075ec:	9100      	str	r1, [sp, #0]
 80075ee:	9301      	str	r3, [sp, #4]
 80075f0:	9b04      	ldr	r3, [sp, #16]
 80075f2:	3b01      	subs	r3, #1
 80075f4:	9303      	str	r3, [sp, #12]
 80075f6:	9b02      	ldr	r3, [sp, #8]
 80075f8:	1d1a      	adds	r2, r3, #4
 80075fa:	f2c0 8099 	blt.w	8007730 <__kernel_rem_pio2f+0x158>
 80075fe:	1edc      	subs	r4, r3, #3
 8007600:	bf48      	it	mi
 8007602:	1d1c      	addmi	r4, r3, #4
 8007604:	10e4      	asrs	r4, r4, #3
 8007606:	2500      	movs	r5, #0
 8007608:	f04f 0b00 	mov.w	fp, #0
 800760c:	1c67      	adds	r7, r4, #1
 800760e:	00fb      	lsls	r3, r7, #3
 8007610:	9306      	str	r3, [sp, #24]
 8007612:	9b02      	ldr	r3, [sp, #8]
 8007614:	9a03      	ldr	r2, [sp, #12]
 8007616:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 800761a:	9b01      	ldr	r3, [sp, #4]
 800761c:	eba4 0802 	sub.w	r8, r4, r2
 8007620:	eb03 0902 	add.w	r9, r3, r2
 8007624:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 8007626:	ae1e      	add	r6, sp, #120	@ 0x78
 8007628:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 800762c:	454d      	cmp	r5, r9
 800762e:	f340 8081 	ble.w	8007734 <__kernel_rem_pio2f+0x15c>
 8007632:	9a04      	ldr	r2, [sp, #16]
 8007634:	ab1e      	add	r3, sp, #120	@ 0x78
 8007636:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 800763a:	f04f 0900 	mov.w	r9, #0
 800763e:	2300      	movs	r3, #0
 8007640:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 8007644:	9a01      	ldr	r2, [sp, #4]
 8007646:	4591      	cmp	r9, r2
 8007648:	f340 809a 	ble.w	8007780 <__kernel_rem_pio2f+0x1a8>
 800764c:	4613      	mov	r3, r2
 800764e:	aa0a      	add	r2, sp, #40	@ 0x28
 8007650:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007654:	9308      	str	r3, [sp, #32]
 8007656:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 8007658:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800765c:	9c01      	ldr	r4, [sp, #4]
 800765e:	9307      	str	r3, [sp, #28]
 8007660:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 8007664:	4646      	mov	r6, r8
 8007666:	4625      	mov	r5, r4
 8007668:	f04f 4987 	mov.w	r9, #1132462080	@ 0x43800000
 800766c:	ab5a      	add	r3, sp, #360	@ 0x168
 800766e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007672:	f853 bc50 	ldr.w	fp, [r3, #-80]
 8007676:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 800767a:	2d00      	cmp	r5, #0
 800767c:	f300 8085 	bgt.w	800778a <__kernel_rem_pio2f+0x1b2>
 8007680:	4639      	mov	r1, r7
 8007682:	4658      	mov	r0, fp
 8007684:	f000 fa46 	bl	8007b14 <scalbnf>
 8007688:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 800768c:	4605      	mov	r5, r0
 800768e:	f7f8 fe6b 	bl	8000368 <__aeabi_fmul>
 8007692:	f000 fa8b 	bl	8007bac <floorf>
 8007696:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 800769a:	f7f8 fe65 	bl	8000368 <__aeabi_fmul>
 800769e:	4601      	mov	r1, r0
 80076a0:	4628      	mov	r0, r5
 80076a2:	f7f8 fd57 	bl	8000154 <__aeabi_fsub>
 80076a6:	4605      	mov	r5, r0
 80076a8:	f7f9 f83a 	bl	8000720 <__aeabi_f2iz>
 80076ac:	4606      	mov	r6, r0
 80076ae:	f7f8 fe07 	bl	80002c0 <__aeabi_i2f>
 80076b2:	4601      	mov	r1, r0
 80076b4:	4628      	mov	r0, r5
 80076b6:	f7f8 fd4d 	bl	8000154 <__aeabi_fsub>
 80076ba:	2f00      	cmp	r7, #0
 80076bc:	4681      	mov	r9, r0
 80076be:	f340 8081 	ble.w	80077c4 <__kernel_rem_pio2f+0x1ec>
 80076c2:	1e62      	subs	r2, r4, #1
 80076c4:	ab0a      	add	r3, sp, #40	@ 0x28
 80076c6:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80076ca:	f1c7 0108 	rsb	r1, r7, #8
 80076ce:	fa45 f301 	asr.w	r3, r5, r1
 80076d2:	441e      	add	r6, r3
 80076d4:	408b      	lsls	r3, r1
 80076d6:	1aed      	subs	r5, r5, r3
 80076d8:	ab0a      	add	r3, sp, #40	@ 0x28
 80076da:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80076de:	f1c7 0307 	rsb	r3, r7, #7
 80076e2:	411d      	asrs	r5, r3
 80076e4:	2d00      	cmp	r5, #0
 80076e6:	dd7a      	ble.n	80077de <__kernel_rem_pio2f+0x206>
 80076e8:	2200      	movs	r2, #0
 80076ea:	4692      	mov	sl, r2
 80076ec:	3601      	adds	r6, #1
 80076ee:	4294      	cmp	r4, r2
 80076f0:	f300 80aa 	bgt.w	8007848 <__kernel_rem_pio2f+0x270>
 80076f4:	2f00      	cmp	r7, #0
 80076f6:	dd05      	ble.n	8007704 <__kernel_rem_pio2f+0x12c>
 80076f8:	2f01      	cmp	r7, #1
 80076fa:	f000 80b6 	beq.w	800786a <__kernel_rem_pio2f+0x292>
 80076fe:	2f02      	cmp	r7, #2
 8007700:	f000 80bd 	beq.w	800787e <__kernel_rem_pio2f+0x2a6>
 8007704:	2d02      	cmp	r5, #2
 8007706:	d16a      	bne.n	80077de <__kernel_rem_pio2f+0x206>
 8007708:	4649      	mov	r1, r9
 800770a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800770e:	f7f8 fd21 	bl	8000154 <__aeabi_fsub>
 8007712:	4681      	mov	r9, r0
 8007714:	f1ba 0f00 	cmp.w	sl, #0
 8007718:	d061      	beq.n	80077de <__kernel_rem_pio2f+0x206>
 800771a:	4639      	mov	r1, r7
 800771c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8007720:	f000 f9f8 	bl	8007b14 <scalbnf>
 8007724:	4601      	mov	r1, r0
 8007726:	4648      	mov	r0, r9
 8007728:	f7f8 fd14 	bl	8000154 <__aeabi_fsub>
 800772c:	4681      	mov	r9, r0
 800772e:	e056      	b.n	80077de <__kernel_rem_pio2f+0x206>
 8007730:	2400      	movs	r4, #0
 8007732:	e768      	b.n	8007606 <__kernel_rem_pio2f+0x2e>
 8007734:	eb18 0f05 	cmn.w	r8, r5
 8007738:	d407      	bmi.n	800774a <__kernel_rem_pio2f+0x172>
 800773a:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 800773e:	f7f8 fdbf 	bl	80002c0 <__aeabi_i2f>
 8007742:	f846 0b04 	str.w	r0, [r6], #4
 8007746:	3501      	adds	r5, #1
 8007748:	e770      	b.n	800762c <__kernel_rem_pio2f+0x54>
 800774a:	4658      	mov	r0, fp
 800774c:	e7f9      	b.n	8007742 <__kernel_rem_pio2f+0x16a>
 800774e:	9307      	str	r3, [sp, #28]
 8007750:	9b05      	ldr	r3, [sp, #20]
 8007752:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
 8007756:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800775a:	f7f8 fe05 	bl	8000368 <__aeabi_fmul>
 800775e:	4601      	mov	r1, r0
 8007760:	4630      	mov	r0, r6
 8007762:	f7f8 fcf9 	bl	8000158 <__addsf3>
 8007766:	4606      	mov	r6, r0
 8007768:	9b07      	ldr	r3, [sp, #28]
 800776a:	f108 0801 	add.w	r8, r8, #1
 800776e:	9a03      	ldr	r2, [sp, #12]
 8007770:	4590      	cmp	r8, r2
 8007772:	ddec      	ble.n	800774e <__kernel_rem_pio2f+0x176>
 8007774:	f84a 6b04 	str.w	r6, [sl], #4
 8007778:	f109 0901 	add.w	r9, r9, #1
 800777c:	3504      	adds	r5, #4
 800777e:	e761      	b.n	8007644 <__kernel_rem_pio2f+0x6c>
 8007780:	46ab      	mov	fp, r5
 8007782:	461e      	mov	r6, r3
 8007784:	f04f 0800 	mov.w	r8, #0
 8007788:	e7f1      	b.n	800776e <__kernel_rem_pio2f+0x196>
 800778a:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 800778e:	4658      	mov	r0, fp
 8007790:	f7f8 fdea 	bl	8000368 <__aeabi_fmul>
 8007794:	f7f8 ffc4 	bl	8000720 <__aeabi_f2iz>
 8007798:	f7f8 fd92 	bl	80002c0 <__aeabi_i2f>
 800779c:	4649      	mov	r1, r9
 800779e:	9009      	str	r0, [sp, #36]	@ 0x24
 80077a0:	f7f8 fde2 	bl	8000368 <__aeabi_fmul>
 80077a4:	4601      	mov	r1, r0
 80077a6:	4658      	mov	r0, fp
 80077a8:	f7f8 fcd4 	bl	8000154 <__aeabi_fsub>
 80077ac:	f7f8 ffb8 	bl	8000720 <__aeabi_f2iz>
 80077b0:	3d01      	subs	r5, #1
 80077b2:	f846 0b04 	str.w	r0, [r6], #4
 80077b6:	f85a 1025 	ldr.w	r1, [sl, r5, lsl #2]
 80077ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80077bc:	f7f8 fccc 	bl	8000158 <__addsf3>
 80077c0:	4683      	mov	fp, r0
 80077c2:	e75a      	b.n	800767a <__kernel_rem_pio2f+0xa2>
 80077c4:	d105      	bne.n	80077d2 <__kernel_rem_pio2f+0x1fa>
 80077c6:	1e63      	subs	r3, r4, #1
 80077c8:	aa0a      	add	r2, sp, #40	@ 0x28
 80077ca:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 80077ce:	11ed      	asrs	r5, r5, #7
 80077d0:	e788      	b.n	80076e4 <__kernel_rem_pio2f+0x10c>
 80077d2:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80077d6:	f7f8 ff79 	bl	80006cc <__aeabi_fcmpge>
 80077da:	4605      	mov	r5, r0
 80077dc:	bb90      	cbnz	r0, 8007844 <__kernel_rem_pio2f+0x26c>
 80077de:	2100      	movs	r1, #0
 80077e0:	4648      	mov	r0, r9
 80077e2:	f7f8 ff55 	bl	8000690 <__aeabi_fcmpeq>
 80077e6:	2800      	cmp	r0, #0
 80077e8:	f000 8090 	beq.w	800790c <__kernel_rem_pio2f+0x334>
 80077ec:	2200      	movs	r2, #0
 80077ee:	1e63      	subs	r3, r4, #1
 80077f0:	9901      	ldr	r1, [sp, #4]
 80077f2:	428b      	cmp	r3, r1
 80077f4:	da4a      	bge.n	800788c <__kernel_rem_pio2f+0x2b4>
 80077f6:	2a00      	cmp	r2, #0
 80077f8:	d076      	beq.n	80078e8 <__kernel_rem_pio2f+0x310>
 80077fa:	3c01      	subs	r4, #1
 80077fc:	ab0a      	add	r3, sp, #40	@ 0x28
 80077fe:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007802:	3f08      	subs	r7, #8
 8007804:	2b00      	cmp	r3, #0
 8007806:	d0f8      	beq.n	80077fa <__kernel_rem_pio2f+0x222>
 8007808:	4639      	mov	r1, r7
 800780a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800780e:	f000 f981 	bl	8007b14 <scalbnf>
 8007812:	46a2      	mov	sl, r4
 8007814:	4607      	mov	r7, r0
 8007816:	f04f 596e 	mov.w	r9, #998244352	@ 0x3b800000
 800781a:	f50d 788c 	add.w	r8, sp, #280	@ 0x118
 800781e:	f1ba 0f00 	cmp.w	sl, #0
 8007822:	f280 80a1 	bge.w	8007968 <__kernel_rem_pio2f+0x390>
 8007826:	4627      	mov	r7, r4
 8007828:	2200      	movs	r2, #0
 800782a:	2f00      	cmp	r7, #0
 800782c:	f2c0 80cb 	blt.w	80079c6 <__kernel_rem_pio2f+0x3ee>
 8007830:	a946      	add	r1, sp, #280	@ 0x118
 8007832:	4690      	mov	r8, r2
 8007834:	f04f 0a00 	mov.w	sl, #0
 8007838:	4b18      	ldr	r3, [pc, #96]	@ (800789c <__kernel_rem_pio2f+0x2c4>)
 800783a:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 800783e:	eba4 0907 	sub.w	r9, r4, r7
 8007842:	e0b4      	b.n	80079ae <__kernel_rem_pio2f+0x3d6>
 8007844:	2502      	movs	r5, #2
 8007846:	e74f      	b.n	80076e8 <__kernel_rem_pio2f+0x110>
 8007848:	f858 3b04 	ldr.w	r3, [r8], #4
 800784c:	f1ba 0f00 	cmp.w	sl, #0
 8007850:	d108      	bne.n	8007864 <__kernel_rem_pio2f+0x28c>
 8007852:	b123      	cbz	r3, 800785e <__kernel_rem_pio2f+0x286>
 8007854:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8007858:	f848 3c04 	str.w	r3, [r8, #-4]
 800785c:	2301      	movs	r3, #1
 800785e:	469a      	mov	sl, r3
 8007860:	3201      	adds	r2, #1
 8007862:	e744      	b.n	80076ee <__kernel_rem_pio2f+0x116>
 8007864:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8007868:	e7f6      	b.n	8007858 <__kernel_rem_pio2f+0x280>
 800786a:	1e62      	subs	r2, r4, #1
 800786c:	ab0a      	add	r3, sp, #40	@ 0x28
 800786e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007872:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007876:	a90a      	add	r1, sp, #40	@ 0x28
 8007878:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800787c:	e742      	b.n	8007704 <__kernel_rem_pio2f+0x12c>
 800787e:	1e62      	subs	r2, r4, #1
 8007880:	ab0a      	add	r3, sp, #40	@ 0x28
 8007882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007886:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800788a:	e7f4      	b.n	8007876 <__kernel_rem_pio2f+0x29e>
 800788c:	a90a      	add	r1, sp, #40	@ 0x28
 800788e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007892:	3b01      	subs	r3, #1
 8007894:	430a      	orrs	r2, r1
 8007896:	e7ab      	b.n	80077f0 <__kernel_rem_pio2f+0x218>
 8007898:	080083a8 	.word	0x080083a8
 800789c:	0800837c 	.word	0x0800837c
 80078a0:	3301      	adds	r3, #1
 80078a2:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80078a6:	2900      	cmp	r1, #0
 80078a8:	d0fa      	beq.n	80078a0 <__kernel_rem_pio2f+0x2c8>
 80078aa:	9a04      	ldr	r2, [sp, #16]
 80078ac:	a91e      	add	r1, sp, #120	@ 0x78
 80078ae:	18a2      	adds	r2, r4, r2
 80078b0:	1c66      	adds	r6, r4, #1
 80078b2:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 80078b6:	441c      	add	r4, r3
 80078b8:	f50d 798c 	add.w	r9, sp, #280	@ 0x118
 80078bc:	42b4      	cmp	r4, r6
 80078be:	f6ff aecf 	blt.w	8007660 <__kernel_rem_pio2f+0x88>
 80078c2:	9b07      	ldr	r3, [sp, #28]
 80078c4:	46ab      	mov	fp, r5
 80078c6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80078ca:	f7f8 fcf9 	bl	80002c0 <__aeabi_i2f>
 80078ce:	f04f 0a00 	mov.w	sl, #0
 80078d2:	f04f 0800 	mov.w	r8, #0
 80078d6:	6028      	str	r0, [r5, #0]
 80078d8:	9b03      	ldr	r3, [sp, #12]
 80078da:	459a      	cmp	sl, r3
 80078dc:	dd07      	ble.n	80078ee <__kernel_rem_pio2f+0x316>
 80078de:	f849 8026 	str.w	r8, [r9, r6, lsl #2]
 80078e2:	3504      	adds	r5, #4
 80078e4:	3601      	adds	r6, #1
 80078e6:	e7e9      	b.n	80078bc <__kernel_rem_pio2f+0x2e4>
 80078e8:	2301      	movs	r3, #1
 80078ea:	9a08      	ldr	r2, [sp, #32]
 80078ec:	e7d9      	b.n	80078a2 <__kernel_rem_pio2f+0x2ca>
 80078ee:	9b05      	ldr	r3, [sp, #20]
 80078f0:	f85b 0904 	ldr.w	r0, [fp], #-4
 80078f4:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 80078f8:	f7f8 fd36 	bl	8000368 <__aeabi_fmul>
 80078fc:	4601      	mov	r1, r0
 80078fe:	4640      	mov	r0, r8
 8007900:	f7f8 fc2a 	bl	8000158 <__addsf3>
 8007904:	f10a 0a01 	add.w	sl, sl, #1
 8007908:	4680      	mov	r8, r0
 800790a:	e7e5      	b.n	80078d8 <__kernel_rem_pio2f+0x300>
 800790c:	9b06      	ldr	r3, [sp, #24]
 800790e:	9a02      	ldr	r2, [sp, #8]
 8007910:	4648      	mov	r0, r9
 8007912:	1a99      	subs	r1, r3, r2
 8007914:	f000 f8fe 	bl	8007b14 <scalbnf>
 8007918:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800791c:	4680      	mov	r8, r0
 800791e:	f7f8 fed5 	bl	80006cc <__aeabi_fcmpge>
 8007922:	b1f8      	cbz	r0, 8007964 <__kernel_rem_pio2f+0x38c>
 8007924:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 8007928:	4640      	mov	r0, r8
 800792a:	f7f8 fd1d 	bl	8000368 <__aeabi_fmul>
 800792e:	f7f8 fef7 	bl	8000720 <__aeabi_f2iz>
 8007932:	f7f8 fcc5 	bl	80002c0 <__aeabi_i2f>
 8007936:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800793a:	4681      	mov	r9, r0
 800793c:	f7f8 fd14 	bl	8000368 <__aeabi_fmul>
 8007940:	4601      	mov	r1, r0
 8007942:	4640      	mov	r0, r8
 8007944:	f7f8 fc06 	bl	8000154 <__aeabi_fsub>
 8007948:	f7f8 feea 	bl	8000720 <__aeabi_f2iz>
 800794c:	ab0a      	add	r3, sp, #40	@ 0x28
 800794e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007952:	4648      	mov	r0, r9
 8007954:	3401      	adds	r4, #1
 8007956:	3708      	adds	r7, #8
 8007958:	f7f8 fee2 	bl	8000720 <__aeabi_f2iz>
 800795c:	ab0a      	add	r3, sp, #40	@ 0x28
 800795e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007962:	e751      	b.n	8007808 <__kernel_rem_pio2f+0x230>
 8007964:	4640      	mov	r0, r8
 8007966:	e7f7      	b.n	8007958 <__kernel_rem_pio2f+0x380>
 8007968:	ab0a      	add	r3, sp, #40	@ 0x28
 800796a:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800796e:	f7f8 fca7 	bl	80002c0 <__aeabi_i2f>
 8007972:	4639      	mov	r1, r7
 8007974:	f7f8 fcf8 	bl	8000368 <__aeabi_fmul>
 8007978:	4649      	mov	r1, r9
 800797a:	f848 002a 	str.w	r0, [r8, sl, lsl #2]
 800797e:	4638      	mov	r0, r7
 8007980:	f7f8 fcf2 	bl	8000368 <__aeabi_fmul>
 8007984:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007988:	4607      	mov	r7, r0
 800798a:	e748      	b.n	800781e <__kernel_rem_pio2f+0x246>
 800798c:	f853 0b04 	ldr.w	r0, [r3], #4
 8007990:	f85b 1b04 	ldr.w	r1, [fp], #4
 8007994:	9203      	str	r2, [sp, #12]
 8007996:	9302      	str	r3, [sp, #8]
 8007998:	f7f8 fce6 	bl	8000368 <__aeabi_fmul>
 800799c:	4601      	mov	r1, r0
 800799e:	4640      	mov	r0, r8
 80079a0:	f7f8 fbda 	bl	8000158 <__addsf3>
 80079a4:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80079a8:	4680      	mov	r8, r0
 80079aa:	f10a 0a01 	add.w	sl, sl, #1
 80079ae:	9901      	ldr	r1, [sp, #4]
 80079b0:	458a      	cmp	sl, r1
 80079b2:	dc01      	bgt.n	80079b8 <__kernel_rem_pio2f+0x3e0>
 80079b4:	45ca      	cmp	sl, r9
 80079b6:	dde9      	ble.n	800798c <__kernel_rem_pio2f+0x3b4>
 80079b8:	ab5a      	add	r3, sp, #360	@ 0x168
 80079ba:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 80079be:	f849 8ca0 	str.w	r8, [r9, #-160]
 80079c2:	3f01      	subs	r7, #1
 80079c4:	e731      	b.n	800782a <__kernel_rem_pio2f+0x252>
 80079c6:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80079c8:	2b02      	cmp	r3, #2
 80079ca:	dc07      	bgt.n	80079dc <__kernel_rem_pio2f+0x404>
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	dc4e      	bgt.n	8007a6e <__kernel_rem_pio2f+0x496>
 80079d0:	d02e      	beq.n	8007a30 <__kernel_rem_pio2f+0x458>
 80079d2:	f006 0007 	and.w	r0, r6, #7
 80079d6:	b05b      	add	sp, #364	@ 0x16c
 80079d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079dc:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80079de:	2b03      	cmp	r3, #3
 80079e0:	d1f7      	bne.n	80079d2 <__kernel_rem_pio2f+0x3fa>
 80079e2:	f10d 0bc8 	add.w	fp, sp, #200	@ 0xc8
 80079e6:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 80079ea:	46b8      	mov	r8, r7
 80079ec:	46a2      	mov	sl, r4
 80079ee:	f1ba 0f00 	cmp.w	sl, #0
 80079f2:	dc49      	bgt.n	8007a88 <__kernel_rem_pio2f+0x4b0>
 80079f4:	46a1      	mov	r9, r4
 80079f6:	f1b9 0f01 	cmp.w	r9, #1
 80079fa:	dc60      	bgt.n	8007abe <__kernel_rem_pio2f+0x4e6>
 80079fc:	2000      	movs	r0, #0
 80079fe:	2c01      	cmp	r4, #1
 8007a00:	dc76      	bgt.n	8007af0 <__kernel_rem_pio2f+0x518>
 8007a02:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 8007a04:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 8007a06:	2d00      	cmp	r5, #0
 8007a08:	d178      	bne.n	8007afc <__kernel_rem_pio2f+0x524>
 8007a0a:	9900      	ldr	r1, [sp, #0]
 8007a0c:	600a      	str	r2, [r1, #0]
 8007a0e:	460a      	mov	r2, r1
 8007a10:	604b      	str	r3, [r1, #4]
 8007a12:	6090      	str	r0, [r2, #8]
 8007a14:	e7dd      	b.n	80079d2 <__kernel_rem_pio2f+0x3fa>
 8007a16:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8007a1a:	f7f8 fb9d 	bl	8000158 <__addsf3>
 8007a1e:	3c01      	subs	r4, #1
 8007a20:	2c00      	cmp	r4, #0
 8007a22:	daf8      	bge.n	8007a16 <__kernel_rem_pio2f+0x43e>
 8007a24:	b10d      	cbz	r5, 8007a2a <__kernel_rem_pio2f+0x452>
 8007a26:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8007a2a:	9b00      	ldr	r3, [sp, #0]
 8007a2c:	6018      	str	r0, [r3, #0]
 8007a2e:	e7d0      	b.n	80079d2 <__kernel_rem_pio2f+0x3fa>
 8007a30:	2000      	movs	r0, #0
 8007a32:	af32      	add	r7, sp, #200	@ 0xc8
 8007a34:	e7f4      	b.n	8007a20 <__kernel_rem_pio2f+0x448>
 8007a36:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 8007a3a:	f7f8 fb8d 	bl	8000158 <__addsf3>
 8007a3e:	f108 38ff 	add.w	r8, r8, #4294967295
 8007a42:	f1b8 0f00 	cmp.w	r8, #0
 8007a46:	daf6      	bge.n	8007a36 <__kernel_rem_pio2f+0x45e>
 8007a48:	b1ad      	cbz	r5, 8007a76 <__kernel_rem_pio2f+0x49e>
 8007a4a:	f100 4300 	add.w	r3, r0, #2147483648	@ 0x80000000
 8007a4e:	9a00      	ldr	r2, [sp, #0]
 8007a50:	4601      	mov	r1, r0
 8007a52:	6013      	str	r3, [r2, #0]
 8007a54:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 8007a56:	f7f8 fb7d 	bl	8000154 <__aeabi_fsub>
 8007a5a:	f04f 0801 	mov.w	r8, #1
 8007a5e:	4544      	cmp	r4, r8
 8007a60:	da0b      	bge.n	8007a7a <__kernel_rem_pio2f+0x4a2>
 8007a62:	b10d      	cbz	r5, 8007a68 <__kernel_rem_pio2f+0x490>
 8007a64:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8007a68:	9b00      	ldr	r3, [sp, #0]
 8007a6a:	6058      	str	r0, [r3, #4]
 8007a6c:	e7b1      	b.n	80079d2 <__kernel_rem_pio2f+0x3fa>
 8007a6e:	46a0      	mov	r8, r4
 8007a70:	2000      	movs	r0, #0
 8007a72:	af32      	add	r7, sp, #200	@ 0xc8
 8007a74:	e7e5      	b.n	8007a42 <__kernel_rem_pio2f+0x46a>
 8007a76:	4603      	mov	r3, r0
 8007a78:	e7e9      	b.n	8007a4e <__kernel_rem_pio2f+0x476>
 8007a7a:	f857 1f04 	ldr.w	r1, [r7, #4]!
 8007a7e:	f7f8 fb6b 	bl	8000158 <__addsf3>
 8007a82:	f108 0801 	add.w	r8, r8, #1
 8007a86:	e7ea      	b.n	8007a5e <__kernel_rem_pio2f+0x486>
 8007a88:	f8d8 3000 	ldr.w	r3, [r8]
 8007a8c:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8007a90:	4619      	mov	r1, r3
 8007a92:	4610      	mov	r0, r2
 8007a94:	9302      	str	r3, [sp, #8]
 8007a96:	9201      	str	r2, [sp, #4]
 8007a98:	f7f8 fb5e 	bl	8000158 <__addsf3>
 8007a9c:	9a01      	ldr	r2, [sp, #4]
 8007a9e:	4601      	mov	r1, r0
 8007aa0:	4681      	mov	r9, r0
 8007aa2:	4610      	mov	r0, r2
 8007aa4:	f7f8 fb56 	bl	8000154 <__aeabi_fsub>
 8007aa8:	9b02      	ldr	r3, [sp, #8]
 8007aaa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007aae:	4619      	mov	r1, r3
 8007ab0:	f7f8 fb52 	bl	8000158 <__addsf3>
 8007ab4:	f848 0904 	str.w	r0, [r8], #-4
 8007ab8:	f8c8 9000 	str.w	r9, [r8]
 8007abc:	e797      	b.n	80079ee <__kernel_rem_pio2f+0x416>
 8007abe:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8007ac2:	f8d7 a000 	ldr.w	sl, [r7]
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	4651      	mov	r1, sl
 8007aca:	9301      	str	r3, [sp, #4]
 8007acc:	f7f8 fb44 	bl	8000158 <__addsf3>
 8007ad0:	9b01      	ldr	r3, [sp, #4]
 8007ad2:	4601      	mov	r1, r0
 8007ad4:	4680      	mov	r8, r0
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f7f8 fb3c 	bl	8000154 <__aeabi_fsub>
 8007adc:	4651      	mov	r1, sl
 8007ade:	f7f8 fb3b 	bl	8000158 <__addsf3>
 8007ae2:	f847 0904 	str.w	r0, [r7], #-4
 8007ae6:	f109 39ff 	add.w	r9, r9, #4294967295
 8007aea:	f8c7 8000 	str.w	r8, [r7]
 8007aee:	e782      	b.n	80079f6 <__kernel_rem_pio2f+0x41e>
 8007af0:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 8007af4:	f7f8 fb30 	bl	8000158 <__addsf3>
 8007af8:	3c01      	subs	r4, #1
 8007afa:	e780      	b.n	80079fe <__kernel_rem_pio2f+0x426>
 8007afc:	9900      	ldr	r1, [sp, #0]
 8007afe:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 8007b02:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8007b06:	600a      	str	r2, [r1, #0]
 8007b08:	604b      	str	r3, [r1, #4]
 8007b0a:	460a      	mov	r2, r1
 8007b0c:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8007b10:	e77f      	b.n	8007a12 <__kernel_rem_pio2f+0x43a>
 8007b12:	bf00      	nop

08007b14 <scalbnf>:
 8007b14:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8007b18:	b538      	push	{r3, r4, r5, lr}
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	460d      	mov	r5, r1
 8007b1e:	4604      	mov	r4, r0
 8007b20:	d02e      	beq.n	8007b80 <scalbnf+0x6c>
 8007b22:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8007b26:	d304      	bcc.n	8007b32 <scalbnf+0x1e>
 8007b28:	4601      	mov	r1, r0
 8007b2a:	f7f8 fb15 	bl	8000158 <__addsf3>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	e026      	b.n	8007b80 <scalbnf+0x6c>
 8007b32:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 8007b36:	d118      	bne.n	8007b6a <scalbnf+0x56>
 8007b38:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 8007b3c:	f7f8 fc14 	bl	8000368 <__aeabi_fmul>
 8007b40:	4a17      	ldr	r2, [pc, #92]	@ (8007ba0 <scalbnf+0x8c>)
 8007b42:	4603      	mov	r3, r0
 8007b44:	4295      	cmp	r5, r2
 8007b46:	db0c      	blt.n	8007b62 <scalbnf+0x4e>
 8007b48:	4604      	mov	r4, r0
 8007b4a:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8007b4e:	3a19      	subs	r2, #25
 8007b50:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8007b54:	428d      	cmp	r5, r1
 8007b56:	dd0a      	ble.n	8007b6e <scalbnf+0x5a>
 8007b58:	4912      	ldr	r1, [pc, #72]	@ (8007ba4 <scalbnf+0x90>)
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f361 001e 	bfi	r0, r1, #0, #31
 8007b60:	e000      	b.n	8007b64 <scalbnf+0x50>
 8007b62:	4911      	ldr	r1, [pc, #68]	@ (8007ba8 <scalbnf+0x94>)
 8007b64:	f7f8 fc00 	bl	8000368 <__aeabi_fmul>
 8007b68:	e7e1      	b.n	8007b2e <scalbnf+0x1a>
 8007b6a:	0dd2      	lsrs	r2, r2, #23
 8007b6c:	e7f0      	b.n	8007b50 <scalbnf+0x3c>
 8007b6e:	1951      	adds	r1, r2, r5
 8007b70:	29fe      	cmp	r1, #254	@ 0xfe
 8007b72:	dcf1      	bgt.n	8007b58 <scalbnf+0x44>
 8007b74:	2900      	cmp	r1, #0
 8007b76:	dd05      	ble.n	8007b84 <scalbnf+0x70>
 8007b78:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 8007b7c:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 8007b80:	4618      	mov	r0, r3
 8007b82:	bd38      	pop	{r3, r4, r5, pc}
 8007b84:	f111 0f16 	cmn.w	r1, #22
 8007b88:	da01      	bge.n	8007b8e <scalbnf+0x7a>
 8007b8a:	4907      	ldr	r1, [pc, #28]	@ (8007ba8 <scalbnf+0x94>)
 8007b8c:	e7e5      	b.n	8007b5a <scalbnf+0x46>
 8007b8e:	f101 0019 	add.w	r0, r1, #25
 8007b92:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 8007b96:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 8007b9a:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 8007b9e:	e7e1      	b.n	8007b64 <scalbnf+0x50>
 8007ba0:	ffff3cb0 	.word	0xffff3cb0
 8007ba4:	7149f2ca 	.word	0x7149f2ca
 8007ba8:	0da24260 	.word	0x0da24260

08007bac <floorf>:
 8007bac:	b570      	push	{r4, r5, r6, lr}
 8007bae:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8007bb2:	3d7f      	subs	r5, #127	@ 0x7f
 8007bb4:	2d16      	cmp	r5, #22
 8007bb6:	4601      	mov	r1, r0
 8007bb8:	4604      	mov	r4, r0
 8007bba:	f020 4600 	bic.w	r6, r0, #2147483648	@ 0x80000000
 8007bbe:	dc26      	bgt.n	8007c0e <floorf+0x62>
 8007bc0:	2d00      	cmp	r5, #0
 8007bc2:	da0f      	bge.n	8007be4 <floorf+0x38>
 8007bc4:	4917      	ldr	r1, [pc, #92]	@ (8007c24 <floorf+0x78>)
 8007bc6:	f7f8 fac7 	bl	8000158 <__addsf3>
 8007bca:	2100      	movs	r1, #0
 8007bcc:	f7f8 fd88 	bl	80006e0 <__aeabi_fcmpgt>
 8007bd0:	b130      	cbz	r0, 8007be0 <floorf+0x34>
 8007bd2:	2c00      	cmp	r4, #0
 8007bd4:	da23      	bge.n	8007c1e <floorf+0x72>
 8007bd6:	2e00      	cmp	r6, #0
 8007bd8:	4c13      	ldr	r4, [pc, #76]	@ (8007c28 <floorf+0x7c>)
 8007bda:	bf08      	it	eq
 8007bdc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8007be0:	4621      	mov	r1, r4
 8007be2:	e01a      	b.n	8007c1a <floorf+0x6e>
 8007be4:	4e11      	ldr	r6, [pc, #68]	@ (8007c2c <floorf+0x80>)
 8007be6:	412e      	asrs	r6, r5
 8007be8:	4230      	tst	r0, r6
 8007bea:	d016      	beq.n	8007c1a <floorf+0x6e>
 8007bec:	490d      	ldr	r1, [pc, #52]	@ (8007c24 <floorf+0x78>)
 8007bee:	f7f8 fab3 	bl	8000158 <__addsf3>
 8007bf2:	2100      	movs	r1, #0
 8007bf4:	f7f8 fd74 	bl	80006e0 <__aeabi_fcmpgt>
 8007bf8:	2800      	cmp	r0, #0
 8007bfa:	d0f1      	beq.n	8007be0 <floorf+0x34>
 8007bfc:	2c00      	cmp	r4, #0
 8007bfe:	bfbe      	ittt	lt
 8007c00:	f44f 0300 	movlt.w	r3, #8388608	@ 0x800000
 8007c04:	412b      	asrlt	r3, r5
 8007c06:	18e4      	addlt	r4, r4, r3
 8007c08:	ea24 0406 	bic.w	r4, r4, r6
 8007c0c:	e7e8      	b.n	8007be0 <floorf+0x34>
 8007c0e:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 8007c12:	d302      	bcc.n	8007c1a <floorf+0x6e>
 8007c14:	f7f8 faa0 	bl	8000158 <__addsf3>
 8007c18:	4601      	mov	r1, r0
 8007c1a:	4608      	mov	r0, r1
 8007c1c:	bd70      	pop	{r4, r5, r6, pc}
 8007c1e:	2400      	movs	r4, #0
 8007c20:	e7de      	b.n	8007be0 <floorf+0x34>
 8007c22:	bf00      	nop
 8007c24:	7149f2ca 	.word	0x7149f2ca
 8007c28:	bf800000 	.word	0xbf800000
 8007c2c:	007fffff 	.word	0x007fffff

08007c30 <_init>:
 8007c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c32:	bf00      	nop
 8007c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c36:	bc08      	pop	{r3}
 8007c38:	469e      	mov	lr, r3
 8007c3a:	4770      	bx	lr

08007c3c <_fini>:
 8007c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c3e:	bf00      	nop
 8007c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c42:	bc08      	pop	{r3}
 8007c44:	469e      	mov	lr, r3
 8007c46:	4770      	bx	lr
